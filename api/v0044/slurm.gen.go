// Package v0044 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package v0044

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
	TokenScopes      = "token.Scopes"
	UserScopes       = "user.Scopes"
)

// Defines values for V0044AccountFlags.
const (
	V0044AccountFlagsDELETED          V0044AccountFlags = "DELETED"
	V0044AccountFlagsNoUsersAreCoords V0044AccountFlags = "NoUsersAreCoords"
	V0044AccountFlagsUsersAreCoords   V0044AccountFlags = "UsersAreCoords"
	V0044AccountFlagsWithAssociations V0044AccountFlags = "WithAssociations"
	V0044AccountFlagsWithCoordinators V0044AccountFlags = "WithCoordinators"
)

// Defines values for V0044AssocFlags.
const (
	V0044AssocFlagsDELETED          V0044AssocFlags = "DELETED"
	V0044AssocFlagsExact            V0044AssocFlags = "Exact"
	V0044AssocFlagsNoUpdate         V0044AssocFlags = "NoUpdate"
	V0044AssocFlagsNoUsersAreCoords V0044AssocFlags = "NoUsersAreCoords"
	V0044AssocFlagsUsersAreCoords   V0044AssocFlags = "UsersAreCoords"
)

// Defines values for V0044AssocSharesObjWrapType.
const (
	ASSOCIATION V0044AssocSharesObjWrapType = "ASSOCIATION"
	USER        V0044AssocSharesObjWrapType = "USER"
)

// Defines values for V0044ClusterRecFlags.
const (
	V0044ClusterRecFlagsDELETED        V0044ClusterRecFlags = "DELETED"
	V0044ClusterRecFlagsEXTERNAL       V0044ClusterRecFlags = "EXTERNAL"
	V0044ClusterRecFlagsFEDERATION     V0044ClusterRecFlags = "FEDERATION"
	V0044ClusterRecFlagsMULTIPLESLURMD V0044ClusterRecFlags = "MULTIPLE_SLURMD"
	V0044ClusterRecFlagsREGISTERING    V0044ClusterRecFlags = "REGISTERING"
)

// Defines values for V0044CronEntryFlags.
const (
	WILDDAYOFMONTH V0044CronEntryFlags = "WILD_DAY_OF_MONTH"
	WILDDAYOFWEEK  V0044CronEntryFlags = "WILD_DAY_OF_WEEK"
	WILDHOUR       V0044CronEntryFlags = "WILD_HOUR"
	WILDMINUTE     V0044CronEntryFlags = "WILD_MINUTE"
	WILDMONTH      V0044CronEntryFlags = "WILD_MONTH"
)

// Defines values for V0044JobFlags.
const (
	V0044JobFlagsCLEARSCHEDULING   V0044JobFlags = "CLEAR_SCHEDULING"
	V0044JobFlagsJOBALTERED        V0044JobFlags = "JOB_ALTERED"
	V0044JobFlagsNONE              V0044JobFlags = "NONE"
	V0044JobFlagsNOTSET            V0044JobFlags = "NOT_SET"
	V0044JobFlagsSTARTEDONBACKFILL V0044JobFlags = "STARTED_ON_BACKFILL"
	V0044JobFlagsSTARTEDONSCHEDULE V0044JobFlags = "STARTED_ON_SCHEDULE"
	V0044JobFlagsSTARTEDONSUBMIT   V0044JobFlags = "STARTED_ON_SUBMIT"
	V0044JobFlagsSTARTRECEIVED     V0044JobFlags = "START_RECEIVED"
)

// Defines values for V0044JobStateCurrent.
const (
	V0044JobStateCurrentBOOTFAIL     V0044JobStateCurrent = "BOOT_FAIL"
	V0044JobStateCurrentCANCELLED    V0044JobStateCurrent = "CANCELLED"
	V0044JobStateCurrentCOMPLETED    V0044JobStateCurrent = "COMPLETED"
	V0044JobStateCurrentCOMPLETING   V0044JobStateCurrent = "COMPLETING"
	V0044JobStateCurrentCONFIGURING  V0044JobStateCurrent = "CONFIGURING"
	V0044JobStateCurrentDEADLINE     V0044JobStateCurrent = "DEADLINE"
	V0044JobStateCurrentEXPEDITING   V0044JobStateCurrent = "EXPEDITING"
	V0044JobStateCurrentFAILED       V0044JobStateCurrent = "FAILED"
	V0044JobStateCurrentLAUNCHFAILED V0044JobStateCurrent = "LAUNCH_FAILED"
	V0044JobStateCurrentNODEFAIL     V0044JobStateCurrent = "NODE_FAIL"
	V0044JobStateCurrentOUTOFMEMORY  V0044JobStateCurrent = "OUT_OF_MEMORY"
	V0044JobStateCurrentPENDING      V0044JobStateCurrent = "PENDING"
	V0044JobStateCurrentPOWERUPNODE  V0044JobStateCurrent = "POWER_UP_NODE"
	V0044JobStateCurrentPREEMPTED    V0044JobStateCurrent = "PREEMPTED"
	V0044JobStateCurrentRECONFIGFAIL V0044JobStateCurrent = "RECONFIG_FAIL"
	V0044JobStateCurrentREQUEUED     V0044JobStateCurrent = "REQUEUED"
	V0044JobStateCurrentREQUEUEFED   V0044JobStateCurrent = "REQUEUE_FED"
	V0044JobStateCurrentREQUEUEHOLD  V0044JobStateCurrent = "REQUEUE_HOLD"
	V0044JobStateCurrentRESIZING     V0044JobStateCurrent = "RESIZING"
	V0044JobStateCurrentRESVDELHOLD  V0044JobStateCurrent = "RESV_DEL_HOLD"
	V0044JobStateCurrentREVOKED      V0044JobStateCurrent = "REVOKED"
	V0044JobStateCurrentRUNNING      V0044JobStateCurrent = "RUNNING"
	V0044JobStateCurrentSIGNALING    V0044JobStateCurrent = "SIGNALING"
	V0044JobStateCurrentSPECIALEXIT  V0044JobStateCurrent = "SPECIAL_EXIT"
	V0044JobStateCurrentSTAGEOUT     V0044JobStateCurrent = "STAGE_OUT"
	V0044JobStateCurrentSTOPPED      V0044JobStateCurrent = "STOPPED"
	V0044JobStateCurrentSUSPENDED    V0044JobStateCurrent = "SUSPENDED"
	V0044JobStateCurrentTIMEOUT      V0044JobStateCurrent = "TIMEOUT"
)

// Defines values for V0044JobDescMsgCpuBindingFlags.
const (
	V0044JobDescMsgCpuBindingFlagsCPUBINDLDMAP            V0044JobDescMsgCpuBindingFlags = "CPU_BIND_LDMAP"
	V0044JobDescMsgCpuBindingFlagsCPUBINDLDMASK           V0044JobDescMsgCpuBindingFlags = "CPU_BIND_LDMASK"
	V0044JobDescMsgCpuBindingFlagsCPUBINDLDRANK           V0044JobDescMsgCpuBindingFlags = "CPU_BIND_LDRANK"
	V0044JobDescMsgCpuBindingFlagsCPUBINDMAP              V0044JobDescMsgCpuBindingFlags = "CPU_BIND_MAP"
	V0044JobDescMsgCpuBindingFlagsCPUBINDMASK             V0044JobDescMsgCpuBindingFlags = "CPU_BIND_MASK"
	V0044JobDescMsgCpuBindingFlagsCPUBINDNONE             V0044JobDescMsgCpuBindingFlags = "CPU_BIND_NONE"
	V0044JobDescMsgCpuBindingFlagsCPUBINDONETHREADPERCORE V0044JobDescMsgCpuBindingFlags = "CPU_BIND_ONE_THREAD_PER_CORE"
	V0044JobDescMsgCpuBindingFlagsCPUBINDRANK             V0044JobDescMsgCpuBindingFlags = "CPU_BIND_RANK"
	V0044JobDescMsgCpuBindingFlagsCPUBINDTOCORES          V0044JobDescMsgCpuBindingFlags = "CPU_BIND_TO_CORES"
	V0044JobDescMsgCpuBindingFlagsCPUBINDTOLDOMS          V0044JobDescMsgCpuBindingFlags = "CPU_BIND_TO_LDOMS"
	V0044JobDescMsgCpuBindingFlagsCPUBINDTOSOCKETS        V0044JobDescMsgCpuBindingFlags = "CPU_BIND_TO_SOCKETS"
	V0044JobDescMsgCpuBindingFlagsCPUBINDTOTHREADS        V0044JobDescMsgCpuBindingFlags = "CPU_BIND_TO_THREADS"
	V0044JobDescMsgCpuBindingFlagsVERBOSE                 V0044JobDescMsgCpuBindingFlags = "VERBOSE"
)

// Defines values for V0044JobDescMsgFlags.
const (
	V0044JobDescMsgFlagsACCRUECOUNTCLEARED       V0044JobDescMsgFlags = "ACCRUE_COUNT_CLEARED"
	V0044JobDescMsgFlagsBACKFILLATTEMPTED        V0044JobDescMsgFlags = "BACKFILL_ATTEMPTED"
	V0044JobDescMsgFlagsCONSOLIDATESEGMENTS      V0044JobDescMsgFlags = "CONSOLIDATE_SEGMENTS"
	V0044JobDescMsgFlagsCRONJOB                  V0044JobDescMsgFlags = "CRON_JOB"
	V0044JobDescMsgFlagsDEPENDENT                V0044JobDescMsgFlags = "DEPENDENT"
	V0044JobDescMsgFlagsEXACTCPUCOUNTREQUESTED   V0044JobDescMsgFlags = "EXACT_CPU_COUNT_REQUESTED"
	V0044JobDescMsgFlagsEXACTMEMORYREQUESTED     V0044JobDescMsgFlags = "EXACT_MEMORY_REQUESTED"
	V0044JobDescMsgFlagsEXACTTASKCOUNTREQUESTED  V0044JobDescMsgFlags = "EXACT_TASK_COUNT_REQUESTED"
	V0044JobDescMsgFlagsEXPEDITEDREQUEUE         V0044JobDescMsgFlags = "EXPEDITED_REQUEUE"
	V0044JobDescMsgFlagsEXTERNALJOB              V0044JobDescMsgFlags = "EXTERNAL_JOB"
	V0044JobDescMsgFlagsGRESBINDINGDISABLED      V0044JobDescMsgFlags = "GRES_BINDING_DISABLED"
	V0044JobDescMsgFlagsGRESBINDINGENFORCED      V0044JobDescMsgFlags = "GRES_BINDING_ENFORCED"
	V0044JobDescMsgFlagsHASSTATEDIRECTORY        V0044JobDescMsgFlags = "HAS_STATE_DIRECTORY"
	V0044JobDescMsgFlagsHETEROGENEOUSJOB         V0044JobDescMsgFlags = "HETEROGENEOUS_JOB"
	V0044JobDescMsgFlagsJOBACCRUETIMERESET       V0044JobDescMsgFlags = "JOB_ACCRUE_TIME_RESET"
	V0044JobDescMsgFlagsJOBKILLHURRY             V0044JobDescMsgFlags = "JOB_KILL_HURRY"
	V0044JobDescMsgFlagsJOBWASRUNNING            V0044JobDescMsgFlags = "JOB_WAS_RUNNING"
	V0044JobDescMsgFlagsKILLINVALIDDEPENDENCY    V0044JobDescMsgFlags = "KILL_INVALID_DEPENDENCY"
	V0044JobDescMsgFlagsMAGNETIC                 V0044JobDescMsgFlags = "MAGNETIC"
	V0044JobDescMsgFlagsNOKILLINVALIDDEPENDENCY  V0044JobDescMsgFlags = "NO_KILL_INVALID_DEPENDENCY"
	V0044JobDescMsgFlagsPARTITIONASSIGNED        V0044JobDescMsgFlags = "PARTITION_ASSIGNED"
	V0044JobDescMsgFlagsPREFERMINIMUMNODECOUNT   V0044JobDescMsgFlags = "PREFER_MINIMUM_NODE_COUNT"
	V0044JobDescMsgFlagsSCHEDULINGATTEMPTED      V0044JobDescMsgFlags = "SCHEDULING_ATTEMPTED"
	V0044JobDescMsgFlagsSENDJOBENVIRONMENT       V0044JobDescMsgFlags = "SEND_JOB_ENVIRONMENT"
	V0044JobDescMsgFlagsSIBLINGCLUSTERUPDATEONLY V0044JobDescMsgFlags = "SIBLING_CLUSTER_UPDATE_ONLY"
	V0044JobDescMsgFlagsSKIPTRESSTRINGACCOUNTING V0044JobDescMsgFlags = "SKIP_TRES_STRING_ACCOUNTING"
	V0044JobDescMsgFlagsSPREADJOB                V0044JobDescMsgFlags = "SPREAD_JOB"
	V0044JobDescMsgFlagsSPREADSEGMENTS           V0044JobDescMsgFlags = "SPREAD_SEGMENTS"
	V0044JobDescMsgFlagsSTEPMGRENABLED           V0044JobDescMsgFlags = "STEPMGR_ENABLED"
	V0044JobDescMsgFlagsTESTINGBACKFILL          V0044JobDescMsgFlags = "TESTING_BACKFILL"
	V0044JobDescMsgFlagsTESTINGWHOLENODEBACKFILL V0044JobDescMsgFlags = "TESTING_WHOLE_NODE_BACKFILL"
	V0044JobDescMsgFlagsTESTNOWONLY              V0044JobDescMsgFlags = "TEST_NOW_ONLY"
	V0044JobDescMsgFlagsTOPPRIORITYJOB           V0044JobDescMsgFlags = "TOP_PRIORITY_JOB"
	V0044JobDescMsgFlagsUSINGDEFAULTACCOUNT      V0044JobDescMsgFlags = "USING_DEFAULT_ACCOUNT"
	V0044JobDescMsgFlagsUSINGDEFAULTPARTITION    V0044JobDescMsgFlags = "USING_DEFAULT_PARTITION"
	V0044JobDescMsgFlagsUSINGDEFAULTQOS          V0044JobDescMsgFlags = "USING_DEFAULT_QOS"
	V0044JobDescMsgFlagsUSINGDEFAULTWCKEY        V0044JobDescMsgFlags = "USING_DEFAULT_WCKEY"
)

// Defines values for V0044JobDescMsgKillWarningFlags.
const (
	V0044JobDescMsgKillWarningFlagsARRAYTASK         V0044JobDescMsgKillWarningFlags = "ARRAY_TASK"
	V0044JobDescMsgKillWarningFlagsBATCHJOB          V0044JobDescMsgKillWarningFlags = "BATCH_JOB"
	V0044JobDescMsgKillWarningFlagsCRONJOBS          V0044JobDescMsgKillWarningFlags = "CRON_JOBS"
	V0044JobDescMsgKillWarningFlagsFEDERATIONREQUEUE V0044JobDescMsgKillWarningFlags = "FEDERATION_REQUEUE"
	V0044JobDescMsgKillWarningFlagsFULLJOB           V0044JobDescMsgKillWarningFlags = "FULL_JOB"
	V0044JobDescMsgKillWarningFlagsFULLSTEPSONLY     V0044JobDescMsgKillWarningFlags = "FULL_STEPS_ONLY"
	V0044JobDescMsgKillWarningFlagsHURRY             V0044JobDescMsgKillWarningFlags = "HURRY"
	V0044JobDescMsgKillWarningFlagsNOSIBLINGJOBS     V0044JobDescMsgKillWarningFlags = "NO_SIBLING_JOBS"
	V0044JobDescMsgKillWarningFlagsOUTOFMEMORY       V0044JobDescMsgKillWarningFlags = "OUT_OF_MEMORY"
	V0044JobDescMsgKillWarningFlagsRESERVATIONJOB    V0044JobDescMsgKillWarningFlags = "RESERVATION_JOB"
	V0044JobDescMsgKillWarningFlagsVERBOSE           V0044JobDescMsgKillWarningFlags = "VERBOSE"
	V0044JobDescMsgKillWarningFlagsWARNINGSENT       V0044JobDescMsgKillWarningFlags = "WARNING_SENT"
)

// Defines values for V0044JobDescMsgMailType.
const (
	V0044JobDescMsgMailTypeARRAYTASKS        V0044JobDescMsgMailType = "ARRAY_TASKS"
	V0044JobDescMsgMailTypeBEGIN             V0044JobDescMsgMailType = "BEGIN"
	V0044JobDescMsgMailTypeEND               V0044JobDescMsgMailType = "END"
	V0044JobDescMsgMailTypeFAIL              V0044JobDescMsgMailType = "FAIL"
	V0044JobDescMsgMailTypeINVALIDDEPENDENCY V0044JobDescMsgMailType = "INVALID_DEPENDENCY"
	V0044JobDescMsgMailTypeREQUEUE           V0044JobDescMsgMailType = "REQUEUE"
	V0044JobDescMsgMailTypeSTAGEOUT          V0044JobDescMsgMailType = "STAGE_OUT"
	V0044JobDescMsgMailTypeTIME100           V0044JobDescMsgMailType = "TIME=100%"
	V0044JobDescMsgMailTypeTIME50            V0044JobDescMsgMailType = "TIME=50%"
	V0044JobDescMsgMailTypeTIME80            V0044JobDescMsgMailType = "TIME=80%"
	V0044JobDescMsgMailTypeTIME90            V0044JobDescMsgMailType = "TIME=90%"
)

// Defines values for V0044JobDescMsgMemoryBindingType.
const (
	V0044JobDescMsgMemoryBindingTypeLOCAL   V0044JobDescMsgMemoryBindingType = "LOCAL"
	V0044JobDescMsgMemoryBindingTypeMAP     V0044JobDescMsgMemoryBindingType = "MAP"
	V0044JobDescMsgMemoryBindingTypeMASK    V0044JobDescMsgMemoryBindingType = "MASK"
	V0044JobDescMsgMemoryBindingTypeNONE    V0044JobDescMsgMemoryBindingType = "NONE"
	V0044JobDescMsgMemoryBindingTypePREFER  V0044JobDescMsgMemoryBindingType = "PREFER"
	V0044JobDescMsgMemoryBindingTypeRANK    V0044JobDescMsgMemoryBindingType = "RANK"
	V0044JobDescMsgMemoryBindingTypeVERBOSE V0044JobDescMsgMemoryBindingType = "VERBOSE"
)

// Defines values for V0044JobDescMsgOpenMode.
const (
	APPEND   V0044JobDescMsgOpenMode = "APPEND"
	TRUNCATE V0044JobDescMsgOpenMode = "TRUNCATE"
)

// Defines values for V0044JobDescMsgProfile.
const (
	V0044JobDescMsgProfileENERGY  V0044JobDescMsgProfile = "ENERGY"
	V0044JobDescMsgProfileLUSTRE  V0044JobDescMsgProfile = "LUSTRE"
	V0044JobDescMsgProfileNETWORK V0044JobDescMsgProfile = "NETWORK"
	V0044JobDescMsgProfileNONE    V0044JobDescMsgProfile = "NONE"
	V0044JobDescMsgProfileNOTSET  V0044JobDescMsgProfile = "NOT_SET"
	V0044JobDescMsgProfileTASK    V0044JobDescMsgProfile = "TASK"
)

// Defines values for V0044JobDescMsgShared.
const (
	V0044JobDescMsgSharedMcs           V0044JobDescMsgShared = "mcs"
	V0044JobDescMsgSharedNone          V0044JobDescMsgShared = "none"
	V0044JobDescMsgSharedOversubscribe V0044JobDescMsgShared = "oversubscribe"
	V0044JobDescMsgSharedTopo          V0044JobDescMsgShared = "topo"
	V0044JobDescMsgSharedUser          V0044JobDescMsgShared = "user"
)

// Defines values for V0044JobDescMsgX11.
const (
	BATCHNODE       V0044JobDescMsgX11 = "BATCH_NODE"
	FIRSTNODE       V0044JobDescMsgX11 = "FIRST_NODE"
	FORWARDALLNODES V0044JobDescMsgX11 = "FORWARD_ALL_NODES"
	LASTNODE        V0044JobDescMsgX11 = "LAST_NODE"
)

// Defines values for V0044JobInfoFlags.
const (
	V0044JobInfoFlagsACCRUECOUNTCLEARED       V0044JobInfoFlags = "ACCRUE_COUNT_CLEARED"
	V0044JobInfoFlagsBACKFILLATTEMPTED        V0044JobInfoFlags = "BACKFILL_ATTEMPTED"
	V0044JobInfoFlagsCONSOLIDATESEGMENTS      V0044JobInfoFlags = "CONSOLIDATE_SEGMENTS"
	V0044JobInfoFlagsCRONJOB                  V0044JobInfoFlags = "CRON_JOB"
	V0044JobInfoFlagsDEPENDENT                V0044JobInfoFlags = "DEPENDENT"
	V0044JobInfoFlagsEXACTCPUCOUNTREQUESTED   V0044JobInfoFlags = "EXACT_CPU_COUNT_REQUESTED"
	V0044JobInfoFlagsEXACTMEMORYREQUESTED     V0044JobInfoFlags = "EXACT_MEMORY_REQUESTED"
	V0044JobInfoFlagsEXACTTASKCOUNTREQUESTED  V0044JobInfoFlags = "EXACT_TASK_COUNT_REQUESTED"
	V0044JobInfoFlagsEXPEDITEDREQUEUE         V0044JobInfoFlags = "EXPEDITED_REQUEUE"
	V0044JobInfoFlagsEXTERNALJOB              V0044JobInfoFlags = "EXTERNAL_JOB"
	V0044JobInfoFlagsGRESBINDINGDISABLED      V0044JobInfoFlags = "GRES_BINDING_DISABLED"
	V0044JobInfoFlagsGRESBINDINGENFORCED      V0044JobInfoFlags = "GRES_BINDING_ENFORCED"
	V0044JobInfoFlagsHASSTATEDIRECTORY        V0044JobInfoFlags = "HAS_STATE_DIRECTORY"
	V0044JobInfoFlagsHETEROGENEOUSJOB         V0044JobInfoFlags = "HETEROGENEOUS_JOB"
	V0044JobInfoFlagsJOBACCRUETIMERESET       V0044JobInfoFlags = "JOB_ACCRUE_TIME_RESET"
	V0044JobInfoFlagsJOBKILLHURRY             V0044JobInfoFlags = "JOB_KILL_HURRY"
	V0044JobInfoFlagsJOBWASRUNNING            V0044JobInfoFlags = "JOB_WAS_RUNNING"
	V0044JobInfoFlagsKILLINVALIDDEPENDENCY    V0044JobInfoFlags = "KILL_INVALID_DEPENDENCY"
	V0044JobInfoFlagsMAGNETIC                 V0044JobInfoFlags = "MAGNETIC"
	V0044JobInfoFlagsNOKILLINVALIDDEPENDENCY  V0044JobInfoFlags = "NO_KILL_INVALID_DEPENDENCY"
	V0044JobInfoFlagsPARTITIONASSIGNED        V0044JobInfoFlags = "PARTITION_ASSIGNED"
	V0044JobInfoFlagsPREFERMINIMUMNODECOUNT   V0044JobInfoFlags = "PREFER_MINIMUM_NODE_COUNT"
	V0044JobInfoFlagsSCHEDULINGATTEMPTED      V0044JobInfoFlags = "SCHEDULING_ATTEMPTED"
	V0044JobInfoFlagsSENDJOBENVIRONMENT       V0044JobInfoFlags = "SEND_JOB_ENVIRONMENT"
	V0044JobInfoFlagsSIBLINGCLUSTERUPDATEONLY V0044JobInfoFlags = "SIBLING_CLUSTER_UPDATE_ONLY"
	V0044JobInfoFlagsSKIPTRESSTRINGACCOUNTING V0044JobInfoFlags = "SKIP_TRES_STRING_ACCOUNTING"
	V0044JobInfoFlagsSPREADJOB                V0044JobInfoFlags = "SPREAD_JOB"
	V0044JobInfoFlagsSPREADSEGMENTS           V0044JobInfoFlags = "SPREAD_SEGMENTS"
	V0044JobInfoFlagsSTEPMGRENABLED           V0044JobInfoFlags = "STEPMGR_ENABLED"
	V0044JobInfoFlagsTESTINGBACKFILL          V0044JobInfoFlags = "TESTING_BACKFILL"
	V0044JobInfoFlagsTESTINGWHOLENODEBACKFILL V0044JobInfoFlags = "TESTING_WHOLE_NODE_BACKFILL"
	V0044JobInfoFlagsTESTNOWONLY              V0044JobInfoFlags = "TEST_NOW_ONLY"
	V0044JobInfoFlagsTOPPRIORITYJOB           V0044JobInfoFlags = "TOP_PRIORITY_JOB"
	V0044JobInfoFlagsUSINGDEFAULTACCOUNT      V0044JobInfoFlags = "USING_DEFAULT_ACCOUNT"
	V0044JobInfoFlagsUSINGDEFAULTPARTITION    V0044JobInfoFlags = "USING_DEFAULT_PARTITION"
	V0044JobInfoFlagsUSINGDEFAULTQOS          V0044JobInfoFlags = "USING_DEFAULT_QOS"
	V0044JobInfoFlagsUSINGDEFAULTWCKEY        V0044JobInfoFlags = "USING_DEFAULT_WCKEY"
)

// Defines values for V0044JobInfoJobState.
const (
	V0044JobInfoJobStateBOOTFAIL     V0044JobInfoJobState = "BOOT_FAIL"
	V0044JobInfoJobStateCANCELLED    V0044JobInfoJobState = "CANCELLED"
	V0044JobInfoJobStateCOMPLETED    V0044JobInfoJobState = "COMPLETED"
	V0044JobInfoJobStateCOMPLETING   V0044JobInfoJobState = "COMPLETING"
	V0044JobInfoJobStateCONFIGURING  V0044JobInfoJobState = "CONFIGURING"
	V0044JobInfoJobStateDEADLINE     V0044JobInfoJobState = "DEADLINE"
	V0044JobInfoJobStateEXPEDITING   V0044JobInfoJobState = "EXPEDITING"
	V0044JobInfoJobStateFAILED       V0044JobInfoJobState = "FAILED"
	V0044JobInfoJobStateLAUNCHFAILED V0044JobInfoJobState = "LAUNCH_FAILED"
	V0044JobInfoJobStateNODEFAIL     V0044JobInfoJobState = "NODE_FAIL"
	V0044JobInfoJobStateOUTOFMEMORY  V0044JobInfoJobState = "OUT_OF_MEMORY"
	V0044JobInfoJobStatePENDING      V0044JobInfoJobState = "PENDING"
	V0044JobInfoJobStatePOWERUPNODE  V0044JobInfoJobState = "POWER_UP_NODE"
	V0044JobInfoJobStatePREEMPTED    V0044JobInfoJobState = "PREEMPTED"
	V0044JobInfoJobStateRECONFIGFAIL V0044JobInfoJobState = "RECONFIG_FAIL"
	V0044JobInfoJobStateREQUEUED     V0044JobInfoJobState = "REQUEUED"
	V0044JobInfoJobStateREQUEUEFED   V0044JobInfoJobState = "REQUEUE_FED"
	V0044JobInfoJobStateREQUEUEHOLD  V0044JobInfoJobState = "REQUEUE_HOLD"
	V0044JobInfoJobStateRESIZING     V0044JobInfoJobState = "RESIZING"
	V0044JobInfoJobStateRESVDELHOLD  V0044JobInfoJobState = "RESV_DEL_HOLD"
	V0044JobInfoJobStateREVOKED      V0044JobInfoJobState = "REVOKED"
	V0044JobInfoJobStateRUNNING      V0044JobInfoJobState = "RUNNING"
	V0044JobInfoJobStateSIGNALING    V0044JobInfoJobState = "SIGNALING"
	V0044JobInfoJobStateSPECIALEXIT  V0044JobInfoJobState = "SPECIAL_EXIT"
	V0044JobInfoJobStateSTAGEOUT     V0044JobInfoJobState = "STAGE_OUT"
	V0044JobInfoJobStateSTOPPED      V0044JobInfoJobState = "STOPPED"
	V0044JobInfoJobStateSUSPENDED    V0044JobInfoJobState = "SUSPENDED"
	V0044JobInfoJobStateTIMEOUT      V0044JobInfoJobState = "TIMEOUT"
)

// Defines values for V0044JobInfoMailType.
const (
	V0044JobInfoMailTypeARRAYTASKS        V0044JobInfoMailType = "ARRAY_TASKS"
	V0044JobInfoMailTypeBEGIN             V0044JobInfoMailType = "BEGIN"
	V0044JobInfoMailTypeEND               V0044JobInfoMailType = "END"
	V0044JobInfoMailTypeFAIL              V0044JobInfoMailType = "FAIL"
	V0044JobInfoMailTypeINVALIDDEPENDENCY V0044JobInfoMailType = "INVALID_DEPENDENCY"
	V0044JobInfoMailTypeREQUEUE           V0044JobInfoMailType = "REQUEUE"
	V0044JobInfoMailTypeSTAGEOUT          V0044JobInfoMailType = "STAGE_OUT"
	V0044JobInfoMailTypeTIME100           V0044JobInfoMailType = "TIME=100%"
	V0044JobInfoMailTypeTIME50            V0044JobInfoMailType = "TIME=50%"
	V0044JobInfoMailTypeTIME80            V0044JobInfoMailType = "TIME=80%"
	V0044JobInfoMailTypeTIME90            V0044JobInfoMailType = "TIME=90%"
)

// Defines values for V0044JobInfoProfile.
const (
	V0044JobInfoProfileENERGY  V0044JobInfoProfile = "ENERGY"
	V0044JobInfoProfileLUSTRE  V0044JobInfoProfile = "LUSTRE"
	V0044JobInfoProfileNETWORK V0044JobInfoProfile = "NETWORK"
	V0044JobInfoProfileNONE    V0044JobInfoProfile = "NONE"
	V0044JobInfoProfileNOTSET  V0044JobInfoProfile = "NOT_SET"
	V0044JobInfoProfileTASK    V0044JobInfoProfile = "TASK"
)

// Defines values for V0044JobInfoShared.
const (
	V0044JobInfoSharedMcs           V0044JobInfoShared = "mcs"
	V0044JobInfoSharedNone          V0044JobInfoShared = "none"
	V0044JobInfoSharedOversubscribe V0044JobInfoShared = "oversubscribe"
	V0044JobInfoSharedTopo          V0044JobInfoShared = "topo"
	V0044JobInfoSharedUser          V0044JobInfoShared = "user"
)

// Defines values for V0044JobResNodesSelectType.
const (
	V0044JobResNodesSelectTypeAVAILABLE V0044JobResNodesSelectType = "AVAILABLE"
	V0044JobResNodesSelectTypeONEROW    V0044JobResNodesSelectType = "ONE_ROW"
	V0044JobResNodesSelectTypeRESERVED  V0044JobResNodesSelectType = "RESERVED"
)

// Defines values for V0044JobResSelectType.
const (
	V0044JobResSelectTypeBOARD                V0044JobResSelectType = "BOARD"
	V0044JobResSelectTypeCORE                 V0044JobResSelectType = "CORE"
	V0044JobResSelectTypeCOREDEFAULTDISTBLOCK V0044JobResSelectType = "CORE_DEFAULT_DIST_BLOCK"
	V0044JobResSelectTypeCPU                  V0044JobResSelectType = "CPU"
	V0044JobResSelectTypeLINEAR               V0044JobResSelectType = "LINEAR"
	V0044JobResSelectTypeLLN                  V0044JobResSelectType = "LLN"
	V0044JobResSelectTypeMEMORY               V0044JobResSelectType = "MEMORY"
	V0044JobResSelectTypeONETASKPERCORE       V0044JobResSelectType = "ONE_TASK_PER_CORE"
	V0044JobResSelectTypePACKNODES            V0044JobResSelectType = "PACK_NODES"
	V0044JobResSelectTypeSOCKET               V0044JobResSelectType = "SOCKET"
)

// Defines values for V0044JobResCoreStatus.
const (
	V0044JobResCoreStatusALLOCATED   V0044JobResCoreStatus = "ALLOCATED"
	V0044JobResCoreStatusINUSE       V0044JobResCoreStatus = "IN_USE"
	V0044JobResCoreStatusINVALID     V0044JobResCoreStatus = "INVALID"
	V0044JobResCoreStatusUNALLOCATED V0044JobResCoreStatus = "UNALLOCATED"
)

// Defines values for V0044KillJobsMsgFlags.
const (
	V0044KillJobsMsgFlagsARRAYTASK         V0044KillJobsMsgFlags = "ARRAY_TASK"
	V0044KillJobsMsgFlagsBATCHJOB          V0044KillJobsMsgFlags = "BATCH_JOB"
	V0044KillJobsMsgFlagsCRONJOBS          V0044KillJobsMsgFlags = "CRON_JOBS"
	V0044KillJobsMsgFlagsFEDERATIONREQUEUE V0044KillJobsMsgFlags = "FEDERATION_REQUEUE"
	V0044KillJobsMsgFlagsFULLJOB           V0044KillJobsMsgFlags = "FULL_JOB"
	V0044KillJobsMsgFlagsFULLSTEPSONLY     V0044KillJobsMsgFlags = "FULL_STEPS_ONLY"
	V0044KillJobsMsgFlagsHURRY             V0044KillJobsMsgFlags = "HURRY"
	V0044KillJobsMsgFlagsNOSIBLINGJOBS     V0044KillJobsMsgFlags = "NO_SIBLING_JOBS"
	V0044KillJobsMsgFlagsOUTOFMEMORY       V0044KillJobsMsgFlags = "OUT_OF_MEMORY"
	V0044KillJobsMsgFlagsRESERVATIONJOB    V0044KillJobsMsgFlags = "RESERVATION_JOB"
	V0044KillJobsMsgFlagsVERBOSE           V0044KillJobsMsgFlags = "VERBOSE"
	V0044KillJobsMsgFlagsWARNINGSENT       V0044KillJobsMsgFlags = "WARNING_SENT"
)

// Defines values for V0044KillJobsMsgJobState.
const (
	V0044KillJobsMsgJobStateBOOTFAIL     V0044KillJobsMsgJobState = "BOOT_FAIL"
	V0044KillJobsMsgJobStateCANCELLED    V0044KillJobsMsgJobState = "CANCELLED"
	V0044KillJobsMsgJobStateCOMPLETED    V0044KillJobsMsgJobState = "COMPLETED"
	V0044KillJobsMsgJobStateCOMPLETING   V0044KillJobsMsgJobState = "COMPLETING"
	V0044KillJobsMsgJobStateCONFIGURING  V0044KillJobsMsgJobState = "CONFIGURING"
	V0044KillJobsMsgJobStateDEADLINE     V0044KillJobsMsgJobState = "DEADLINE"
	V0044KillJobsMsgJobStateEXPEDITING   V0044KillJobsMsgJobState = "EXPEDITING"
	V0044KillJobsMsgJobStateFAILED       V0044KillJobsMsgJobState = "FAILED"
	V0044KillJobsMsgJobStateLAUNCHFAILED V0044KillJobsMsgJobState = "LAUNCH_FAILED"
	V0044KillJobsMsgJobStateNODEFAIL     V0044KillJobsMsgJobState = "NODE_FAIL"
	V0044KillJobsMsgJobStateOUTOFMEMORY  V0044KillJobsMsgJobState = "OUT_OF_MEMORY"
	V0044KillJobsMsgJobStatePENDING      V0044KillJobsMsgJobState = "PENDING"
	V0044KillJobsMsgJobStatePOWERUPNODE  V0044KillJobsMsgJobState = "POWER_UP_NODE"
	V0044KillJobsMsgJobStatePREEMPTED    V0044KillJobsMsgJobState = "PREEMPTED"
	V0044KillJobsMsgJobStateRECONFIGFAIL V0044KillJobsMsgJobState = "RECONFIG_FAIL"
	V0044KillJobsMsgJobStateREQUEUED     V0044KillJobsMsgJobState = "REQUEUED"
	V0044KillJobsMsgJobStateREQUEUEFED   V0044KillJobsMsgJobState = "REQUEUE_FED"
	V0044KillJobsMsgJobStateREQUEUEHOLD  V0044KillJobsMsgJobState = "REQUEUE_HOLD"
	V0044KillJobsMsgJobStateRESIZING     V0044KillJobsMsgJobState = "RESIZING"
	V0044KillJobsMsgJobStateRESVDELHOLD  V0044KillJobsMsgJobState = "RESV_DEL_HOLD"
	V0044KillJobsMsgJobStateREVOKED      V0044KillJobsMsgJobState = "REVOKED"
	V0044KillJobsMsgJobStateRUNNING      V0044KillJobsMsgJobState = "RUNNING"
	V0044KillJobsMsgJobStateSIGNALING    V0044KillJobsMsgJobState = "SIGNALING"
	V0044KillJobsMsgJobStateSPECIALEXIT  V0044KillJobsMsgJobState = "SPECIAL_EXIT"
	V0044KillJobsMsgJobStateSTAGEOUT     V0044KillJobsMsgJobState = "STAGE_OUT"
	V0044KillJobsMsgJobStateSTOPPED      V0044KillJobsMsgJobState = "STOPPED"
	V0044KillJobsMsgJobStateSUSPENDED    V0044KillJobsMsgJobState = "SUSPENDED"
	V0044KillJobsMsgJobStateTIMEOUT      V0044KillJobsMsgJobState = "TIMEOUT"
)

// Defines values for V0044NodeCertFlags.
const (
	TOKENSET V0044NodeCertFlags = "TOKEN_SET"
)

// Defines values for V0044NodeNextStateAfterReboot.
const (
	V0044NodeNextStateAfterRebootALLOCATED       V0044NodeNextStateAfterReboot = "ALLOCATED"
	V0044NodeNextStateAfterRebootBLOCKED         V0044NodeNextStateAfterReboot = "BLOCKED"
	V0044NodeNextStateAfterRebootCLOUD           V0044NodeNextStateAfterReboot = "CLOUD"
	V0044NodeNextStateAfterRebootCOMPLETING      V0044NodeNextStateAfterReboot = "COMPLETING"
	V0044NodeNextStateAfterRebootDOWN            V0044NodeNextStateAfterReboot = "DOWN"
	V0044NodeNextStateAfterRebootDRAIN           V0044NodeNextStateAfterReboot = "DRAIN"
	V0044NodeNextStateAfterRebootDYNAMICFUTURE   V0044NodeNextStateAfterReboot = "DYNAMIC_FUTURE"
	V0044NodeNextStateAfterRebootDYNAMICNORM     V0044NodeNextStateAfterReboot = "DYNAMIC_NORM"
	V0044NodeNextStateAfterRebootERROR           V0044NodeNextStateAfterReboot = "ERROR"
	V0044NodeNextStateAfterRebootEXTERNAL        V0044NodeNextStateAfterReboot = "EXTERNAL"
	V0044NodeNextStateAfterRebootFAIL            V0044NodeNextStateAfterReboot = "FAIL"
	V0044NodeNextStateAfterRebootFUTURE          V0044NodeNextStateAfterReboot = "FUTURE"
	V0044NodeNextStateAfterRebootIDLE            V0044NodeNextStateAfterReboot = "IDLE"
	V0044NodeNextStateAfterRebootINVALID         V0044NodeNextStateAfterReboot = "INVALID"
	V0044NodeNextStateAfterRebootINVALIDREG      V0044NodeNextStateAfterReboot = "INVALID_REG"
	V0044NodeNextStateAfterRebootMAINTENANCE     V0044NodeNextStateAfterReboot = "MAINTENANCE"
	V0044NodeNextStateAfterRebootMIXED           V0044NodeNextStateAfterReboot = "MIXED"
	V0044NodeNextStateAfterRebootNOTRESPONDING   V0044NodeNextStateAfterReboot = "NOT_RESPONDING"
	V0044NodeNextStateAfterRebootPLANNED         V0044NodeNextStateAfterReboot = "PLANNED"
	V0044NodeNextStateAfterRebootPOWERDOWN       V0044NodeNextStateAfterReboot = "POWER_DOWN"
	V0044NodeNextStateAfterRebootPOWERDRAIN      V0044NodeNextStateAfterReboot = "POWER_DRAIN"
	V0044NodeNextStateAfterRebootPOWEREDDOWN     V0044NodeNextStateAfterReboot = "POWERED_DOWN"
	V0044NodeNextStateAfterRebootPOWERINGDOWN    V0044NodeNextStateAfterReboot = "POWERING_DOWN"
	V0044NodeNextStateAfterRebootPOWERINGUP      V0044NodeNextStateAfterReboot = "POWERING_UP"
	V0044NodeNextStateAfterRebootPOWERUP         V0044NodeNextStateAfterReboot = "POWER_UP"
	V0044NodeNextStateAfterRebootREBOOTCANCELED  V0044NodeNextStateAfterReboot = "REBOOT_CANCELED"
	V0044NodeNextStateAfterRebootREBOOTISSUED    V0044NodeNextStateAfterReboot = "REBOOT_ISSUED"
	V0044NodeNextStateAfterRebootREBOOTREQUESTED V0044NodeNextStateAfterReboot = "REBOOT_REQUESTED"
	V0044NodeNextStateAfterRebootRESERVED        V0044NodeNextStateAfterReboot = "RESERVED"
	V0044NodeNextStateAfterRebootRESUME          V0044NodeNextStateAfterReboot = "RESUME"
	V0044NodeNextStateAfterRebootUNDRAIN         V0044NodeNextStateAfterReboot = "UNDRAIN"
	V0044NodeNextStateAfterRebootUNKNOWN         V0044NodeNextStateAfterReboot = "UNKNOWN"
)

// Defines values for V0044NodeState.
const (
	V0044NodeStateALLOCATED       V0044NodeState = "ALLOCATED"
	V0044NodeStateBLOCKED         V0044NodeState = "BLOCKED"
	V0044NodeStateCLOUD           V0044NodeState = "CLOUD"
	V0044NodeStateCOMPLETING      V0044NodeState = "COMPLETING"
	V0044NodeStateDOWN            V0044NodeState = "DOWN"
	V0044NodeStateDRAIN           V0044NodeState = "DRAIN"
	V0044NodeStateDYNAMICFUTURE   V0044NodeState = "DYNAMIC_FUTURE"
	V0044NodeStateDYNAMICNORM     V0044NodeState = "DYNAMIC_NORM"
	V0044NodeStateERROR           V0044NodeState = "ERROR"
	V0044NodeStateEXTERNAL        V0044NodeState = "EXTERNAL"
	V0044NodeStateFAIL            V0044NodeState = "FAIL"
	V0044NodeStateFUTURE          V0044NodeState = "FUTURE"
	V0044NodeStateIDLE            V0044NodeState = "IDLE"
	V0044NodeStateINVALID         V0044NodeState = "INVALID"
	V0044NodeStateINVALIDREG      V0044NodeState = "INVALID_REG"
	V0044NodeStateMAINTENANCE     V0044NodeState = "MAINTENANCE"
	V0044NodeStateMIXED           V0044NodeState = "MIXED"
	V0044NodeStateNOTRESPONDING   V0044NodeState = "NOT_RESPONDING"
	V0044NodeStatePLANNED         V0044NodeState = "PLANNED"
	V0044NodeStatePOWERDOWN       V0044NodeState = "POWER_DOWN"
	V0044NodeStatePOWERDRAIN      V0044NodeState = "POWER_DRAIN"
	V0044NodeStatePOWEREDDOWN     V0044NodeState = "POWERED_DOWN"
	V0044NodeStatePOWERINGDOWN    V0044NodeState = "POWERING_DOWN"
	V0044NodeStatePOWERINGUP      V0044NodeState = "POWERING_UP"
	V0044NodeStatePOWERUP         V0044NodeState = "POWER_UP"
	V0044NodeStateREBOOTCANCELED  V0044NodeState = "REBOOT_CANCELED"
	V0044NodeStateREBOOTISSUED    V0044NodeState = "REBOOT_ISSUED"
	V0044NodeStateREBOOTREQUESTED V0044NodeState = "REBOOT_REQUESTED"
	V0044NodeStateRESERVED        V0044NodeState = "RESERVED"
	V0044NodeStateRESUME          V0044NodeState = "RESUME"
	V0044NodeStateUNDRAIN         V0044NodeState = "UNDRAIN"
	V0044NodeStateUNKNOWN         V0044NodeState = "UNKNOWN"
)

// Defines values for V0044PartitionInfoMaximumsOversubscribeFlags.
const (
	Force V0044PartitionInfoMaximumsOversubscribeFlags = "force"
)

// Defines values for V0044PartitionInfoPartitionState.
const (
	V0044PartitionInfoPartitionStateDOWN     V0044PartitionInfoPartitionState = "DOWN"
	V0044PartitionInfoPartitionStateDRAIN    V0044PartitionInfoPartitionState = "DRAIN"
	V0044PartitionInfoPartitionStateINACTIVE V0044PartitionInfoPartitionState = "INACTIVE"
	V0044PartitionInfoPartitionStateUNKNOWN  V0044PartitionInfoPartitionState = "UNKNOWN"
	V0044PartitionInfoPartitionStateUP       V0044PartitionInfoPartitionState = "UP"
)

// Defines values for V0044PartitionInfoSelectType.
const (
	V0044PartitionInfoSelectTypeBOARD                V0044PartitionInfoSelectType = "BOARD"
	V0044PartitionInfoSelectTypeCORE                 V0044PartitionInfoSelectType = "CORE"
	V0044PartitionInfoSelectTypeCOREDEFAULTDISTBLOCK V0044PartitionInfoSelectType = "CORE_DEFAULT_DIST_BLOCK"
	V0044PartitionInfoSelectTypeCPU                  V0044PartitionInfoSelectType = "CPU"
	V0044PartitionInfoSelectTypeLINEAR               V0044PartitionInfoSelectType = "LINEAR"
	V0044PartitionInfoSelectTypeLLN                  V0044PartitionInfoSelectType = "LLN"
	V0044PartitionInfoSelectTypeMEMORY               V0044PartitionInfoSelectType = "MEMORY"
	V0044PartitionInfoSelectTypeONETASKPERCORE       V0044PartitionInfoSelectType = "ONE_TASK_PER_CORE"
	V0044PartitionInfoSelectTypePACKNODES            V0044PartitionInfoSelectType = "PACK_NODES"
	V0044PartitionInfoSelectTypeSOCKET               V0044PartitionInfoSelectType = "SOCKET"
)

// Defines values for V0044ProcessExitCodeVerboseStatus.
const (
	V0044ProcessExitCodeVerboseStatusCOREDUMPED V0044ProcessExitCodeVerboseStatus = "CORE_DUMPED"
	V0044ProcessExitCodeVerboseStatusERROR      V0044ProcessExitCodeVerboseStatus = "ERROR"
	V0044ProcessExitCodeVerboseStatusINVALID    V0044ProcessExitCodeVerboseStatus = "INVALID"
	V0044ProcessExitCodeVerboseStatusPENDING    V0044ProcessExitCodeVerboseStatus = "PENDING"
	V0044ProcessExitCodeVerboseStatusSIGNALED   V0044ProcessExitCodeVerboseStatus = "SIGNALED"
	V0044ProcessExitCodeVerboseStatusSUCCESS    V0044ProcessExitCodeVerboseStatus = "SUCCESS"
)

// Defines values for V0044QosFlags.
const (
	V0044QosFlagsADD                   V0044QosFlags = "ADD"
	V0044QosFlagsDELETED               V0044QosFlags = "DELETED"
	V0044QosFlagsDENYLIMIT             V0044QosFlags = "DENY_LIMIT"
	V0044QosFlagsENFORCEUSAGETHRESHOLD V0044QosFlags = "ENFORCE_USAGE_THRESHOLD"
	V0044QosFlagsNODECAY               V0044QosFlags = "NO_DECAY"
	V0044QosFlagsNORESERVE             V0044QosFlags = "NO_RESERVE"
	V0044QosFlagsNOTSET                V0044QosFlags = "NOT_SET"
	V0044QosFlagsOVERRIDEPARTITIONQOS  V0044QosFlags = "OVERRIDE_PARTITION_QOS"
	V0044QosFlagsPARTITIONMAXIMUMNODE  V0044QosFlags = "PARTITION_MAXIMUM_NODE"
	V0044QosFlagsPARTITIONMINIMUMNODE  V0044QosFlags = "PARTITION_MINIMUM_NODE"
	V0044QosFlagsPARTITIONQOS          V0044QosFlags = "PARTITION_QOS"
	V0044QosFlagsPARTITIONTIMELIMIT    V0044QosFlags = "PARTITION_TIME_LIMIT"
	V0044QosFlagsRELATIVE              V0044QosFlags = "RELATIVE"
	V0044QosFlagsREMOVE                V0044QosFlags = "REMOVE"
	V0044QosFlagsREQUIREDRESERVATION   V0044QosFlags = "REQUIRED_RESERVATION"
	V0044QosFlagsUSAGEFACTORSAFE       V0044QosFlags = "USAGE_FACTOR_SAFE"
)

// Defines values for V0044QosPreemptMode.
const (
	V0044QosPreemptModeCANCEL   V0044QosPreemptMode = "CANCEL"
	V0044QosPreemptModeDISABLED V0044QosPreemptMode = "DISABLED"
	V0044QosPreemptModeGANG     V0044QosPreemptMode = "GANG"
	V0044QosPreemptModeREQUEUE  V0044QosPreemptMode = "REQUEUE"
	V0044QosPreemptModeSUSPEND  V0044QosPreemptMode = "SUSPEND"
)

// Defines values for V0044ReservationDescMsgFlags.
const (
	V0044ReservationDescMsgFlagsALLNODES           V0044ReservationDescMsgFlags = "ALL_NODES"
	V0044ReservationDescMsgFlagsANYNODES           V0044ReservationDescMsgFlags = "ANY_NODES"
	V0044ReservationDescMsgFlagsDAILY              V0044ReservationDescMsgFlags = "DAILY"
	V0044ReservationDescMsgFlagsDURATIONMINUS      V0044ReservationDescMsgFlags = "DURATION_MINUS"
	V0044ReservationDescMsgFlagsDURATIONPLUS       V0044ReservationDescMsgFlags = "DURATION_PLUS"
	V0044ReservationDescMsgFlagsFLEX               V0044ReservationDescMsgFlags = "FLEX"
	V0044ReservationDescMsgFlagsFORCESTART         V0044ReservationDescMsgFlags = "FORCE_START"
	V0044ReservationDescMsgFlagsHOURLY             V0044ReservationDescMsgFlags = "HOURLY"
	V0044ReservationDescMsgFlagsIGNOREJOBS         V0044ReservationDescMsgFlags = "IGNORE_JOBS"
	V0044ReservationDescMsgFlagsMAGNETIC           V0044ReservationDescMsgFlags = "MAGNETIC"
	V0044ReservationDescMsgFlagsMAINT              V0044ReservationDescMsgFlags = "MAINT"
	V0044ReservationDescMsgFlagsNOANYNODES         V0044ReservationDescMsgFlags = "NO_ANY_NODES"
	V0044ReservationDescMsgFlagsNODAILY            V0044ReservationDescMsgFlags = "NO_DAILY"
	V0044ReservationDescMsgFlagsNOFLEX             V0044ReservationDescMsgFlags = "NO_FLEX"
	V0044ReservationDescMsgFlagsNOHOLDJOBSAFTEREND V0044ReservationDescMsgFlags = "NO_HOLD_JOBS_AFTER_END"
	V0044ReservationDescMsgFlagsNOHOURLY           V0044ReservationDescMsgFlags = "NO_HOURLY"
	V0044ReservationDescMsgFlagsNOIGNOREJOBS       V0044ReservationDescMsgFlags = "NO_IGNORE_JOBS"
	V0044ReservationDescMsgFlagsNOMAGNETIC         V0044ReservationDescMsgFlags = "NO_MAGNETIC"
	V0044ReservationDescMsgFlagsNOMAINT            V0044ReservationDescMsgFlags = "NO_MAINT"
	V0044ReservationDescMsgFlagsNOPARTNODES        V0044ReservationDescMsgFlags = "NO_PART_NODES"
	V0044ReservationDescMsgFlagsNOPURGECOMP        V0044ReservationDescMsgFlags = "NO_PURGE_COMP"
	V0044ReservationDescMsgFlagsNOSTATIC           V0044ReservationDescMsgFlags = "NO_STATIC"
	V0044ReservationDescMsgFlagsNOUSERDELETE       V0044ReservationDescMsgFlags = "NO_USER_DELETE"
	V0044ReservationDescMsgFlagsNOWEEKDAY          V0044ReservationDescMsgFlags = "NO_WEEKDAY"
	V0044ReservationDescMsgFlagsNOWEEKEND          V0044ReservationDescMsgFlags = "NO_WEEKEND"
	V0044ReservationDescMsgFlagsNOWEEKLY           V0044ReservationDescMsgFlags = "NO_WEEKLY"
	V0044ReservationDescMsgFlagsOVERLAP            V0044ReservationDescMsgFlags = "OVERLAP"
	V0044ReservationDescMsgFlagsPARTNODES          V0044ReservationDescMsgFlags = "PART_NODES"
	V0044ReservationDescMsgFlagsPURGECOMP          V0044ReservationDescMsgFlags = "PURGE_COMP"
	V0044ReservationDescMsgFlagsREOCCURRING        V0044ReservationDescMsgFlags = "REOCCURRING"
	V0044ReservationDescMsgFlagsREPLACE            V0044ReservationDescMsgFlags = "REPLACE"
	V0044ReservationDescMsgFlagsREPLACEDOWN        V0044ReservationDescMsgFlags = "REPLACE_DOWN"
	V0044ReservationDescMsgFlagsSKIP               V0044ReservationDescMsgFlags = "SKIP"
	V0044ReservationDescMsgFlagsSPECNODES          V0044ReservationDescMsgFlags = "SPEC_NODES"
	V0044ReservationDescMsgFlagsSTATIC             V0044ReservationDescMsgFlags = "STATIC"
	V0044ReservationDescMsgFlagsTIMEFLOAT          V0044ReservationDescMsgFlags = "TIME_FLOAT"
	V0044ReservationDescMsgFlagsTRESPERNODE        V0044ReservationDescMsgFlags = "TRES_PER_NODE"
	V0044ReservationDescMsgFlagsUSERDELETE         V0044ReservationDescMsgFlags = "USER_DELETE"
	V0044ReservationDescMsgFlagsWEEKDAY            V0044ReservationDescMsgFlags = "WEEKDAY"
	V0044ReservationDescMsgFlagsWEEKEND            V0044ReservationDescMsgFlags = "WEEKEND"
	V0044ReservationDescMsgFlagsWEEKLY             V0044ReservationDescMsgFlags = "WEEKLY"
)

// Defines values for V0044ReservationInfoFlags.
const (
	V0044ReservationInfoFlagsALLNODES           V0044ReservationInfoFlags = "ALL_NODES"
	V0044ReservationInfoFlagsANYNODES           V0044ReservationInfoFlags = "ANY_NODES"
	V0044ReservationInfoFlagsDAILY              V0044ReservationInfoFlags = "DAILY"
	V0044ReservationInfoFlagsDURATIONMINUS      V0044ReservationInfoFlags = "DURATION_MINUS"
	V0044ReservationInfoFlagsDURATIONPLUS       V0044ReservationInfoFlags = "DURATION_PLUS"
	V0044ReservationInfoFlagsFLEX               V0044ReservationInfoFlags = "FLEX"
	V0044ReservationInfoFlagsFORCESTART         V0044ReservationInfoFlags = "FORCE_START"
	V0044ReservationInfoFlagsHOURLY             V0044ReservationInfoFlags = "HOURLY"
	V0044ReservationInfoFlagsIGNOREJOBS         V0044ReservationInfoFlags = "IGNORE_JOBS"
	V0044ReservationInfoFlagsMAGNETIC           V0044ReservationInfoFlags = "MAGNETIC"
	V0044ReservationInfoFlagsMAINT              V0044ReservationInfoFlags = "MAINT"
	V0044ReservationInfoFlagsNOANYNODES         V0044ReservationInfoFlags = "NO_ANY_NODES"
	V0044ReservationInfoFlagsNODAILY            V0044ReservationInfoFlags = "NO_DAILY"
	V0044ReservationInfoFlagsNOFLEX             V0044ReservationInfoFlags = "NO_FLEX"
	V0044ReservationInfoFlagsNOHOLDJOBSAFTEREND V0044ReservationInfoFlags = "NO_HOLD_JOBS_AFTER_END"
	V0044ReservationInfoFlagsNOHOURLY           V0044ReservationInfoFlags = "NO_HOURLY"
	V0044ReservationInfoFlagsNOIGNOREJOBS       V0044ReservationInfoFlags = "NO_IGNORE_JOBS"
	V0044ReservationInfoFlagsNOMAGNETIC         V0044ReservationInfoFlags = "NO_MAGNETIC"
	V0044ReservationInfoFlagsNOMAINT            V0044ReservationInfoFlags = "NO_MAINT"
	V0044ReservationInfoFlagsNOPARTNODES        V0044ReservationInfoFlags = "NO_PART_NODES"
	V0044ReservationInfoFlagsNOPURGECOMP        V0044ReservationInfoFlags = "NO_PURGE_COMP"
	V0044ReservationInfoFlagsNOSTATIC           V0044ReservationInfoFlags = "NO_STATIC"
	V0044ReservationInfoFlagsNOUSERDELETE       V0044ReservationInfoFlags = "NO_USER_DELETE"
	V0044ReservationInfoFlagsNOWEEKDAY          V0044ReservationInfoFlags = "NO_WEEKDAY"
	V0044ReservationInfoFlagsNOWEEKEND          V0044ReservationInfoFlags = "NO_WEEKEND"
	V0044ReservationInfoFlagsNOWEEKLY           V0044ReservationInfoFlags = "NO_WEEKLY"
	V0044ReservationInfoFlagsOVERLAP            V0044ReservationInfoFlags = "OVERLAP"
	V0044ReservationInfoFlagsPARTNODES          V0044ReservationInfoFlags = "PART_NODES"
	V0044ReservationInfoFlagsPURGECOMP          V0044ReservationInfoFlags = "PURGE_COMP"
	V0044ReservationInfoFlagsREOCCURRING        V0044ReservationInfoFlags = "REOCCURRING"
	V0044ReservationInfoFlagsREPLACE            V0044ReservationInfoFlags = "REPLACE"
	V0044ReservationInfoFlagsREPLACEDOWN        V0044ReservationInfoFlags = "REPLACE_DOWN"
	V0044ReservationInfoFlagsSKIP               V0044ReservationInfoFlags = "SKIP"
	V0044ReservationInfoFlagsSPECNODES          V0044ReservationInfoFlags = "SPEC_NODES"
	V0044ReservationInfoFlagsSTATIC             V0044ReservationInfoFlags = "STATIC"
	V0044ReservationInfoFlagsTIMEFLOAT          V0044ReservationInfoFlags = "TIME_FLOAT"
	V0044ReservationInfoFlagsTRESPERNODE        V0044ReservationInfoFlags = "TRES_PER_NODE"
	V0044ReservationInfoFlagsUSERDELETE         V0044ReservationInfoFlags = "USER_DELETE"
	V0044ReservationInfoFlagsWEEKDAY            V0044ReservationInfoFlags = "WEEKDAY"
	V0044ReservationInfoFlagsWEEKEND            V0044ReservationInfoFlags = "WEEKEND"
	V0044ReservationInfoFlagsWEEKLY             V0044ReservationInfoFlags = "WEEKLY"
)

// Defines values for V0044StepState.
const (
	V0044StepStateBOOTFAIL     V0044StepState = "BOOT_FAIL"
	V0044StepStateCANCELLED    V0044StepState = "CANCELLED"
	V0044StepStateCOMPLETED    V0044StepState = "COMPLETED"
	V0044StepStateCOMPLETING   V0044StepState = "COMPLETING"
	V0044StepStateCONFIGURING  V0044StepState = "CONFIGURING"
	V0044StepStateDEADLINE     V0044StepState = "DEADLINE"
	V0044StepStateEXPEDITING   V0044StepState = "EXPEDITING"
	V0044StepStateFAILED       V0044StepState = "FAILED"
	V0044StepStateLAUNCHFAILED V0044StepState = "LAUNCH_FAILED"
	V0044StepStateNODEFAIL     V0044StepState = "NODE_FAIL"
	V0044StepStateOUTOFMEMORY  V0044StepState = "OUT_OF_MEMORY"
	V0044StepStatePENDING      V0044StepState = "PENDING"
	V0044StepStatePOWERUPNODE  V0044StepState = "POWER_UP_NODE"
	V0044StepStatePREEMPTED    V0044StepState = "PREEMPTED"
	V0044StepStateRECONFIGFAIL V0044StepState = "RECONFIG_FAIL"
	V0044StepStateREQUEUED     V0044StepState = "REQUEUED"
	V0044StepStateREQUEUEFED   V0044StepState = "REQUEUE_FED"
	V0044StepStateREQUEUEHOLD  V0044StepState = "REQUEUE_HOLD"
	V0044StepStateRESIZING     V0044StepState = "RESIZING"
	V0044StepStateRESVDELHOLD  V0044StepState = "RESV_DEL_HOLD"
	V0044StepStateREVOKED      V0044StepState = "REVOKED"
	V0044StepStateRUNNING      V0044StepState = "RUNNING"
	V0044StepStateSIGNALING    V0044StepState = "SIGNALING"
	V0044StepStateSPECIALEXIT  V0044StepState = "SPECIAL_EXIT"
	V0044StepStateSTAGEOUT     V0044StepState = "STAGE_OUT"
	V0044StepStateSTOPPED      V0044StepState = "STOPPED"
	V0044StepStateSUSPENDED    V0044StepState = "SUSPENDED"
	V0044StepStateTIMEOUT      V0044StepState = "TIMEOUT"
)

// Defines values for V0044UpdateNodeMsgState.
const (
	V0044UpdateNodeMsgStateALLOCATED       V0044UpdateNodeMsgState = "ALLOCATED"
	V0044UpdateNodeMsgStateBLOCKED         V0044UpdateNodeMsgState = "BLOCKED"
	V0044UpdateNodeMsgStateCLOUD           V0044UpdateNodeMsgState = "CLOUD"
	V0044UpdateNodeMsgStateCOMPLETING      V0044UpdateNodeMsgState = "COMPLETING"
	V0044UpdateNodeMsgStateDOWN            V0044UpdateNodeMsgState = "DOWN"
	V0044UpdateNodeMsgStateDRAIN           V0044UpdateNodeMsgState = "DRAIN"
	V0044UpdateNodeMsgStateDYNAMICFUTURE   V0044UpdateNodeMsgState = "DYNAMIC_FUTURE"
	V0044UpdateNodeMsgStateDYNAMICNORM     V0044UpdateNodeMsgState = "DYNAMIC_NORM"
	V0044UpdateNodeMsgStateERROR           V0044UpdateNodeMsgState = "ERROR"
	V0044UpdateNodeMsgStateEXTERNAL        V0044UpdateNodeMsgState = "EXTERNAL"
	V0044UpdateNodeMsgStateFAIL            V0044UpdateNodeMsgState = "FAIL"
	V0044UpdateNodeMsgStateFUTURE          V0044UpdateNodeMsgState = "FUTURE"
	V0044UpdateNodeMsgStateIDLE            V0044UpdateNodeMsgState = "IDLE"
	V0044UpdateNodeMsgStateINVALID         V0044UpdateNodeMsgState = "INVALID"
	V0044UpdateNodeMsgStateINVALIDREG      V0044UpdateNodeMsgState = "INVALID_REG"
	V0044UpdateNodeMsgStateMAINTENANCE     V0044UpdateNodeMsgState = "MAINTENANCE"
	V0044UpdateNodeMsgStateMIXED           V0044UpdateNodeMsgState = "MIXED"
	V0044UpdateNodeMsgStateNOTRESPONDING   V0044UpdateNodeMsgState = "NOT_RESPONDING"
	V0044UpdateNodeMsgStatePLANNED         V0044UpdateNodeMsgState = "PLANNED"
	V0044UpdateNodeMsgStatePOWERDOWN       V0044UpdateNodeMsgState = "POWER_DOWN"
	V0044UpdateNodeMsgStatePOWERDRAIN      V0044UpdateNodeMsgState = "POWER_DRAIN"
	V0044UpdateNodeMsgStatePOWEREDDOWN     V0044UpdateNodeMsgState = "POWERED_DOWN"
	V0044UpdateNodeMsgStatePOWERINGDOWN    V0044UpdateNodeMsgState = "POWERING_DOWN"
	V0044UpdateNodeMsgStatePOWERINGUP      V0044UpdateNodeMsgState = "POWERING_UP"
	V0044UpdateNodeMsgStatePOWERUP         V0044UpdateNodeMsgState = "POWER_UP"
	V0044UpdateNodeMsgStateREBOOTCANCELED  V0044UpdateNodeMsgState = "REBOOT_CANCELED"
	V0044UpdateNodeMsgStateREBOOTISSUED    V0044UpdateNodeMsgState = "REBOOT_ISSUED"
	V0044UpdateNodeMsgStateREBOOTREQUESTED V0044UpdateNodeMsgState = "REBOOT_REQUESTED"
	V0044UpdateNodeMsgStateRESERVED        V0044UpdateNodeMsgState = "RESERVED"
	V0044UpdateNodeMsgStateRESUME          V0044UpdateNodeMsgState = "RESUME"
	V0044UpdateNodeMsgStateUNDRAIN         V0044UpdateNodeMsgState = "UNDRAIN"
	V0044UpdateNodeMsgStateUNKNOWN         V0044UpdateNodeMsgState = "UNKNOWN"
)

// Defines values for V0044UserAdministratorLevel.
const (
	V0044UserAdministratorLevelAdministrator V0044UserAdministratorLevel = "Administrator"
	V0044UserAdministratorLevelNone          V0044UserAdministratorLevel = "None"
	V0044UserAdministratorLevelNotSet        V0044UserAdministratorLevel = "Not Set"
	V0044UserAdministratorLevelOperator      V0044UserAdministratorLevel = "Operator"
)

// Defines values for V0044UserFlags.
const (
	V0044UserFlagsDELETED V0044UserFlags = "DELETED"
	V0044UserFlagsNONE    V0044UserFlags = "NONE"
)

// Defines values for V0044UserShortAdminlevel.
const (
	V0044UserShortAdminlevelAdministrator V0044UserShortAdminlevel = "Administrator"
	V0044UserShortAdminlevelNone          V0044UserShortAdminlevel = "None"
	V0044UserShortAdminlevelNotSet        V0044UserShortAdminlevel = "Not Set"
	V0044UserShortAdminlevelOperator      V0044UserShortAdminlevel = "Operator"
)

// Defines values for V0044WckeyFlags.
const (
	V0044WckeyFlagsDELETED V0044WckeyFlags = "DELETED"
)

// Defines values for V0044WckeyTagStructFlags.
const (
	ASSIGNEDDEFAULT V0044WckeyTagStructFlags = "ASSIGNED_DEFAULT"
)

// Defines values for SlurmV0044DeleteJobParamsFlags.
const (
	SlurmV0044DeleteJobParamsFlagsARRAYTASK         SlurmV0044DeleteJobParamsFlags = "ARRAY_TASK"
	SlurmV0044DeleteJobParamsFlagsBATCHJOB          SlurmV0044DeleteJobParamsFlags = "BATCH_JOB"
	SlurmV0044DeleteJobParamsFlagsCRONJOBS          SlurmV0044DeleteJobParamsFlags = "CRON_JOBS"
	SlurmV0044DeleteJobParamsFlagsFEDERATIONREQUEUE SlurmV0044DeleteJobParamsFlags = "FEDERATION_REQUEUE"
	SlurmV0044DeleteJobParamsFlagsFULLJOB           SlurmV0044DeleteJobParamsFlags = "FULL_JOB"
	SlurmV0044DeleteJobParamsFlagsFULLSTEPSONLY     SlurmV0044DeleteJobParamsFlags = "FULL_STEPS_ONLY"
	SlurmV0044DeleteJobParamsFlagsHURRY             SlurmV0044DeleteJobParamsFlags = "HURRY"
	SlurmV0044DeleteJobParamsFlagsNOSIBLINGJOBS     SlurmV0044DeleteJobParamsFlags = "NO_SIBLING_JOBS"
	SlurmV0044DeleteJobParamsFlagsOUTOFMEMORY       SlurmV0044DeleteJobParamsFlags = "OUT_OF_MEMORY"
	SlurmV0044DeleteJobParamsFlagsRESERVATIONJOB    SlurmV0044DeleteJobParamsFlags = "RESERVATION_JOB"
	SlurmV0044DeleteJobParamsFlagsVERBOSE           SlurmV0044DeleteJobParamsFlags = "VERBOSE"
	SlurmV0044DeleteJobParamsFlagsWARNINGSENT       SlurmV0044DeleteJobParamsFlags = "WARNING_SENT"
)

// Defines values for SlurmV0044GetJobParamsFlags.
const (
	SlurmV0044GetJobParamsFlagsALL        SlurmV0044GetJobParamsFlags = "ALL"
	SlurmV0044GetJobParamsFlagsDETAIL     SlurmV0044GetJobParamsFlags = "DETAIL"
	SlurmV0044GetJobParamsFlagsFEDERATION SlurmV0044GetJobParamsFlags = "FEDERATION"
	SlurmV0044GetJobParamsFlagsFUTURE     SlurmV0044GetJobParamsFlags = "FUTURE"
	SlurmV0044GetJobParamsFlagsLOCAL      SlurmV0044GetJobParamsFlags = "LOCAL"
	SlurmV0044GetJobParamsFlagsMIXED      SlurmV0044GetJobParamsFlags = "MIXED"
	SlurmV0044GetJobParamsFlagsSIBLING    SlurmV0044GetJobParamsFlags = "SIBLING"
)

// Defines values for SlurmV0044GetJobsParamsFlags.
const (
	SlurmV0044GetJobsParamsFlagsALL        SlurmV0044GetJobsParamsFlags = "ALL"
	SlurmV0044GetJobsParamsFlagsDETAIL     SlurmV0044GetJobsParamsFlags = "DETAIL"
	SlurmV0044GetJobsParamsFlagsFEDERATION SlurmV0044GetJobsParamsFlags = "FEDERATION"
	SlurmV0044GetJobsParamsFlagsFUTURE     SlurmV0044GetJobsParamsFlags = "FUTURE"
	SlurmV0044GetJobsParamsFlagsLOCAL      SlurmV0044GetJobsParamsFlags = "LOCAL"
	SlurmV0044GetJobsParamsFlagsMIXED      SlurmV0044GetJobsParamsFlags = "MIXED"
	SlurmV0044GetJobsParamsFlagsSIBLING    SlurmV0044GetJobsParamsFlags = "SIBLING"
)

// Defines values for SlurmV0044GetNodeParamsFlags.
const (
	SlurmV0044GetNodeParamsFlagsALL        SlurmV0044GetNodeParamsFlags = "ALL"
	SlurmV0044GetNodeParamsFlagsDETAIL     SlurmV0044GetNodeParamsFlags = "DETAIL"
	SlurmV0044GetNodeParamsFlagsFEDERATION SlurmV0044GetNodeParamsFlags = "FEDERATION"
	SlurmV0044GetNodeParamsFlagsFUTURE     SlurmV0044GetNodeParamsFlags = "FUTURE"
	SlurmV0044GetNodeParamsFlagsLOCAL      SlurmV0044GetNodeParamsFlags = "LOCAL"
	SlurmV0044GetNodeParamsFlagsMIXED      SlurmV0044GetNodeParamsFlags = "MIXED"
	SlurmV0044GetNodeParamsFlagsSIBLING    SlurmV0044GetNodeParamsFlags = "SIBLING"
)

// Defines values for SlurmV0044GetNodesParamsFlags.
const (
	SlurmV0044GetNodesParamsFlagsALL        SlurmV0044GetNodesParamsFlags = "ALL"
	SlurmV0044GetNodesParamsFlagsDETAIL     SlurmV0044GetNodesParamsFlags = "DETAIL"
	SlurmV0044GetNodesParamsFlagsFEDERATION SlurmV0044GetNodesParamsFlags = "FEDERATION"
	SlurmV0044GetNodesParamsFlagsFUTURE     SlurmV0044GetNodesParamsFlags = "FUTURE"
	SlurmV0044GetNodesParamsFlagsLOCAL      SlurmV0044GetNodesParamsFlags = "LOCAL"
	SlurmV0044GetNodesParamsFlagsMIXED      SlurmV0044GetNodesParamsFlags = "MIXED"
	SlurmV0044GetNodesParamsFlagsSIBLING    SlurmV0044GetNodesParamsFlags = "SIBLING"
)

// Defines values for SlurmV0044GetPartitionParamsFlags.
const (
	SlurmV0044GetPartitionParamsFlagsALL        SlurmV0044GetPartitionParamsFlags = "ALL"
	SlurmV0044GetPartitionParamsFlagsDETAIL     SlurmV0044GetPartitionParamsFlags = "DETAIL"
	SlurmV0044GetPartitionParamsFlagsFEDERATION SlurmV0044GetPartitionParamsFlags = "FEDERATION"
	SlurmV0044GetPartitionParamsFlagsFUTURE     SlurmV0044GetPartitionParamsFlags = "FUTURE"
	SlurmV0044GetPartitionParamsFlagsLOCAL      SlurmV0044GetPartitionParamsFlags = "LOCAL"
	SlurmV0044GetPartitionParamsFlagsMIXED      SlurmV0044GetPartitionParamsFlags = "MIXED"
	SlurmV0044GetPartitionParamsFlagsSIBLING    SlurmV0044GetPartitionParamsFlags = "SIBLING"
)

// Defines values for SlurmV0044GetPartitionsParamsFlags.
const (
	SlurmV0044GetPartitionsParamsFlagsALL        SlurmV0044GetPartitionsParamsFlags = "ALL"
	SlurmV0044GetPartitionsParamsFlagsDETAIL     SlurmV0044GetPartitionsParamsFlags = "DETAIL"
	SlurmV0044GetPartitionsParamsFlagsFEDERATION SlurmV0044GetPartitionsParamsFlags = "FEDERATION"
	SlurmV0044GetPartitionsParamsFlagsFUTURE     SlurmV0044GetPartitionsParamsFlags = "FUTURE"
	SlurmV0044GetPartitionsParamsFlagsLOCAL      SlurmV0044GetPartitionsParamsFlags = "LOCAL"
	SlurmV0044GetPartitionsParamsFlagsMIXED      SlurmV0044GetPartitionsParamsFlags = "MIXED"
	SlurmV0044GetPartitionsParamsFlagsSIBLING    SlurmV0044GetPartitionsParamsFlags = "SIBLING"
)

// Defines values for SlurmdbV0044DeleteClusterParamsClassification.
const (
	SlurmdbV0044DeleteClusterParamsClassificationCAPABILITY   SlurmdbV0044DeleteClusterParamsClassification = "CAPABILITY"
	SlurmdbV0044DeleteClusterParamsClassificationCAPACITY     SlurmdbV0044DeleteClusterParamsClassification = "CAPACITY"
	SlurmdbV0044DeleteClusterParamsClassificationCAPAPACITY   SlurmdbV0044DeleteClusterParamsClassification = "CAPAPACITY"
	SlurmdbV0044DeleteClusterParamsClassificationUNCLASSIFIED SlurmdbV0044DeleteClusterParamsClassification = "UNCLASSIFIED"
)

// Defines values for SlurmdbV0044DeleteClusterParamsFlags.
const (
	SlurmdbV0044DeleteClusterParamsFlagsDELETED        SlurmdbV0044DeleteClusterParamsFlags = "DELETED"
	SlurmdbV0044DeleteClusterParamsFlagsEXTERNAL       SlurmdbV0044DeleteClusterParamsFlags = "EXTERNAL"
	SlurmdbV0044DeleteClusterParamsFlagsFEDERATION     SlurmdbV0044DeleteClusterParamsFlags = "FEDERATION"
	SlurmdbV0044DeleteClusterParamsFlagsMULTIPLESLURMD SlurmdbV0044DeleteClusterParamsFlags = "MULTIPLE_SLURMD"
	SlurmdbV0044DeleteClusterParamsFlagsREGISTERING    SlurmdbV0044DeleteClusterParamsFlags = "REGISTERING"
)

// Defines values for SlurmdbV0044GetClusterParamsClassification.
const (
	SlurmdbV0044GetClusterParamsClassificationCAPABILITY   SlurmdbV0044GetClusterParamsClassification = "CAPABILITY"
	SlurmdbV0044GetClusterParamsClassificationCAPACITY     SlurmdbV0044GetClusterParamsClassification = "CAPACITY"
	SlurmdbV0044GetClusterParamsClassificationCAPAPACITY   SlurmdbV0044GetClusterParamsClassification = "CAPAPACITY"
	SlurmdbV0044GetClusterParamsClassificationUNCLASSIFIED SlurmdbV0044GetClusterParamsClassification = "UNCLASSIFIED"
)

// Defines values for SlurmdbV0044GetClusterParamsFlags.
const (
	SlurmdbV0044GetClusterParamsFlagsDELETED        SlurmdbV0044GetClusterParamsFlags = "DELETED"
	SlurmdbV0044GetClusterParamsFlagsEXTERNAL       SlurmdbV0044GetClusterParamsFlags = "EXTERNAL"
	SlurmdbV0044GetClusterParamsFlagsFEDERATION     SlurmdbV0044GetClusterParamsFlags = "FEDERATION"
	SlurmdbV0044GetClusterParamsFlagsMULTIPLESLURMD SlurmdbV0044GetClusterParamsFlags = "MULTIPLE_SLURMD"
	SlurmdbV0044GetClusterParamsFlagsREGISTERING    SlurmdbV0044GetClusterParamsFlags = "REGISTERING"
)

// Defines values for SlurmdbV0044GetQosParamsPreemptMode.
const (
	SlurmdbV0044GetQosParamsPreemptModeCANCEL   SlurmdbV0044GetQosParamsPreemptMode = "CANCEL"
	SlurmdbV0044GetQosParamsPreemptModeDISABLED SlurmdbV0044GetQosParamsPreemptMode = "DISABLED"
	SlurmdbV0044GetQosParamsPreemptModeGANG     SlurmdbV0044GetQosParamsPreemptMode = "GANG"
	SlurmdbV0044GetQosParamsPreemptModeREQUEUE  SlurmdbV0044GetQosParamsPreemptMode = "REQUEUE"
	SlurmdbV0044GetQosParamsPreemptModeSUSPEND  SlurmdbV0044GetQosParamsPreemptMode = "SUSPEND"
)

// Defines values for SlurmdbV0044PostQosParamsPreemptMode.
const (
	CANCEL   SlurmdbV0044PostQosParamsPreemptMode = "CANCEL"
	DISABLED SlurmdbV0044PostQosParamsPreemptMode = "DISABLED"
	GANG     SlurmdbV0044PostQosParamsPreemptMode = "GANG"
	REQUEUE  SlurmdbV0044PostQosParamsPreemptMode = "REQUEUE"
	SUSPEND  SlurmdbV0044PostQosParamsPreemptMode = "SUSPEND"
)

// Defines values for SlurmdbV0044GetUsersParamsAdminLevel.
const (
	Administrator SlurmdbV0044GetUsersParamsAdminLevel = "Administrator"
	None          SlurmdbV0044GetUsersParamsAdminLevel = "None"
	NotSet        SlurmdbV0044GetUsersParamsAdminLevel = "Not Set"
	Operator      SlurmdbV0044GetUsersParamsAdminLevel = "Operator"
)

// Defines values for SlurmdbV0044PostUsersAssociationParamsFlags.
const (
	SlurmdbV0044PostUsersAssociationParamsFlagsALL        SlurmdbV0044PostUsersAssociationParamsFlags = "ALL"
	SlurmdbV0044PostUsersAssociationParamsFlagsDETAIL     SlurmdbV0044PostUsersAssociationParamsFlags = "DETAIL"
	SlurmdbV0044PostUsersAssociationParamsFlagsFEDERATION SlurmdbV0044PostUsersAssociationParamsFlags = "FEDERATION"
	SlurmdbV0044PostUsersAssociationParamsFlagsFUTURE     SlurmdbV0044PostUsersAssociationParamsFlags = "FUTURE"
	SlurmdbV0044PostUsersAssociationParamsFlagsLOCAL      SlurmdbV0044PostUsersAssociationParamsFlags = "LOCAL"
	SlurmdbV0044PostUsersAssociationParamsFlagsMIXED      SlurmdbV0044PostUsersAssociationParamsFlags = "MIXED"
	SlurmdbV0044PostUsersAssociationParamsFlagsSIBLING    SlurmdbV0044PostUsersAssociationParamsFlags = "SIBLING"
)

// V0044Account defines model for v0.0.44_account.
type V0044Account struct {
	Associations *V0044AssocShortList `json:"associations,omitempty"`
	Coordinators *V0044CoordList      `json:"coordinators,omitempty"`

	// Description Arbitrary string describing the account
	Description string `json:"description"`

	// Flags Flags associated with this account
	Flags *[]V0044AccountFlags `json:"flags,omitempty"`

	// Name Account name
	Name string `json:"name"`

	// Organization Organization to which the account belongs
	Organization string `json:"organization"`
}

// V0044AccountFlags defines model for V0044Account.Flags.
type V0044AccountFlags string

// V0044AccountList defines model for v0.0.44_account_list.
type V0044AccountList = []V0044Account

// V0044AccountShort defines model for v0.0.44_account_short.
type V0044AccountShort struct {
	// Description Arbitrary string describing the account
	Description *string `json:"description,omitempty"`

	// Organization Organization to which the account belongs
	Organization *string `json:"organization,omitempty"`
}

// V0044Accounting defines model for v0.0.44_accounting.
type V0044Accounting struct {
	TRES      *V0044Tres `json:"TRES,omitempty"`
	Allocated *struct {
		// Seconds Number of seconds allocated
		Seconds *int64 `json:"seconds,omitempty"`
	} `json:"allocated,omitempty"`

	// Id Association ID or Workload characterization key ID
	Id *int32 `json:"id,omitempty"`

	// IdAlt Alternate ID (not currently used)
	IdAlt *int32 `json:"id_alt,omitempty"`

	// Start When the record was started (UNIX timestamp) (UNIX timestamp or time string recognized by Slurm (e.g., '[MM/DD[/YY]-]HH:MM[:SS]'))
	Start *int64 `json:"start,omitempty"`
}

// V0044AccountingList defines model for v0.0.44_accounting_list.
type V0044AccountingList = []V0044Accounting

// V0044AccountsAddCond defines model for v0.0.44_accounts_add_cond.
type V0044AccountsAddCond struct {
	Accounts    V0044StringList   `json:"accounts"`
	Association *V0044AssocRecSet `json:"association,omitempty"`
	Clusters    *V0044StringList  `json:"clusters,omitempty"`
}

// V0044AcctGatherEnergy defines model for v0.0.44_acct_gather_energy.
type V0044AcctGatherEnergy struct {
	// AverageWatts Average power consumption, in watts
	AverageWatts *int32 `json:"average_watts,omitempty"`

	// BaseConsumedEnergy The energy consumed between when the node was powered on and the last time it was registered by slurmd, in joules
	BaseConsumedEnergy *int64 `json:"base_consumed_energy,omitempty"`

	// ConsumedEnergy The energy consumed between the last time the node was registered by the slurmd daemon and the last node energy accounting sample, in joules
	ConsumedEnergy *int64                  `json:"consumed_energy,omitempty"`
	CurrentWatts   *V0044Uint32NoValStruct `json:"current_watts,omitempty"`

	// LastCollected Time when energy data was last retrieved (UNIX timestamp) (UNIX timestamp or time string recognized by Slurm (e.g., '[MM/DD[/YY]-]HH:MM[:SS]'))
	LastCollected *int64 `json:"last_collected,omitempty"`

	// PreviousConsumedEnergy Previous value of consumed_energy
	PreviousConsumedEnergy *int64 `json:"previous_consumed_energy,omitempty"`
}

// V0044Assoc defines model for v0.0.44_assoc.
type V0044Assoc struct {
	// Account Account name
	Account    *string              `json:"account,omitempty"`
	Accounting *V0044AccountingList `json:"accounting,omitempty"`

	// Cluster Cluster name
	Cluster *string `json:"cluster,omitempty"`

	// Comment Arbitrary comment
	Comment *string `json:"comment,omitempty"`
	Default *struct {
		// Qos Default QOS
		Qos *string `json:"qos,omitempty"`
	} `json:"default,omitempty"`

	// Flags Flags on the association
	Flags *[]V0044AssocFlags `json:"flags,omitempty"`

	// Id Unique ID (Association ID)
	Id *int32 `json:"id,omitempty"`

	// IsDefault Is default association for user
	IsDefault *bool `json:"is_default,omitempty"`

	// Lineage Complete path up the hierarchy to the root association
	Lineage *string `json:"lineage,omitempty"`
	Max     *struct {
		Jobs *struct {
			Accruing *V0044Uint32NoValStruct `json:"accruing,omitempty"`
			Active   *V0044Uint32NoValStruct `json:"active,omitempty"`
			Per      *struct {
				Accruing  *V0044Uint32NoValStruct `json:"accruing,omitempty"`
				Count     *V0044Uint32NoValStruct `json:"count,omitempty"`
				Submitted *V0044Uint32NoValStruct `json:"submitted,omitempty"`
				WallClock *V0044Uint32NoValStruct `json:"wall_clock,omitempty"`
			} `json:"per,omitempty"`
			Total *V0044Uint32NoValStruct `json:"total,omitempty"`
		} `json:"jobs,omitempty"`
		Per *struct {
			Account *struct {
				WallClock *V0044Uint32NoValStruct `json:"wall_clock,omitempty"`
			} `json:"account,omitempty"`
		} `json:"per,omitempty"`
		Tres *struct {
			Group *struct {
				Active  *V0044TresList `json:"active,omitempty"`
				Minutes *V0044TresList `json:"minutes,omitempty"`
			} `json:"group,omitempty"`
			Minutes *struct {
				Per *struct {
					Job *V0044TresList `json:"job,omitempty"`
				} `json:"per,omitempty"`
				Total *V0044TresList `json:"total,omitempty"`
			} `json:"minutes,omitempty"`
			Per *struct {
				Job  *V0044TresList `json:"job,omitempty"`
				Node *V0044TresList `json:"node,omitempty"`
			} `json:"per,omitempty"`
			Total *V0044TresList `json:"total,omitempty"`
		} `json:"tres,omitempty"`
	} `json:"max,omitempty"`
	Min *struct {
		PriorityThreshold *V0044Uint32NoValStruct `json:"priority_threshold,omitempty"`
	} `json:"min,omitempty"`

	// ParentAccount Name of parent account
	ParentAccount *string `json:"parent_account,omitempty"`

	// Partition Partition name
	Partition *string                 `json:"partition,omitempty"`
	Priority  *V0044Uint32NoValStruct `json:"priority,omitempty"`

	// Qos List of QOS names
	Qos *V0044QosStringIdList `json:"qos,omitempty"`

	// SharesRaw Allocated shares used for fairshare calculation
	SharesRaw *int32 `json:"shares_raw,omitempty"`

	// User User name
	User string `json:"user"`
}

// V0044AssocFlags defines model for V0044Assoc.Flags.
type V0044AssocFlags string

// V0044AssocList defines model for v0.0.44_assoc_list.
type V0044AssocList = []V0044Assoc

// V0044AssocRecSet defines model for v0.0.44_assoc_rec_set.
type V0044AssocRecSet struct {
	// Comment Arbitrary comment
	Comment *string `json:"comment,omitempty"`

	// Defaultqos Default QOS
	Defaultqos *string `json:"defaultqos,omitempty"`

	// Fairshare Allocated shares used for fairshare calculation
	Fairshare             *int32                  `json:"fairshare,omitempty"`
	Grpjobs               *V0044Uint32NoValStruct `json:"grpjobs,omitempty"`
	Grpjobsaccrue         *V0044Uint32NoValStruct `json:"grpjobsaccrue,omitempty"`
	Grpsubmitjobs         *V0044Uint32NoValStruct `json:"grpsubmitjobs,omitempty"`
	Grptres               *V0044TresList          `json:"grptres,omitempty"`
	Grptresmins           *V0044TresList          `json:"grptresmins,omitempty"`
	Grptresrunmins        *V0044TresList          `json:"grptresrunmins,omitempty"`
	Grpwall               *V0044Uint32NoValStruct `json:"grpwall,omitempty"`
	Maxjobs               *V0044Uint32NoValStruct `json:"maxjobs,omitempty"`
	Maxjobsaccrue         *V0044Uint32NoValStruct `json:"maxjobsaccrue,omitempty"`
	Maxsubmitjobs         *V0044Uint32NoValStruct `json:"maxsubmitjobs,omitempty"`
	Maxtresminsperjob     *V0044TresList          `json:"maxtresminsperjob,omitempty"`
	Maxtresperjob         *V0044TresList          `json:"maxtresperjob,omitempty"`
	Maxtrespernode        *V0044TresList          `json:"maxtrespernode,omitempty"`
	Maxtresrunmins        *V0044TresList          `json:"maxtresrunmins,omitempty"`
	Maxwalldurationperjob *V0044Uint32NoValStruct `json:"maxwalldurationperjob,omitempty"`
	Minpriothresh         *V0044Uint32NoValStruct `json:"minpriothresh,omitempty"`

	// Parent Name of parent account
	Parent   *string                 `json:"parent,omitempty"`
	Priority *V0044Uint32NoValStruct `json:"priority,omitempty"`

	// Qoslevel List of QOS names
	Qoslevel *V0044QosStringIdList `json:"qoslevel,omitempty"`
}

// V0044AssocSharesObjList defines model for v0.0.44_assoc_shares_obj_list.
type V0044AssocSharesObjList = []V0044AssocSharesObjWrap

// V0044AssocSharesObjWrap defines model for v0.0.44_assoc_shares_obj_wrap.
type V0044AssocSharesObjWrap struct {
	// Cluster Cluster name
	Cluster        *string                  `json:"cluster,omitempty"`
	EffectiveUsage *V0044Float64NoValStruct `json:"effective_usage,omitempty"`
	Fairshare      *struct {
		Factor *V0044Float64NoValStruct `json:"factor,omitempty"`
		Level  *V0044Float64NoValStruct `json:"level,omitempty"`
	} `json:"fairshare,omitempty"`

	// Id Association ID
	Id *int32 `json:"id,omitempty"`

	// Name Share name
	Name *string `json:"name,omitempty"`

	// Parent Parent name
	Parent *string `json:"parent,omitempty"`

	// Partition Partition name
	Partition        *string                  `json:"partition,omitempty"`
	Shares           *V0044Uint32NoValStruct  `json:"shares,omitempty"`
	SharesNormalized *V0044Float64NoValStruct `json:"shares_normalized,omitempty"`
	Tres             *struct {
		GroupMinutes *V0044SharesUint64TresList   `json:"group_minutes,omitempty"`
		RunSeconds   *V0044SharesUint64TresList   `json:"run_seconds,omitempty"`
		Usage        *V0044SharesFloat128TresList `json:"usage,omitempty"`
	} `json:"tres,omitempty"`

	// Type User or account association
	Type *[]V0044AssocSharesObjWrapType `json:"type,omitempty"`

	// Usage Measure of tresbillableunits usage
	Usage           *int64                   `json:"usage,omitempty"`
	UsageNormalized *V0044Float64NoValStruct `json:"usage_normalized,omitempty"`
}

// V0044AssocSharesObjWrapType defines model for V0044AssocSharesObjWrap.Type.
type V0044AssocSharesObjWrapType string

// V0044AssocShort defines model for v0.0.44_assoc_short.
type V0044AssocShort struct {
	// Account Account name
	Account *string `json:"account,omitempty"`

	// Cluster Cluster name
	Cluster *string `json:"cluster,omitempty"`

	// Id Numeric association ID
	Id *int32 `json:"id,omitempty"`

	// Partition Partition name
	Partition *string `json:"partition,omitempty"`

	// User User name
	User string `json:"user"`
}

// V0044AssocShortList defines model for v0.0.44_assoc_short_list.
type V0044AssocShortList = []V0044AssocShort

// V0044BfExitFields defines model for v0.0.44_bf_exit_fields.
type V0044BfExitFields struct {
	// BfMaxJobStart Reached number of jobs allowed to start
	BfMaxJobStart *int32 `json:"bf_max_job_start,omitempty"`

	// BfMaxJobTest Reached number of jobs allowed to be tested
	BfMaxJobTest *int32 `json:"bf_max_job_test,omitempty"`

	// BfMaxTime Reached maximum allowed scheduler time
	BfMaxTime *int32 `json:"bf_max_time,omitempty"`

	// BfNodeSpaceSize Reached table size limit
	BfNodeSpaceSize *int32 `json:"bf_node_space_size,omitempty"`

	// EndJobQueue Reached end of queue
	EndJobQueue *int32 `json:"end_job_queue,omitempty"`

	// StateChanged System state changed
	StateChanged *int32 `json:"state_changed,omitempty"`
}

// V0044ClusterRec defines model for v0.0.44_cluster_rec.
type V0044ClusterRec struct {
	Associations *struct {
		Root *V0044AssocShort `json:"root,omitempty"`
	} `json:"associations,omitempty"`
	Controller *struct {
		// Host ControlHost
		Host *string `json:"host,omitempty"`

		// Port ControlPort
		Port *int32 `json:"port,omitempty"`
	} `json:"controller,omitempty"`

	// Flags Flags
	Flags *[]V0044ClusterRecFlags `json:"flags,omitempty"`

	// Name ClusterName
	Name *string `json:"name,omitempty"`

	// Nodes Node names
	Nodes *string `json:"nodes,omitempty"`

	// RpcVersion RPC version used in the cluster
	RpcVersion *int32 `json:"rpc_version,omitempty"`
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	SelectPlugin *string        `json:"select_plugin,omitempty"`
	Tres         *V0044TresList `json:"tres,omitempty"`
}

// V0044ClusterRecFlags defines model for V0044ClusterRec.Flags.
type V0044ClusterRecFlags string

// V0044ClusterRecList defines model for v0.0.44_cluster_rec_list.
type V0044ClusterRecList = []V0044ClusterRec

// V0044ControllerPing defines model for v0.0.44_controller_ping.
type V0044ControllerPing struct {
	// Hostname Target for ping
	Hostname *string `json:"hostname,omitempty"`

	// Latency Number of microseconds it took to successfully ping or timeout
	Latency *int64 `json:"latency,omitempty"`

	// Mode The operating mode of the responding slurmctld
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	Mode *string `json:"mode,omitempty"`

	// Pinged Ping result
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	Pinged *string `json:"pinged,omitempty"`

	// Primary Is responding slurmctld the primary controller (Is responding slurmctld the primary controller)
	Primary bool `json:"primary"`

	// Responding If ping RPC responded with pong from controller
	Responding bool `json:"responding"`
}

// V0044ControllerPingArray defines model for v0.0.44_controller_ping_array.
type V0044ControllerPingArray = []V0044ControllerPing

// V0044Coord defines model for v0.0.44_coord.
type V0044Coord struct {
	// Direct Indicates whether the coordinator was directly assigned to this account
	Direct *bool `json:"direct,omitempty"`

	// Name User name
	Name string `json:"name"`
}

// V0044CoordList defines model for v0.0.44_coord_list.
type V0044CoordList = []V0044Coord

// V0044CronEntry defines model for v0.0.44_cron_entry.
type V0044CronEntry struct {
	// Command Command to run
	Command *string `json:"command,omitempty"`

	// DayOfMonth Ranged string specifying eligible day of month values (e.g. 0-10,29)
	DayOfMonth *string `json:"day_of_month,omitempty"`

	// DayOfWeek Ranged string specifying eligible day of week values (e.g.0-3,7)
	DayOfWeek *string `json:"day_of_week,omitempty"`

	// Flags Flags
	Flags *[]V0044CronEntryFlags `json:"flags,omitempty"`

	// Hour Ranged string specifying eligible hour values (e.g. 0-5,23)
	Hour *string `json:"hour,omitempty"`
	Line *struct {
		// End End of this entry in file
		End *int32 `json:"end,omitempty"`

		// Start Start of this entry in file
		Start *int32 `json:"start,omitempty"`
	} `json:"line,omitempty"`

	// Minute Ranged string specifying eligible minute values (e.g. 0-10,50)
	Minute *string `json:"minute,omitempty"`

	// Month Ranged string specifying eligible month values (e.g. 0-5,12)
	Month *string `json:"month,omitempty"`

	// Specification Complete time specification (* means valid for all allowed values) - minute hour day_of_month month day_of_week
	Specification *string `json:"specification,omitempty"`
}

// V0044CronEntryFlags defines model for V0044CronEntry.Flags.
type V0044CronEntryFlags string

// V0044CsvString defines model for v0.0.44_csv_string.
type V0044CsvString = []string

// V0044Float64NoValStruct defines model for v0.0.44_float64_no_val_struct.
type V0044Float64NoValStruct struct {
	// Infinite True if number has been set to infinite; "set" and "number" will be ignored
	Infinite *bool `json:"infinite,omitempty"`

	// Number If "set" is True the number will be set with value; otherwise ignore number contents
	Number *float64 `json:"number,omitempty"`

	// Set True if number has been set; False if number is unset
	Set *bool `json:"set,omitempty"`
}

// V0044Hostlist defines model for v0.0.44_hostlist.
type V0044Hostlist = []string

// V0044HostlistString defines model for v0.0.44_hostlist_string.
type V0044HostlistString = []string

// V0044Instance defines model for v0.0.44_instance.
type V0044Instance struct {
	// Cluster Cluster name
	Cluster *string `json:"cluster,omitempty"`

	// Extra Arbitrary string used for node filtering if extra constraints are enabled
	Extra *string `json:"extra,omitempty"`

	// InstanceId Cloud instance ID
	InstanceId *string `json:"instance_id,omitempty"`

	// InstanceType Cloud instance type
	InstanceType *string `json:"instance_type,omitempty"`

	// NodeName NodeName
	NodeName *string `json:"node_name,omitempty"`
	Time     *struct {
		// TimeEnd When the instance will end (UNIX timestamp) (UNIX timestamp or time string recognized by Slurm (e.g., '[MM/DD[/YY]-]HH:MM[:SS]'))
		TimeEnd *int64 `json:"time_end,omitempty"`

		// TimeStart When the instance will start (UNIX timestamp) (UNIX timestamp or time string recognized by Slurm (e.g., '[MM/DD[/YY]-]HH:MM[:SS]'))
		TimeStart *int64 `json:"time_start,omitempty"`
	} `json:"time,omitempty"`
}

// V0044InstanceList defines model for v0.0.44_instance_list.
type V0044InstanceList = []V0044Instance

// V0044Job defines model for v0.0.44_job.
type V0044Job struct {
	// Account Account the job ran under
	Account *string `json:"account,omitempty"`

	// AllocationNodes List of nodes allocated to the job
	AllocationNodes *int32 `json:"allocation_nodes,omitempty"`
	Array           *struct {
		// JobId Job ID of job array, or 0 if N/A
		JobId  *int32 `json:"job_id,omitempty"`
		Limits *struct {
			Max *struct {
				Running *struct {
					// Tasks Maximum number of simultaneously running tasks, 0 if no limit
					Tasks *int32 `json:"tasks,omitempty"`
				} `json:"running,omitempty"`
			} `json:"max,omitempty"`
		} `json:"limits,omitempty"`

		// Task String expression of task IDs in this record
		Task   *string                 `json:"task,omitempty"`
		TaskId *V0044Uint32NoValStruct `json:"task_id,omitempty"`
	} `json:"array,omitempty"`
	Association *V0044AssocShort `json:"association,omitempty"`

	// Block The name of the block to be used (used with Blue Gene systems)
	Block *string `json:"block,omitempty"`

	// Cluster Cluster name
	Cluster *string `json:"cluster,omitempty"`
	Comment *struct {
		// Administrator Arbitrary comment made by administrator
		Administrator *string `json:"administrator,omitempty"`

		// Job Arbitrary comment made by user
		Job *string `json:"job,omitempty"`

		// System Arbitrary comment from slurmctld
		System *string `json:"system,omitempty"`
	} `json:"comment,omitempty"`

	// Constraints Feature(s) the job requested as a constraint
	Constraints *string `json:"constraints,omitempty"`

	// Container Absolute path to OCI container bundle
	Container       *string                      `json:"container,omitempty"`
	DerivedExitCode *V0044ProcessExitCodeVerbose `json:"derived_exit_code,omitempty"`
	ExitCode        *V0044ProcessExitCodeVerbose `json:"exit_code,omitempty"`

	// Extra Arbitrary string used for node filtering if extra constraints are enabled
	Extra *string `json:"extra,omitempty"`

	// FailedNode Name of node that caused job failure
	FailedNode *string `json:"failed_node,omitempty"`

	// Flags Flags associated with this job
	Flags *[]V0044JobFlags `json:"flags,omitempty"`

	// Group Group ID of the user that owns the job
	Group *string `json:"group,omitempty"`
	Het   *struct {
		// JobId Heterogeneous job ID, if applicable
		JobId     *int32                  `json:"job_id,omitempty"`
		JobOffset *V0044Uint32NoValStruct `json:"job_offset,omitempty"`
	} `json:"het,omitempty"`

	// Hold Hold (true) or release (false) job (Job held)
	Hold *bool `json:"hold,omitempty"`

	// JobId Job ID
	JobId *int32 `json:"job_id,omitempty"`

	// KillRequestUser User ID that requested termination of the job
	KillRequestUser *string `json:"kill_request_user,omitempty"`

	// Licenses License(s) required by the job
	Licenses *string `json:"licenses,omitempty"`
	Mcs      *struct {
		// Label Multi-Category Security label on the job
		Label *string `json:"label,omitempty"`
	} `json:"mcs,omitempty"`

	// Name Job name
	Name *string `json:"name,omitempty"`

	// Nodes Node(s) allocated to the job
	Nodes *string `json:"nodes,omitempty"`

	// Partition Partition assigned to the job
	Partition *string                 `json:"partition,omitempty"`
	Priority  *V0044Uint32NoValStruct `json:"priority,omitempty"`

	// Qos Quality of Service assigned to the job
	Qos *string `json:"qos,omitempty"`

	// Qosreq Requested QOS
	Qosreq   *string `json:"qosreq,omitempty"`
	Required *struct {
		// CPUs Minimum number of CPUs required
		CPUs          *int32                  `json:"CPUs,omitempty"`
		MemoryPerCpu  *V0044Uint64NoValStruct `json:"memory_per_cpu,omitempty"`
		MemoryPerNode *V0044Uint64NoValStruct `json:"memory_per_node,omitempty"`
	} `json:"required,omitempty"`
	Reservation *struct {
		// Id Unique identifier of requested reservation
		Id *int32 `json:"id,omitempty"`

		// Name Name of reservation to use
		Name *string `json:"name,omitempty"`

		// Requested Comma-separated list of requested reservation names
		Requested *string `json:"requested,omitempty"`
	} `json:"reservation,omitempty"`

	// RestartCnt How many times this job has been requeued/restarted
	RestartCnt *int32 `json:"restart_cnt,omitempty"`

	// Script Job batch script contents; only the first component in a HetJob is populated or honored
	Script *string `json:"script,omitempty"`

	// SegmentSize Requested segment size
	SegmentSize *int32 `json:"segment_size,omitempty"`
	State       *struct {
		// Current Current state
		Current *[]V0044JobStateCurrent `json:"current,omitempty"`

		// Reason Reason for previous Pending or Failed state
		Reason *string `json:"reason,omitempty"`
	} `json:"state,omitempty"`

	// Stderr Path to stderr file
	Stderr *string `json:"stderr,omitempty"`

	// StderrExpanded Job stderr with expanded fields
	StderrExpanded *string `json:"stderr_expanded,omitempty"`

	// Stdin Path to stdin file
	Stdin *string `json:"stdin,omitempty"`

	// StdinExpanded Job stdin with expanded fields
	StdinExpanded *string `json:"stdin_expanded,omitempty"`

	// Stdout Path to stdout file
	Stdout *string `json:"stdout,omitempty"`

	// StdoutExpanded Job stdout with expanded fields
	StdoutExpanded *string        `json:"stdout_expanded,omitempty"`
	Steps          *V0044StepList `json:"steps,omitempty"`

	// SubmitLine Command used to submit the job
	SubmitLine *string `json:"submit_line,omitempty"`
	Time       *struct {
		// Elapsed Elapsed time in seconds
		Elapsed *int32 `json:"elapsed,omitempty"`

		// Eligible Time when the job became eligible to run (UNIX timestamp) (UNIX timestamp or time string recognized by Slurm (e.g., '[MM/DD[/YY]-]HH:MM[:SS]'))
		Eligible *int64 `json:"eligible,omitempty"`

		// End End time (UNIX timestamp) (UNIX timestamp or time string recognized by Slurm (e.g., '[MM/DD[/YY]-]HH:MM[:SS]'))
		End     *int64                  `json:"end,omitempty"`
		Limit   *V0044Uint32NoValStruct `json:"limit,omitempty"`
		Planned *V0044Uint64NoValStruct `json:"planned,omitempty"`

		// Start Time execution began (UNIX timestamp) (UNIX timestamp or time string recognized by Slurm (e.g., '[MM/DD[/YY]-]HH:MM[:SS]'))
		Start *int64 `json:"start,omitempty"`

		// Submission Time when the job was submitted (UNIX timestamp) (UNIX timestamp or time string recognized by Slurm (e.g., '[MM/DD[/YY]-]HH:MM[:SS]'))
		Submission *int64 `json:"submission,omitempty"`

		// Suspended Total time in suspended state in seconds
		Suspended *int32 `json:"suspended,omitempty"`
		System    *struct {
			// Microseconds System CPU time used by the job in microseconds
			Microseconds *int64 `json:"microseconds,omitempty"`

			// Seconds System CPU time used by the job in seconds
			Seconds *int64 `json:"seconds,omitempty"`
		} `json:"system,omitempty"`
		Total *struct {
			// Microseconds Sum of System and User CPU time used by the job in microseconds
			Microseconds *int64 `json:"microseconds,omitempty"`

			// Seconds Sum of System and User CPU time used by the job in seconds
			Seconds *int64 `json:"seconds,omitempty"`
		} `json:"total,omitempty"`
		User *struct {
			// Microseconds User CPU time used by the job in microseconds
			Microseconds *int64 `json:"microseconds,omitempty"`

			// Seconds User CPU time used by the job in seconds
			Seconds *int64 `json:"seconds,omitempty"`
		} `json:"user,omitempty"`
	} `json:"time,omitempty"`
	Tres *struct {
		Allocated *V0044TresList `json:"allocated,omitempty"`
		Requested *V0044TresList `json:"requested,omitempty"`
	} `json:"tres,omitempty"`

	// UsedGres Generic resources used by job
	UsedGres *string `json:"used_gres,omitempty"`

	// User User that owns the job
	User  *string              `json:"user,omitempty"`
	Wckey *V0044WckeyTagStruct `json:"wckey,omitempty"`

	// WorkingDirectory Path to current working directory
	WorkingDirectory *string `json:"working_directory,omitempty"`
}

// V0044JobFlags defines model for V0044Job.Flags.
type V0044JobFlags string

// V0044JobStateCurrent defines model for V0044Job.State.Current.
type V0044JobStateCurrent string

// V0044JobAllocReq defines model for v0.0.44_job_alloc_req.
type V0044JobAllocReq struct {
	Hetjob *V0044JobDescMsgList `json:"hetjob,omitempty"`
	Job    *V0044JobDescMsg     `json:"job,omitempty"`
}

// V0044JobArrayResponseArray defines model for v0.0.44_job_array_response_array.
type V0044JobArrayResponseArray = []V0044JobArrayResponseMsgEntry

// V0044JobArrayResponseMsgEntry defines model for v0.0.44_job_array_response_msg_entry.
type V0044JobArrayResponseMsgEntry struct {
	// Error Verbose update status or error
	Error *string `json:"error,omitempty"`

	// ErrorCode Verbose update status or error
	ErrorCode *int32 `json:"error_code,omitempty"`

	// JobId Job ID for updated job
	JobId *int32 `json:"job_id,omitempty"`

	// StepId Step ID for updated job
	StepId *string `json:"step_id,omitempty"`

	// Why Update response message
	Why *string `json:"why,omitempty"`
}

// V0044JobDescMsg defines model for v0.0.44_job_desc_msg.
type V0044JobDescMsg struct {
	// Account Account associated with the job
	Account *string `json:"account,omitempty"`

	// AccountGatherFrequency Job accounting and profiling sampling intervals in seconds
	AccountGatherFrequency *string `json:"account_gather_frequency,omitempty"`

	// AdminComment Arbitrary comment made by administrator
	AdminComment *string `json:"admin_comment,omitempty"`

	// AllocationNodeList Local node making the resource allocation
	AllocationNodeList *string `json:"allocation_node_list,omitempty"`

	// AllocationNodePort Port to send allocation confirmation to
	AllocationNodePort *int32            `json:"allocation_node_port,omitempty"`
	Argv               *V0044StringArray `json:"argv,omitempty"`

	// Array Job array index value specification
	Array *string `json:"array,omitempty"`

	// BatchFeatures Features required for batch script's node
	BatchFeatures *string                 `json:"batch_features,omitempty"`
	BeginTime     *V0044Uint64NoValStruct `json:"begin_time,omitempty"`

	// BurstBuffer Burst buffer specifications
	BurstBuffer *string `json:"burst_buffer,omitempty"`

	// ClusterConstraint Required features that a federated cluster must have to have a sibling job submitted to it
	ClusterConstraint *string `json:"cluster_constraint,omitempty"`

	// Clusters Clusters that a federated job can run on
	Clusters *string `json:"clusters,omitempty"`

	// Comment Arbitrary comment made by user
	Comment *string `json:"comment,omitempty"`

	// Constraints Comma-separated list of features that are required
	Constraints *string `json:"constraints,omitempty"`

	// Container Absolute path to OCI container bundle
	Container *string `json:"container,omitempty"`

	// ContainerId OCI container ID
	ContainerId *string `json:"container_id,omitempty"`

	// Contiguous True if job requires contiguous nodes
	Contiguous *bool `json:"contiguous,omitempty"`

	// CoreSpecification Specialized core count
	CoreSpecification *int32 `json:"core_specification,omitempty"`

	// CpuBinding Method for binding tasks to allocated CPUs
	CpuBinding *string `json:"cpu_binding,omitempty"`

	// CpuBindingFlags Flags for CPU binding
	CpuBindingFlags *[]V0044JobDescMsgCpuBindingFlags `json:"cpu_binding_flags,omitempty"`

	// CpuFrequency Requested CPU frequency range <p1>[-p2][:p3]
	CpuFrequency *string `json:"cpu_frequency,omitempty"`

	// CpusPerTask Number of CPUs required by each task
	CpusPerTask *int32 `json:"cpus_per_task,omitempty"`

	// CpusPerTres Semicolon delimited list of TRES=# values values indicating how many CPUs should be allocated for each specified TRES (currently only used for gres/gpu)
	CpusPerTres *string         `json:"cpus_per_tres,omitempty"`
	Crontab     *V0044CronEntry `json:"crontab,omitempty"`

	// CurrentWorkingDirectory Working directory to use for the job
	CurrentWorkingDirectory *string `json:"current_working_directory,omitempty"`

	// Deadline Latest time that the job may start (UNIX timestamp) (UNIX timestamp or time string recognized by Slurm (e.g., '[MM/DD[/YY]-]HH:MM[:SS]'))
	Deadline *int64 `json:"deadline,omitempty"`

	// DelayBoot Number of seconds after job eligible start that nodes will be rebooted to satisfy feature specification
	DelayBoot *int32 `json:"delay_boot,omitempty"`

	// Dependency Other jobs that must meet certain criteria before this job can start
	Dependency *string `json:"dependency,omitempty"`

	// Distribution Layout
	Distribution          *string                 `json:"distribution,omitempty"`
	DistributionPlaneSize *V0044Uint16NoValStruct `json:"distribution_plane_size,omitempty"`

	// EndTime Expected end time (UNIX timestamp) (UNIX timestamp or time string recognized by Slurm (e.g., '[MM/DD[/YY]-]HH:MM[:SS]'))
	EndTime       *int64            `json:"end_time,omitempty"`
	Environment   *V0044StringArray `json:"environment,omitempty"`
	ExcludedNodes *V0044CsvString   `json:"excluded_nodes,omitempty"`

	// Extra Arbitrary string used for node filtering if extra constraints are enabled
	Extra *string `json:"extra,omitempty"`

	// Flags Job flags
	Flags *[]V0044JobDescMsgFlags `json:"flags,omitempty"`

	// GroupId Group ID of the user that owns the job
	GroupId *string `json:"group_id,omitempty"`

	// HetjobGroup Unique sequence number applied to this component of the heterogeneous job
	HetjobGroup *int32 `json:"hetjob_group,omitempty"`

	// Hold Hold (true) or release (false) job (Job held)
	Hold *bool `json:"hold,omitempty"`

	// Immediate If true, exit if resources are not available within the time period specified
	Immediate *bool `json:"immediate,omitempty"`

	// JobId Job ID
	JobId *int32 `json:"job_id,omitempty"`

	// KillOnNodeFail If true, kill job on node failure
	KillOnNodeFail   *bool                   `json:"kill_on_node_fail,omitempty"`
	KillWarningDelay *V0044Uint16NoValStruct `json:"kill_warning_delay,omitempty"`

	// KillWarningFlags Flags related to job signals
	KillWarningFlags *[]V0044JobDescMsgKillWarningFlags `json:"kill_warning_flags,omitempty"`

	// KillWarningSignal Signal to send when approaching end time (e.g. "10" or "USR1")
	KillWarningSignal *string `json:"kill_warning_signal,omitempty"`

	// Licenses License(s) required by the job
	Licenses *string `json:"licenses,omitempty"`

	// MailType Mail event type(s)
	MailType *[]V0044JobDescMsgMailType `json:"mail_type,omitempty"`

	// MailUser User to receive email notifications
	MailUser *string `json:"mail_user,omitempty"`

	// MaximumCpus Maximum number of CPUs required
	MaximumCpus *int32 `json:"maximum_cpus,omitempty"`

	// MaximumNodes Maximum node count
	MaximumNodes *int32 `json:"maximum_nodes,omitempty"`

	// McsLabel Multi-Category Security label on the job
	McsLabel *string `json:"mcs_label,omitempty"`

	// MemoryBinding Binding map for map/mask_cpu
	MemoryBinding *string `json:"memory_binding,omitempty"`

	// MemoryBindingType Method for binding tasks to memory
	MemoryBindingType *[]V0044JobDescMsgMemoryBindingType `json:"memory_binding_type,omitempty"`
	MemoryPerCpu      *V0044Uint64NoValStruct             `json:"memory_per_cpu,omitempty"`
	MemoryPerNode     *V0044Uint64NoValStruct             `json:"memory_per_node,omitempty"`

	// MemoryPerTres Semicolon delimited list of TRES=# values indicating how much memory in megabytes should be allocated for each specified TRES (currently only used for gres/gpu)
	MemoryPerTres *string `json:"memory_per_tres,omitempty"`

	// MinimumBoardsPerNode Boards per node required
	MinimumBoardsPerNode *int32 `json:"minimum_boards_per_node,omitempty"`

	// MinimumCpus Minimum number of CPUs required
	MinimumCpus *int32 `json:"minimum_cpus,omitempty"`

	// MinimumCpusPerNode Minimum number of CPUs per node
	MinimumCpusPerNode *int32 `json:"minimum_cpus_per_node,omitempty"`

	// MinimumNodes Minimum node count
	MinimumNodes *int32 `json:"minimum_nodes,omitempty"`

	// MinimumSocketsPerBoard Sockets per board required
	MinimumSocketsPerBoard *int32 `json:"minimum_sockets_per_board,omitempty"`

	// Name Job name
	Name *string `json:"name,omitempty"`

	// Network Network specs for job step
	Network *string `json:"network,omitempty"`

	// Nice Requested job priority change
	Nice *int32 `json:"nice,omitempty"`

	// Nodes Node count range specification (e.g. 1-15:4)
	Nodes *string `json:"nodes,omitempty"`

	// NtasksPerTres Number of tasks that can access each GPU
	NtasksPerTres *int32 `json:"ntasks_per_tres,omitempty"`

	// OomKillStep Kill whole step in case of OOM in one of the tasks
	OomKillStep *int32 `json:"oom_kill_step,omitempty"`

	// OpenMode Open mode used for stdout and stderr files
	OpenMode *[]V0044JobDescMsgOpenMode `json:"open_mode,omitempty"`

	// Overcommit Overcommit resources
	Overcommit *bool `json:"overcommit,omitempty"`

	// Partition Partition assigned to the job
	Partition *string `json:"partition,omitempty"`
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	PowerFlags *[]interface{} `json:"power_flags,omitempty"`

	// Prefer Comma-separated list of features that are preferred but not required
	Prefer   *string                 `json:"prefer,omitempty"`
	Priority *V0044Uint32NoValStruct `json:"priority,omitempty"`

	// Profile Profile used by the acct_gather_profile plugin
	Profile *[]V0044JobDescMsgProfile `json:"profile,omitempty"`

	// Qos Quality of Service assigned to the job
	Qos *string `json:"qos,omitempty"`

	// Reboot Node reboot requested before start
	Reboot *bool `json:"reboot,omitempty"`

	// Requeue Determines whether the job may be requeued
	Requeue          *bool                   `json:"requeue,omitempty"`
	RequiredNodes    *V0044CsvString         `json:"required_nodes,omitempty"`
	RequiredSwitches *V0044Uint32NoValStruct `json:"required_switches,omitempty"`

	// Reservation Name of reservation to use
	Reservation *string `json:"reservation,omitempty"`

	// ReservePorts Port to send various notification msg to
	ReservePorts *int32 `json:"reserve_ports,omitempty"`
	Rlimits      *struct {
		As      *V0044Uint64NoValStruct `json:"as,omitempty"`
		Core    *V0044Uint64NoValStruct `json:"core,omitempty"`
		Cpu     *V0044Uint64NoValStruct `json:"cpu,omitempty"`
		Data    *V0044Uint64NoValStruct `json:"data,omitempty"`
		Fsize   *V0044Uint64NoValStruct `json:"fsize,omitempty"`
		Memlock *V0044Uint64NoValStruct `json:"memlock,omitempty"`
		Nofile  *V0044Uint64NoValStruct `json:"nofile,omitempty"`
		Nproc   *V0044Uint64NoValStruct `json:"nproc,omitempty"`
		Rss     *V0044Uint64NoValStruct `json:"rss,omitempty"`
		Stack   *V0044Uint64NoValStruct `json:"stack,omitempty"`
	} `json:"rlimits,omitempty"`

	// Script Job batch script contents; only the first component in a HetJob is populated or honored
	Script      *string                 `json:"script,omitempty"`
	SegmentSize *V0044Uint16NoValStruct `json:"segment_size,omitempty"`

	// SelinuxContext SELinux context
	SelinuxContext *string `json:"selinux_context,omitempty"`

	// Shared How the job can share resources with other jobs, if at all
	Shared *[]V0044JobDescMsgShared `json:"shared,omitempty"`

	// SiteFactor Site-specific priority factor
	SiteFactor *int32 `json:"site_factor,omitempty"`

	// SocketsPerNode Sockets per node required
	SocketsPerNode   *int32            `json:"sockets_per_node,omitempty"`
	SpankEnvironment *V0044StringArray `json:"spank_environment,omitempty"`

	// StandardError Path to stderr file
	StandardError *string `json:"standard_error,omitempty"`

	// StandardInput Path to stdin file
	StandardInput *string `json:"standard_input,omitempty"`

	// StandardOutput Path to stdout file
	StandardOutput *string           `json:"standard_output,omitempty"`
	StepId         *V0044SlurmStepId `json:"step_id,omitempty"`

	// Tasks Number of tasks
	Tasks *int32 `json:"tasks,omitempty"`

	// TasksPerBoard Number of tasks to invoke on each board
	TasksPerBoard *int32 `json:"tasks_per_board,omitempty"`

	// TasksPerCore Number of tasks to invoke on each core
	TasksPerCore *int32 `json:"tasks_per_core,omitempty"`

	// TasksPerNode Number of tasks to invoke on each node
	TasksPerNode *int32 `json:"tasks_per_node,omitempty"`

	// TasksPerSocket Number of tasks to invoke on each socket
	TasksPerSocket *int32 `json:"tasks_per_socket,omitempty"`

	// TemporaryDiskPerNode Minimum tmp disk space required per node
	TemporaryDiskPerNode *int32 `json:"temporary_disk_per_node,omitempty"`

	// ThreadSpecification Specialized thread count
	ThreadSpecification *int32 `json:"thread_specification,omitempty"`

	// ThreadsPerCore Threads per core required
	ThreadsPerCore *int32                  `json:"threads_per_core,omitempty"`
	TimeLimit      *V0044Uint32NoValStruct `json:"time_limit,omitempty"`
	TimeMinimum    *V0044Uint32NoValStruct `json:"time_minimum,omitempty"`

	// TresBind Task to TRES binding directives
	TresBind *string `json:"tres_bind,omitempty"`

	// TresFreq TRES frequency directives
	TresFreq *string `json:"tres_freq,omitempty"`

	// TresPerJob Comma-separated list of TRES=# values to be allocated for every job
	TresPerJob *string `json:"tres_per_job,omitempty"`

	// TresPerNode Comma-separated list of TRES=# values to be allocated for every node
	TresPerNode *string `json:"tres_per_node,omitempty"`

	// TresPerSocket Comma-separated list of TRES=# values to be allocated for every socket
	TresPerSocket *string `json:"tres_per_socket,omitempty"`

	// TresPerTask Comma-separated list of TRES=# values to be allocated for every task
	TresPerTask *string `json:"tres_per_task,omitempty"`

	// UserId User ID that owns the job
	UserId *string `json:"user_id,omitempty"`

	// WaitAllNodes If true, wait to start until after all nodes have booted
	WaitAllNodes *bool `json:"wait_all_nodes,omitempty"`

	// WaitForSwitch Maximum time to wait for switches in seconds
	WaitForSwitch *int32 `json:"wait_for_switch,omitempty"`

	// Wckey Workload characterization key
	Wckey *string `json:"wckey,omitempty"`

	// X11 X11 forwarding options
	X11 *[]V0044JobDescMsgX11 `json:"x11,omitempty"`

	// X11MagicCookie Magic cookie for X11 forwarding
	X11MagicCookie *string `json:"x11_magic_cookie,omitempty"`

	// X11TargetHost Hostname or UNIX socket if x11_target_port=0
	X11TargetHost *string `json:"x11_target_host,omitempty"`

	// X11TargetPort TCP port
	X11TargetPort *int32 `json:"x11_target_port,omitempty"`
}

// V0044JobDescMsgCpuBindingFlags defines model for V0044JobDescMsg.CpuBindingFlags.
type V0044JobDescMsgCpuBindingFlags string

// V0044JobDescMsgFlags defines model for V0044JobDescMsg.Flags.
type V0044JobDescMsgFlags string

// V0044JobDescMsgKillWarningFlags defines model for V0044JobDescMsg.KillWarningFlags.
type V0044JobDescMsgKillWarningFlags string

// V0044JobDescMsgMailType defines model for V0044JobDescMsg.MailType.
type V0044JobDescMsgMailType string

// V0044JobDescMsgMemoryBindingType defines model for V0044JobDescMsg.MemoryBindingType.
type V0044JobDescMsgMemoryBindingType string

// V0044JobDescMsgOpenMode defines model for V0044JobDescMsg.OpenMode.
type V0044JobDescMsgOpenMode string

// V0044JobDescMsgProfile defines model for V0044JobDescMsg.Profile.
type V0044JobDescMsgProfile string

// V0044JobDescMsgShared defines model for V0044JobDescMsg.Shared.
type V0044JobDescMsgShared string

// V0044JobDescMsgX11 defines model for V0044JobDescMsg.X11.
type V0044JobDescMsgX11 string

// V0044JobDescMsgList defines model for v0.0.44_job_desc_msg_list.
type V0044JobDescMsgList = []V0044JobDescMsg

// V0044JobInfo defines model for v0.0.44_job_info.
type V0044JobInfo struct {
	// Account Account associated with the job
	Account    *string                 `json:"account,omitempty"`
	AccrueTime *V0044Uint64NoValStruct `json:"accrue_time,omitempty"`

	// AdminComment Arbitrary comment made by administrator
	AdminComment *string `json:"admin_comment,omitempty"`

	// AllocatingNode Local node making the resource allocation
	AllocatingNode *string                 `json:"allocating_node,omitempty"`
	ArrayJobId     *V0044Uint32NoValStruct `json:"array_job_id,omitempty"`
	ArrayMaxTasks  *V0044Uint32NoValStruct `json:"array_max_tasks,omitempty"`
	ArrayTaskId    *V0044Uint32NoValStruct `json:"array_task_id,omitempty"`

	// ArrayTaskString String expression of task IDs in this record
	ArrayTaskString *string `json:"array_task_string,omitempty"`

	// AssociationId Unique identifier for the association
	AssociationId *int32 `json:"association_id,omitempty"`

	// BatchFeatures Features required for batch script's node
	BatchFeatures *string `json:"batch_features,omitempty"`

	// BatchFlag True if batch job
	BatchFlag *bool `json:"batch_flag,omitempty"`

	// BatchHost Name of host running batch script
	BatchHost    *string                  `json:"batch_host,omitempty"`
	BillableTres *V0044Float64NoValStruct `json:"billable_tres,omitempty"`

	// BurstBuffer Burst buffer specifications
	BurstBuffer *string `json:"burst_buffer,omitempty"`

	// BurstBufferState Burst buffer state details
	BurstBufferState *string `json:"burst_buffer_state,omitempty"`

	// Cluster Cluster name
	Cluster *string `json:"cluster,omitempty"`

	// ClusterFeatures List of required cluster features
	ClusterFeatures *string `json:"cluster_features,omitempty"`

	// Command Executed command
	Command *string `json:"command,omitempty"`

	// Comment Arbitrary comment
	Comment *string `json:"comment,omitempty"`

	// Container Absolute path to OCI container bundle
	Container *string `json:"container,omitempty"`

	// ContainerId OCI container ID
	ContainerId *string `json:"container_id,omitempty"`

	// Contiguous True if job requires contiguous nodes
	Contiguous *bool `json:"contiguous,omitempty"`

	// CoreSpec Specialized core count
	CoreSpec             *int32                  `json:"core_spec,omitempty"`
	CoresPerSocket       *V0044Uint16NoValStruct `json:"cores_per_socket,omitempty"`
	CpuFrequencyGovernor *V0044Uint32NoValStruct `json:"cpu_frequency_governor,omitempty"`
	CpuFrequencyMaximum  *V0044Uint32NoValStruct `json:"cpu_frequency_maximum,omitempty"`
	CpuFrequencyMinimum  *V0044Uint32NoValStruct `json:"cpu_frequency_minimum,omitempty"`
	Cpus                 *V0044Uint32NoValStruct `json:"cpus,omitempty"`
	CpusPerTask          *V0044Uint16NoValStruct `json:"cpus_per_task,omitempty"`

	// CpusPerTres Semicolon delimited list of TRES=# values indicating how many CPUs should be allocated for each specified TRES (currently only used for gres/gpu)
	CpusPerTres *string `json:"cpus_per_tres,omitempty"`

	// Cron Time specification for scrontab job
	Cron *string `json:"cron,omitempty"`

	// CurrentWorkingDirectory Working directory to use for the job
	CurrentWorkingDirectory *string                 `json:"current_working_directory,omitempty"`
	Deadline                *V0044Uint64NoValStruct `json:"deadline,omitempty"`
	DelayBoot               *V0044Uint32NoValStruct `json:"delay_boot,omitempty"`

	// Dependency Other jobs that must meet certain criteria before this job can start
	Dependency      *string                      `json:"dependency,omitempty"`
	DerivedExitCode *V0044ProcessExitCodeVerbose `json:"derived_exit_code,omitempty"`
	EligibleTime    *V0044Uint64NoValStruct      `json:"eligible_time,omitempty"`
	EndTime         *V0044Uint64NoValStruct      `json:"end_time,omitempty"`

	// ExcludedNodes Comma-separated list of nodes that may not be used
	ExcludedNodes *string                      `json:"excluded_nodes,omitempty"`
	ExitCode      *V0044ProcessExitCodeVerbose `json:"exit_code,omitempty"`

	// Extra Arbitrary string used for node filtering if extra constraints are enabled
	Extra *string `json:"extra,omitempty"`

	// FailedNode Name of node that caused job failure
	FailedNode *string `json:"failed_node,omitempty"`

	// Features Comma-separated list of features that are required
	Features *string `json:"features,omitempty"`

	// FederationOrigin Origin cluster's name (when using federation)
	FederationOrigin *string `json:"federation_origin,omitempty"`

	// FederationSiblingsActive Active sibling job names
	FederationSiblingsActive *string `json:"federation_siblings_active,omitempty"`

	// FederationSiblingsViable Viable sibling job names
	FederationSiblingsViable *string `json:"federation_siblings_viable,omitempty"`

	// Flags Job flags
	Flags      *[]V0044JobInfoFlags    `json:"flags,omitempty"`
	GresDetail *V0044JobInfoGresDetail `json:"gres_detail,omitempty"`

	// GroupId Group ID of the user that owns the job
	GroupId *int32 `json:"group_id,omitempty"`

	// GroupName Group name of the user that owns the job
	GroupName *string                 `json:"group_name,omitempty"`
	HetJobId  *V0044Uint32NoValStruct `json:"het_job_id,omitempty"`

	// HetJobIdSet Job ID range for all heterogeneous job components
	HetJobIdSet  *string                 `json:"het_job_id_set,omitempty"`
	HetJobOffset *V0044Uint32NoValStruct `json:"het_job_offset,omitempty"`

	// Hold Hold (true) or release (false) job (Job held)
	Hold *bool `json:"hold,omitempty"`

	// JobId Job ID
	JobId        *int32          `json:"job_id,omitempty"`
	JobResources *V0044JobRes    `json:"job_resources,omitempty"`
	JobSizeStr   *V0044CsvString `json:"job_size_str,omitempty"`

	// JobState Current state
	JobState            *[]V0044JobInfoJobState `json:"job_state,omitempty"`
	LastSchedEvaluation *V0044Uint64NoValStruct `json:"last_sched_evaluation,omitempty"`

	// Licenses License(s) required by the job
	Licenses *string `json:"licenses,omitempty"`

	// LicensesAllocated License(s) allocated to the job
	LicensesAllocated *string `json:"licenses_allocated,omitempty"`

	// MailType Mail event type(s)
	MailType *[]V0044JobInfoMailType `json:"mail_type,omitempty"`

	// MailUser User to receive email notifications
	MailUser *string                 `json:"mail_user,omitempty"`
	MaxCpus  *V0044Uint32NoValStruct `json:"max_cpus,omitempty"`
	MaxNodes *V0044Uint32NoValStruct `json:"max_nodes,omitempty"`

	// MaximumSwitchWaitTime Maximum time to wait for switches in seconds
	MaximumSwitchWaitTime *int32 `json:"maximum_switch_wait_time,omitempty"`

	// McsLabel Multi-Category Security label on the job
	McsLabel      *string                 `json:"mcs_label,omitempty"`
	MemoryPerCpu  *V0044Uint64NoValStruct `json:"memory_per_cpu,omitempty"`
	MemoryPerNode *V0044Uint64NoValStruct `json:"memory_per_node,omitempty"`

	// MemoryPerTres Semicolon delimited list of TRES=# values indicating how much memory in megabytes should be allocated for each specified TRES (currently only used for gres/gpu)
	MemoryPerTres         *string                 `json:"memory_per_tres,omitempty"`
	MinimumCpusPerNode    *V0044Uint16NoValStruct `json:"minimum_cpus_per_node,omitempty"`
	MinimumTmpDiskPerNode *V0044Uint32NoValStruct `json:"minimum_tmp_disk_per_node,omitempty"`

	// Name Job name
	Name *string `json:"name,omitempty"`

	// Network Network specs for the job
	Network *string `json:"network,omitempty"`

	// Nice Requested job priority change
	Nice      *int32                  `json:"nice,omitempty"`
	NodeCount *V0044Uint32NoValStruct `json:"node_count,omitempty"`

	// Nodes Node(s) allocated to the job
	Nodes *string `json:"nodes,omitempty"`

	// Partition Partition assigned to the job
	Partition *string `json:"partition,omitempty"`
	Power     *struct {
		// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
		Flags *[]interface{} `json:"flags,omitempty"`
	} `json:"power,omitempty"`
	PreSusTime      *V0044Uint64NoValStruct `json:"pre_sus_time,omitempty"`
	PreemptTime     *V0044Uint64NoValStruct `json:"preempt_time,omitempty"`
	PreemptableTime *V0044Uint64NoValStruct `json:"preemptable_time,omitempty"`

	// Prefer Feature(s) the job requested but that are not required
	Prefer              *string                   `json:"prefer,omitempty"`
	Priority            *V0044Uint32NoValStruct   `json:"priority,omitempty"`
	PriorityByPartition *V0044PriorityByPartition `json:"priority_by_partition,omitempty"`

	// Profile Profile used by the acct_gather_profile plugin
	Profile *[]V0044JobInfoProfile `json:"profile,omitempty"`

	// Qos Quality of Service assigned to the job, if pending the QOS requested
	Qos *string `json:"qos,omitempty"`

	// Reboot Node reboot requested before start
	Reboot *bool `json:"reboot,omitempty"`

	// Requeue Determines whether the job may be requeued
	Requeue *bool `json:"requeue,omitempty"`

	// RequiredNodes Comma-separated list of required nodes
	RequiredNodes *string `json:"required_nodes,omitempty"`

	// RequiredSwitches Maximum number of switches
	RequiredSwitches *int32                  `json:"required_switches,omitempty"`
	ResizeTime       *V0044Uint64NoValStruct `json:"resize_time,omitempty"`

	// RestartCnt Number of job restarts
	RestartCnt *int32 `json:"restart_cnt,omitempty"`

	// ResvName Name of reservation to use
	ResvName *string `json:"resv_name,omitempty"`

	// ScheduledNodes List of nodes scheduled to be used for the job
	ScheduledNodes *string `json:"scheduled_nodes,omitempty"`

	// SegmentSize Requested segment size
	SegmentSize *int32 `json:"segment_size,omitempty"`

	// SelinuxContext SELinux context
	SelinuxContext *string `json:"selinux_context,omitempty"`

	// Shared How the job can share resources with other jobs, if at all
	Shared *[]V0044JobInfoShared `json:"shared,omitempty"`

	// SocketsPerBoard Number of sockets per board required
	SocketsPerBoard *int32                  `json:"sockets_per_board,omitempty"`
	SocketsPerNode  *V0044Uint16NoValStruct `json:"sockets_per_node,omitempty"`

	// StandardError Path to stderr file
	StandardError *string `json:"standard_error,omitempty"`

	// StandardInput Path to stdin file
	StandardInput *string `json:"standard_input,omitempty"`

	// StandardOutput Path to stdout file
	StandardOutput *string                 `json:"standard_output,omitempty"`
	StartTime      *V0044Uint64NoValStruct `json:"start_time,omitempty"`

	// StateDescription Optional details for state_reason
	StateDescription *string `json:"state_description,omitempty"`

	// StateReason Reason for current Pending or Failed state
	StateReason *string `json:"state_reason,omitempty"`

	// StderrExpanded Job stderr with expanded fields
	StderrExpanded *string `json:"stderr_expanded,omitempty"`

	// StdinExpanded Job stdin with expanded fields
	StdinExpanded *string `json:"stdin_expanded,omitempty"`

	// StdoutExpanded Job stdout with expanded fields
	StdoutExpanded *string           `json:"stdout_expanded,omitempty"`
	StepId         *V0044SlurmStepId `json:"step_id,omitempty"`

	// SubmitLine Job submit line (e.g. 'sbatch -N3 job.sh job_arg'
	SubmitLine  *string                 `json:"submit_line,omitempty"`
	SubmitTime  *V0044Uint64NoValStruct `json:"submit_time,omitempty"`
	SuspendTime *V0044Uint64NoValStruct `json:"suspend_time,omitempty"`

	// SystemComment Arbitrary comment from slurmctld
	SystemComment  *string                 `json:"system_comment,omitempty"`
	Tasks          *V0044Uint32NoValStruct `json:"tasks,omitempty"`
	TasksPerBoard  *V0044Uint16NoValStruct `json:"tasks_per_board,omitempty"`
	TasksPerCore   *V0044Uint16NoValStruct `json:"tasks_per_core,omitempty"`
	TasksPerNode   *V0044Uint16NoValStruct `json:"tasks_per_node,omitempty"`
	TasksPerSocket *V0044Uint16NoValStruct `json:"tasks_per_socket,omitempty"`
	TasksPerTres   *V0044Uint16NoValStruct `json:"tasks_per_tres,omitempty"`

	// ThreadSpec Specialized thread count
	ThreadSpec     *int32                  `json:"thread_spec,omitempty"`
	ThreadsPerCore *V0044Uint16NoValStruct `json:"threads_per_core,omitempty"`
	TimeLimit      *V0044Uint32NoValStruct `json:"time_limit,omitempty"`
	TimeMinimum    *V0044Uint32NoValStruct `json:"time_minimum,omitempty"`

	// TresAllocStr TRES used by the job
	TresAllocStr *string `json:"tres_alloc_str,omitempty"`

	// TresBind Task to TRES binding directives
	TresBind *string `json:"tres_bind,omitempty"`

	// TresFreq TRES frequency directives
	TresFreq *string `json:"tres_freq,omitempty"`

	// TresPerJob Comma-separated list of TRES=# values to be allocated per job
	TresPerJob *string `json:"tres_per_job,omitempty"`

	// TresPerNode Comma-separated list of TRES=# values to be allocated per node
	TresPerNode *string `json:"tres_per_node,omitempty"`

	// TresPerSocket Comma-separated list of TRES=# values to be allocated per socket
	TresPerSocket *string `json:"tres_per_socket,omitempty"`

	// TresPerTask Comma-separated list of TRES=# values to be allocated per task
	TresPerTask *string `json:"tres_per_task,omitempty"`

	// TresReqStr TRES requested by the job
	TresReqStr *string `json:"tres_req_str,omitempty"`

	// UserId User ID that owns the job
	UserId *int32 `json:"user_id,omitempty"`

	// UserName User name that owns the job
	UserName *string `json:"user_name,omitempty"`

	// Wckey Workload characterization key
	Wckey *string `json:"wckey,omitempty"`
}

// V0044JobInfoFlags defines model for V0044JobInfo.Flags.
type V0044JobInfoFlags string

// V0044JobInfoJobState defines model for V0044JobInfo.JobState.
type V0044JobInfoJobState string

// V0044JobInfoMailType defines model for V0044JobInfo.MailType.
type V0044JobInfoMailType string

// V0044JobInfoProfile defines model for V0044JobInfo.Profile.
type V0044JobInfoProfile string

// V0044JobInfoShared defines model for V0044JobInfo.Shared.
type V0044JobInfoShared string

// V0044JobInfoGresDetail defines model for v0.0.44_job_info_gres_detail.
type V0044JobInfoGresDetail = []string

// V0044JobInfoMsg defines model for v0.0.44_job_info_msg.
type V0044JobInfoMsg = []V0044JobInfo

// V0044JobList defines model for v0.0.44_job_list.
type V0044JobList = []V0044Job

// V0044JobModify defines model for v0.0.44_job_modify.
type V0044JobModify struct {
	Comment *struct {
		// Administrator Arbitrary comment made by administrator
		Administrator *string `json:"administrator,omitempty"`

		// Job Arbitrary comment made by user
		Job *string `json:"job,omitempty"`

		// System Arbitrary comment from slurmctld
		System *string `json:"system,omitempty"`
	} `json:"comment,omitempty"`
	DerivedExitCode *V0044ProcessExitCodeVerbose `json:"derived_exit_code,omitempty"`

	// Extra Arbitrary string used for node filtering if extra constraints are enabled
	Extra *string `json:"extra,omitempty"`
	Tres  *struct {
		Allocated *V0044TresList `json:"allocated,omitempty"`
	} `json:"tres,omitempty"`

	// Wckey Workload characterization key
	Wckey *string `json:"wckey,omitempty"`
}

// V0044JobRes defines model for v0.0.44_job_res.
type V0044JobRes struct {
	// Cpus Number of allocated CPUs
	Cpus  int32 `json:"cpus"`
	Nodes *struct {
		// Allocation Job resources for a node
		Allocation *V0044JobResNodes `json:"allocation,omitempty"`

		// Count Number of allocated nodes
		Count *int32 `json:"count,omitempty"`

		// List Node(s) allocated to the job
		List *string `json:"list,omitempty"`

		// SelectType Node scheduling selection method
		SelectType *[]V0044JobResNodesSelectType `json:"select_type,omitempty"`

		// Whole Whether whole nodes were allocated
		Whole *bool `json:"whole,omitempty"`
	} `json:"nodes,omitempty"`

	// SelectType Scheduler consumable resource selection type
	SelectType     []V0044JobResSelectType `json:"select_type"`
	ThreadsPerCore V0044Uint16NoValStruct  `json:"threads_per_core"`
}

// V0044JobResNodesSelectType defines model for V0044JobRes.Nodes.SelectType.
type V0044JobResNodesSelectType string

// V0044JobResSelectType defines model for V0044JobRes.SelectType.
type V0044JobResSelectType string

// V0044JobResCore defines model for v0.0.44_job_res_core.
type V0044JobResCore struct {
	// Index Core index
	Index int32 `json:"index"`

	// Status Core status
	Status []V0044JobResCoreStatus `json:"status"`
}

// V0044JobResCoreStatus defines model for V0044JobResCore.Status.
type V0044JobResCoreStatus string

// V0044JobResCoreArray defines model for v0.0.44_job_res_core_array.
type V0044JobResCoreArray = []V0044JobResCore

// V0044JobResNode defines model for v0.0.44_job_res_node.
type V0044JobResNode struct {
	Cpus *struct {
		// Count Total number of CPUs assigned to job
		Count *int32 `json:"count,omitempty"`

		// Used Total number of CPUs used by job
		Used *int32 `json:"used,omitempty"`
	} `json:"cpus,omitempty"`

	// Index Node index
	Index  int32 `json:"index"`
	Memory *struct {
		// Allocated Total memory (MiB) allocated to job
		Allocated *int64 `json:"allocated,omitempty"`

		// Used Total memory (MiB) used by job
		Used *int64 `json:"used,omitempty"`
	} `json:"memory,omitempty"`

	// Name Node name
	Name    string                 `json:"name"`
	Sockets V0044JobResSocketArray `json:"sockets"`
}

// V0044JobResNodes Job resources for a node
type V0044JobResNodes = []V0044JobResNode

// V0044JobResSocket defines model for v0.0.44_job_res_socket.
type V0044JobResSocket struct {
	Cores V0044JobResCoreArray `json:"cores"`

	// Index Core index
	Index int32 `json:"index"`
}

// V0044JobResSocketArray defines model for v0.0.44_job_res_socket_array.
type V0044JobResSocketArray = []V0044JobResSocket

// V0044JobSubmitReq defines model for v0.0.44_job_submit_req.
type V0044JobSubmitReq struct {
	Job  *V0044JobDescMsg     `json:"job,omitempty"`
	Jobs *V0044JobDescMsgList `json:"jobs,omitempty"`

	// Script Deprecated; Populate script field in jobs[0] or job
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	Script *string `json:"script,omitempty"`
}

// V0044KillJobsMsg defines model for v0.0.44_kill_jobs_msg.
type V0044KillJobsMsg struct {
	// Account Filter jobs to a specific account
	Account *string `json:"account,omitempty"`

	// Flags Filter jobs according to flags
	Flags *[]V0044KillJobsMsgFlags `json:"flags,omitempty"`

	// JobName Filter jobs to a specific name
	JobName *string `json:"job_name,omitempty"`

	// JobState Filter jobs to a specific state
	JobState *[]V0044KillJobsMsgJobState `json:"job_state,omitempty"`
	Jobs     *V0044KillJobsMsgJobsArray  `json:"jobs,omitempty"`
	Nodes    *V0044HostlistString        `json:"nodes,omitempty"`

	// Partition Filter jobs to a specific partition
	Partition *string `json:"partition,omitempty"`

	// Qos Filter jobs to a specific QOS
	Qos *string `json:"qos,omitempty"`

	// Reservation Filter jobs to a specific reservation
	Reservation *string `json:"reservation,omitempty"`

	// Signal Signal to send to jobs
	Signal *string `json:"signal,omitempty"`

	// UserId Filter jobs to a specific numeric user id
	UserId *string `json:"user_id,omitempty"`

	// UserName Filter jobs to a specific user name
	UserName *string `json:"user_name,omitempty"`

	// Wckey Filter jobs to a specific wckey
	Wckey *string `json:"wckey,omitempty"`
}

// V0044KillJobsMsgFlags defines model for V0044KillJobsMsg.Flags.
type V0044KillJobsMsgFlags string

// V0044KillJobsMsgJobState defines model for V0044KillJobsMsg.JobState.
type V0044KillJobsMsgJobState string

// V0044KillJobsMsgJobsArray defines model for v0.0.44_kill_jobs_msg_jobs_array.
type V0044KillJobsMsgJobsArray = []string

// V0044KillJobsRespJob defines model for v0.0.44_kill_jobs_resp_job.
type V0044KillJobsRespJob struct {
	Error *struct {
		// Code Numeric error encountered signaling job
		Code *int32 `json:"code,omitempty"`

		// Message Error message why signaling job failed
		Message *string `json:"message,omitempty"`

		// String String error encountered signaling job
		String *string `json:"string,omitempty"`
	} `json:"error,omitempty"`
	Federation *struct {
		// Sibling Name of federation sibling (may be empty for non-federation)
		Sibling *string `json:"sibling,omitempty"`
	} `json:"federation,omitempty"`
	JobId V0044Uint32NoValStruct `json:"job_id"`

	// StepId Job or Step ID that signaling failed
	StepId string `json:"step_id"`
}

// V0044KillJobsRespMsg List of jobs signal responses
type V0044KillJobsRespMsg = []V0044KillJobsRespJob

// V0044License defines model for v0.0.44_license.
type V0044License struct {
	// Free Number of licenses currently available
	Free *int32 `json:"Free,omitempty"`

	// LastConsumed Last known number of licenses that were consumed in the license manager (Remote Only)
	LastConsumed *int32 `json:"LastConsumed,omitempty"`

	// LastDeficit Number of "missing licenses" from the cluster's perspective
	LastDeficit *int32 `json:"LastDeficit,omitempty"`

	// LastUpdate When the license information was last updated (UNIX Timestamp) (UNIX timestamp or time string recognized by Slurm (e.g., '[MM/DD[/YY]-]HH:MM[:SS]'))
	LastUpdate *int64 `json:"LastUpdate,omitempty"`

	// LicenseName Name of the license
	LicenseName *string `json:"LicenseName,omitempty"`

	// Nodes HRes nodes
	Nodes *string `json:"Nodes,omitempty"`

	// Remote Indicates whether licenses are served by the database
	Remote *bool `json:"Remote,omitempty"`

	// Reserved Number of licenses reserved
	Reserved *int32 `json:"Reserved,omitempty"`

	// Total Total number of licenses present
	Total *int32 `json:"Total,omitempty"`

	// Used Number of licenses in use
	Used *int32 `json:"Used,omitempty"`
}

// V0044Licenses defines model for v0.0.44_licenses.
type V0044Licenses = []V0044License

// V0044Node defines model for v0.0.44_node.
type V0044Node struct {
	ActiveFeatures *V0044CsvString `json:"active_features,omitempty"`

	// Address NodeAddr, used to establish a communication path
	Address *string `json:"address,omitempty"`

	// AllocCpus Total number of CPUs currently allocated for jobs
	AllocCpus *int32 `json:"alloc_cpus,omitempty"`

	// AllocIdleCpus Total number of idle CPUs
	AllocIdleCpus *int32 `json:"alloc_idle_cpus,omitempty"`

	// AllocMemory Total memory in MB currently allocated for jobs
	AllocMemory *int64 `json:"alloc_memory,omitempty"`

	// Architecture Computer architecture
	Architecture *string `json:"architecture,omitempty"`

	// Boards Number of Baseboards in nodes with a baseboard controller
	Boards   *int32                  `json:"boards,omitempty"`
	BootTime *V0044Uint64NoValStruct `json:"boot_time,omitempty"`

	// BurstbufferNetworkAddress Alternate network path to be used for sbcast network traffic
	BurstbufferNetworkAddress *string `json:"burstbuffer_network_address,omitempty"`

	// CertFlags Certmgr status flags
	CertFlags *[]V0044NodeCertFlags `json:"cert_flags,omitempty"`

	// ClusterName Cluster name (only set in federated environments)
	ClusterName *string `json:"cluster_name,omitempty"`

	// Comment Arbitrary comment
	Comment *string `json:"comment,omitempty"`

	// Cores Number of cores in a single physical processor socket
	Cores *int32 `json:"cores,omitempty"`

	// CpuBinding Default method for binding tasks to allocated CPUs
	CpuBinding *int32 `json:"cpu_binding,omitempty"`

	// CpuLoad CPU load as reported by the OS
	CpuLoad *int32 `json:"cpu_load,omitempty"`

	// Cpus Total CPUs, including cores and threads
	Cpus *int32 `json:"cpus,omitempty"`

	// EffectiveCpus Number of effective CPUs (excluding specialized CPUs)
	EffectiveCpus *int32                 `json:"effective_cpus,omitempty"`
	Energy        *V0044AcctGatherEnergy `json:"energy,omitempty"`
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	ExternalSensors *map[string]interface{} `json:"external_sensors,omitempty"`

	// Extra Arbitrary string used for node filtering if extra constraints are enabled
	Extra    *string                 `json:"extra,omitempty"`
	Features *V0044CsvString         `json:"features,omitempty"`
	FreeMem  *V0044Uint64NoValStruct `json:"free_mem,omitempty"`

	// GpuSpec CPU cores reserved for jobs that also use a GPU
	GpuSpec *string `json:"gpu_spec,omitempty"`

	// Gres Generic resources
	Gres *string `json:"gres,omitempty"`

	// GresDrained Drained generic resources
	GresDrained *string `json:"gres_drained,omitempty"`

	// GresUsed Generic resources currently in use
	GresUsed *string `json:"gres_used,omitempty"`

	// Hostname NodeHostname
	Hostname *string `json:"hostname,omitempty"`

	// InstanceId Cloud instance ID
	InstanceId *string `json:"instance_id,omitempty"`

	// InstanceType Cloud instance type
	InstanceType *string                 `json:"instance_type,omitempty"`
	LastBusy     *V0044Uint64NoValStruct `json:"last_busy,omitempty"`

	// McsLabel Multi-Category Security label
	McsLabel *string `json:"mcs_label,omitempty"`

	// Name NodeName
	Name *string `json:"name,omitempty"`

	// NextStateAfterReboot The state the node will be assigned after rebooting
	NextStateAfterReboot *[]V0044NodeNextStateAfterReboot `json:"next_state_after_reboot,omitempty"`

	// OperatingSystem Operating system reported by the node
	OperatingSystem *string `json:"operating_system,omitempty"`

	// Owner User allowed to run jobs on this node (unset if no restriction)
	Owner      *string         `json:"owner,omitempty"`
	Partitions *V0044CsvString `json:"partitions,omitempty"`

	// Port TCP port number of the slurmd
	Port *int32 `json:"port,omitempty"`
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	Power *map[string]interface{} `json:"power,omitempty"`

	// RealMemory Total memory in MB on the node
	RealMemory *int64 `json:"real_memory,omitempty"`

	// Reason Describes why the node is in a "DOWN", "DRAINED", "DRAINING", "FAILING" or "FAIL" state
	Reason          *string                 `json:"reason,omitempty"`
	ReasonChangedAt *V0044Uint64NoValStruct `json:"reason_changed_at,omitempty"`

	// ReasonSetByUser User who set the reason
	ReasonSetByUser *string `json:"reason_set_by_user,omitempty"`

	// ResCoresPerGpu Number of CPU cores per GPU restricted to GPU jobs
	ResCoresPerGpu *int32 `json:"res_cores_per_gpu,omitempty"`

	// Reservation Name of reservation containing this node
	Reservation     *string                 `json:"reservation,omitempty"`
	ResumeAfter     *V0044Uint64NoValStruct `json:"resume_after,omitempty"`
	SlurmdStartTime *V0044Uint64NoValStruct `json:"slurmd_start_time,omitempty"`

	// Sockets Number of physical processor sockets/chips on the node
	Sockets *int32 `json:"sockets,omitempty"`

	// SpecializedCores Number of cores reserved for system use
	SpecializedCores *int32 `json:"specialized_cores,omitempty"`

	// SpecializedCpus Abstract CPU IDs on this node reserved for exclusive use by slurmd and slurmstepd
	SpecializedCpus *string `json:"specialized_cpus,omitempty"`

	// SpecializedMemory Combined memory limit, in MB, for Slurm compute node daemons
	SpecializedMemory *int64 `json:"specialized_memory,omitempty"`

	// State Node state(s) applicable to this node
	State *[]V0044NodeState `json:"state,omitempty"`

	// TemporaryDisk Total size in MB of temporary disk storage in TmpFS
	TemporaryDisk *int32 `json:"temporary_disk,omitempty"`

	// Threads Number of logical threads in a single physical core
	Threads            *int32                  `json:"threads,omitempty"`
	TlsCertLastRenewal *V0044Uint64NoValStruct `json:"tls_cert_last_renewal,omitempty"`

	// Topology Topology
	Topology *string `json:"topology,omitempty"`

	// Tres Configured trackable resources
	Tres *string `json:"tres,omitempty"`

	// TresUsed Trackable resources currently allocated for jobs
	TresUsed *string `json:"tres_used,omitempty"`

	// TresWeighted Ignored. Was weighted number of billable trackable resources allocated
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	TresWeighted *float64 `json:"tres_weighted,omitempty"`

	// Version Slurmd version
	Version *string `json:"version,omitempty"`

	// Weight Weight of the node for scheduling purposes
	Weight *int32 `json:"weight,omitempty"`
}

// V0044NodeCertFlags defines model for V0044Node.CertFlags.
type V0044NodeCertFlags string

// V0044NodeNextStateAfterReboot defines model for V0044Node.NextStateAfterReboot.
type V0044NodeNextStateAfterReboot string

// V0044NodeState defines model for V0044Node.State.
type V0044NodeState string

// V0044Nodes defines model for v0.0.44_nodes.
type V0044Nodes = []V0044Node

// V0044OpenapiAccountsAddCondResp defines model for v0.0.44_openapi_accounts_add_cond_resp.
type V0044OpenapiAccountsAddCondResp struct {
	Account              *V0044AccountShort    `json:"account,omitempty"`
	AssociationCondition V0044AccountsAddCond  `json:"association_condition"`
	Errors               *V0044OpenapiErrors   `json:"errors,omitempty"`
	Meta                 *V0044OpenapiMeta     `json:"meta,omitempty"`
	Warnings             *V0044OpenapiWarnings `json:"warnings,omitempty"`
}

// V0044OpenapiAccountsAddCondRespStr defines model for v0.0.44_openapi_accounts_add_cond_resp_str.
type V0044OpenapiAccountsAddCondRespStr struct {
	// AddedAccounts added_accounts
	AddedAccounts string                `json:"added_accounts"`
	Errors        *V0044OpenapiErrors   `json:"errors,omitempty"`
	Meta          *V0044OpenapiMeta     `json:"meta,omitempty"`
	Warnings      *V0044OpenapiWarnings `json:"warnings,omitempty"`
}

// V0044OpenapiAccountsRemovedResp defines model for v0.0.44_openapi_accounts_removed_resp.
type V0044OpenapiAccountsRemovedResp struct {
	Errors          *V0044OpenapiErrors   `json:"errors,omitempty"`
	Meta            *V0044OpenapiMeta     `json:"meta,omitempty"`
	RemovedAccounts V0044StringList       `json:"removed_accounts"`
	Warnings        *V0044OpenapiWarnings `json:"warnings,omitempty"`
}

// V0044OpenapiAccountsResp defines model for v0.0.44_openapi_accounts_resp.
type V0044OpenapiAccountsResp struct {
	Accounts V0044AccountList      `json:"accounts"`
	Errors   *V0044OpenapiErrors   `json:"errors,omitempty"`
	Meta     *V0044OpenapiMeta     `json:"meta,omitempty"`
	Warnings *V0044OpenapiWarnings `json:"warnings,omitempty"`
}

// V0044OpenapiAssocsRemovedResp defines model for v0.0.44_openapi_assocs_removed_resp.
type V0044OpenapiAssocsRemovedResp struct {
	Errors              *V0044OpenapiErrors   `json:"errors,omitempty"`
	Meta                *V0044OpenapiMeta     `json:"meta,omitempty"`
	RemovedAssociations V0044StringList       `json:"removed_associations"`
	Warnings            *V0044OpenapiWarnings `json:"warnings,omitempty"`
}

// V0044OpenapiAssocsResp defines model for v0.0.44_openapi_assocs_resp.
type V0044OpenapiAssocsResp struct {
	Associations V0044AssocList        `json:"associations"`
	Errors       *V0044OpenapiErrors   `json:"errors,omitempty"`
	Meta         *V0044OpenapiMeta     `json:"meta,omitempty"`
	Warnings     *V0044OpenapiWarnings `json:"warnings,omitempty"`
}

// V0044OpenapiClustersRemovedResp defines model for v0.0.44_openapi_clusters_removed_resp.
type V0044OpenapiClustersRemovedResp struct {
	DeletedClusters V0044StringList       `json:"deleted_clusters"`
	Errors          *V0044OpenapiErrors   `json:"errors,omitempty"`
	Meta            *V0044OpenapiMeta     `json:"meta,omitempty"`
	Warnings        *V0044OpenapiWarnings `json:"warnings,omitempty"`
}

// V0044OpenapiClustersResp defines model for v0.0.44_openapi_clusters_resp.
type V0044OpenapiClustersResp struct {
	Clusters V0044ClusterRecList   `json:"clusters"`
	Errors   *V0044OpenapiErrors   `json:"errors,omitempty"`
	Meta     *V0044OpenapiMeta     `json:"meta,omitempty"`
	Warnings *V0044OpenapiWarnings `json:"warnings,omitempty"`
}

// V0044OpenapiCreateNodeReq defines model for v0.0.44_openapi_create_node_req.
type V0044OpenapiCreateNodeReq struct {
	Errors *V0044OpenapiErrors `json:"errors,omitempty"`
	Meta   *V0044OpenapiMeta   `json:"meta,omitempty"`

	// NodeConf Node configuration line
	NodeConf string                `json:"node_conf"`
	Warnings *V0044OpenapiWarnings `json:"warnings,omitempty"`
}

// V0044OpenapiDiagResp defines model for v0.0.44_openapi_diag_resp.
type V0044OpenapiDiagResp struct {
	Errors     *V0044OpenapiErrors   `json:"errors,omitempty"`
	Meta       *V0044OpenapiMeta     `json:"meta,omitempty"`
	Statistics V0044StatsMsg         `json:"statistics"`
	Warnings   *V0044OpenapiWarnings `json:"warnings,omitempty"`
}

// V0044OpenapiError defines model for v0.0.44_openapi_error.
type V0044OpenapiError struct {
	// Description Long form error description
	Description *string `json:"description,omitempty"`

	// Error Short form error description
	Error *string `json:"error,omitempty"`

	// ErrorNumber Slurm numeric error identifier
	ErrorNumber *int32 `json:"error_number,omitempty"`

	// Source Source of error or where error was first detected
	Source *string `json:"source,omitempty"`
}

// V0044OpenapiErrors defines model for v0.0.44_openapi_errors.
type V0044OpenapiErrors = []V0044OpenapiError

// V0044OpenapiInstancesResp defines model for v0.0.44_openapi_instances_resp.
type V0044OpenapiInstancesResp struct {
	Errors    *V0044OpenapiErrors   `json:"errors,omitempty"`
	Instances V0044InstanceList     `json:"instances"`
	Meta      *V0044OpenapiMeta     `json:"meta,omitempty"`
	Warnings  *V0044OpenapiWarnings `json:"warnings,omitempty"`
}

// V0044OpenapiJobAllocResp defines model for v0.0.44_openapi_job_alloc_resp.
type V0044OpenapiJobAllocResp struct {
	Errors *V0044OpenapiErrors `json:"errors,omitempty"`

	// JobId Submitted Job ID
	JobId *int32 `json:"job_id,omitempty"`

	// JobSubmitUserMsg Job submission user message
	JobSubmitUserMsg *string               `json:"job_submit_user_msg,omitempty"`
	Meta             *V0044OpenapiMeta     `json:"meta,omitempty"`
	Warnings         *V0044OpenapiWarnings `json:"warnings,omitempty"`
}

// V0044OpenapiJobInfoResp defines model for v0.0.44_openapi_job_info_resp.
type V0044OpenapiJobInfoResp struct {
	Errors       *V0044OpenapiErrors    `json:"errors,omitempty"`
	Jobs         V0044JobInfoMsg        `json:"jobs"`
	LastBackfill V0044Uint64NoValStruct `json:"last_backfill"`
	LastUpdate   V0044Uint64NoValStruct `json:"last_update"`
	Meta         *V0044OpenapiMeta      `json:"meta,omitempty"`
	Warnings     *V0044OpenapiWarnings  `json:"warnings,omitempty"`
}

// V0044OpenapiJobModifyReq defines model for v0.0.44_openapi_job_modify_req.
type V0044OpenapiJobModifyReq struct {
	Errors    *V0044OpenapiErrors    `json:"errors,omitempty"`
	JobIdList *V0044SelectedStepList `json:"job_id_list,omitempty"`
	JobRec    *V0044JobModify        `json:"job_rec,omitempty"`
	Meta      *V0044OpenapiMeta      `json:"meta,omitempty"`
	Warnings  *V0044OpenapiWarnings  `json:"warnings,omitempty"`
}

// V0044OpenapiJobModifyResp defines model for v0.0.44_openapi_job_modify_resp.
type V0044OpenapiJobModifyResp struct {
	Errors   *V0044OpenapiErrors   `json:"errors,omitempty"`
	Meta     *V0044OpenapiMeta     `json:"meta,omitempty"`
	Results  V0044StringList       `json:"results"`
	Warnings *V0044OpenapiWarnings `json:"warnings,omitempty"`
}

// V0044OpenapiJobPostResponse defines model for v0.0.44_openapi_job_post_response.
type V0044OpenapiJobPostResponse struct {
	Errors   *V0044OpenapiErrors         `json:"errors,omitempty"`
	Meta     *V0044OpenapiMeta           `json:"meta,omitempty"`
	Results  *V0044JobArrayResponseArray `json:"results,omitempty"`
	Warnings *V0044OpenapiWarnings       `json:"warnings,omitempty"`
}

// V0044OpenapiJobSubmitResponse defines model for v0.0.44_openapi_job_submit_response.
type V0044OpenapiJobSubmitResponse struct {
	Errors *V0044OpenapiErrors `json:"errors,omitempty"`

	// JobId submitted Job ID
	JobId *int32 `json:"job_id,omitempty"`

	// JobSubmitUserMsg Job submission user message
	JobSubmitUserMsg *string           `json:"job_submit_user_msg,omitempty"`
	Meta             *V0044OpenapiMeta `json:"meta,omitempty"`

	// StepId submitted Step ID
	StepId   *string               `json:"step_id,omitempty"`
	Warnings *V0044OpenapiWarnings `json:"warnings,omitempty"`
}

// V0044OpenapiKillJobResp defines model for v0.0.44_openapi_kill_job_resp.
type V0044OpenapiKillJobResp struct {
	Errors *V0044OpenapiErrors `json:"errors,omitempty"`
	Meta   *V0044OpenapiMeta   `json:"meta,omitempty"`

	// Status List of jobs signal responses
	Status   V0044KillJobsRespMsg  `json:"status"`
	Warnings *V0044OpenapiWarnings `json:"warnings,omitempty"`
}

// V0044OpenapiKillJobsResp defines model for v0.0.44_openapi_kill_jobs_resp.
type V0044OpenapiKillJobsResp struct {
	Errors *V0044OpenapiErrors `json:"errors,omitempty"`
	Meta   *V0044OpenapiMeta   `json:"meta,omitempty"`

	// Status List of jobs signal responses
	Status   V0044KillJobsRespMsg  `json:"status"`
	Warnings *V0044OpenapiWarnings `json:"warnings,omitempty"`
}

// V0044OpenapiLicensesResp defines model for v0.0.44_openapi_licenses_resp.
type V0044OpenapiLicensesResp struct {
	Errors     *V0044OpenapiErrors    `json:"errors,omitempty"`
	LastUpdate V0044Uint64NoValStruct `json:"last_update"`
	Licenses   V0044Licenses          `json:"licenses"`
	Meta       *V0044OpenapiMeta      `json:"meta,omitempty"`
	Warnings   *V0044OpenapiWarnings  `json:"warnings,omitempty"`
}

// V0044OpenapiMeta defines model for v0.0.44_openapi_meta.
type V0044OpenapiMeta struct {
	Client *struct {
		// Group Client group (if known)
		Group *string `json:"group,omitempty"`

		// Source Client source description
		Source *string `json:"source,omitempty"`

		// User Client user (if known)
		User *string `json:"user,omitempty"`
	} `json:"client,omitempty"`
	Command *V0044StringArray `json:"command,omitempty"`
	Plugin  *struct {
		// AccountingStorage Slurm accounting plugin
		AccountingStorage *string `json:"accounting_storage,omitempty"`

		// DataParser Slurm data_parser plugin
		DataParser *string `json:"data_parser,omitempty"`

		// Name Slurm plugin name (if applicable)
		Name *string `json:"name,omitempty"`

		// Type Slurm plugin type (if applicable)
		Type *string `json:"type,omitempty"`
	} `json:"plugin,omitempty"`
	Slurm *struct {
		// Cluster Slurm cluster name
		Cluster *string `json:"cluster,omitempty"`

		// Release Slurm release string
		Release *string `json:"release,omitempty"`
		Version *struct {
			// Major Slurm release major version
			Major *string `json:"major,omitempty"`

			// Micro Slurm release micro version
			Micro *string `json:"micro,omitempty"`

			// Minor Slurm release minor version
			Minor *string `json:"minor,omitempty"`
		} `json:"version,omitempty"`
	} `json:"slurm,omitempty"`
}

// V0044OpenapiNodesResp defines model for v0.0.44_openapi_nodes_resp.
type V0044OpenapiNodesResp struct {
	Errors     *V0044OpenapiErrors    `json:"errors,omitempty"`
	LastUpdate V0044Uint64NoValStruct `json:"last_update"`
	Meta       *V0044OpenapiMeta      `json:"meta,omitempty"`
	Nodes      V0044Nodes             `json:"nodes"`
	Warnings   *V0044OpenapiWarnings  `json:"warnings,omitempty"`
}

// V0044OpenapiPartitionResp defines model for v0.0.44_openapi_partition_resp.
type V0044OpenapiPartitionResp struct {
	Errors     *V0044OpenapiErrors    `json:"errors,omitempty"`
	LastUpdate V0044Uint64NoValStruct `json:"last_update"`
	Meta       *V0044OpenapiMeta      `json:"meta,omitempty"`
	Partitions V0044PartitionInfoMsg  `json:"partitions"`
	Warnings   *V0044OpenapiWarnings  `json:"warnings,omitempty"`
}

// V0044OpenapiPingArrayResp defines model for v0.0.44_openapi_ping_array_resp.
type V0044OpenapiPingArrayResp struct {
	Errors   *V0044OpenapiErrors      `json:"errors,omitempty"`
	Meta     *V0044OpenapiMeta        `json:"meta,omitempty"`
	Pings    V0044ControllerPingArray `json:"pings"`
	Warnings *V0044OpenapiWarnings    `json:"warnings,omitempty"`
}

// V0044OpenapiReservationModResp defines model for v0.0.44_openapi_reservation_mod_resp.
type V0044OpenapiReservationModResp struct {
	Errors       *V0044OpenapiErrors         `json:"errors,omitempty"`
	Meta         *V0044OpenapiMeta           `json:"meta,omitempty"`
	Reservations V0044ReservationDescMsgList `json:"reservations"`
	Warnings     *V0044OpenapiWarnings       `json:"warnings,omitempty"`
}

// V0044OpenapiReservationResp defines model for v0.0.44_openapi_reservation_resp.
type V0044OpenapiReservationResp struct {
	Errors       *V0044OpenapiErrors     `json:"errors,omitempty"`
	LastUpdate   V0044Uint64NoValStruct  `json:"last_update"`
	Meta         *V0044OpenapiMeta       `json:"meta,omitempty"`
	Reservations V0044ReservationInfoMsg `json:"reservations"`
	Warnings     *V0044OpenapiWarnings   `json:"warnings,omitempty"`
}

// V0044OpenapiResp defines model for v0.0.44_openapi_resp.
type V0044OpenapiResp struct {
	Errors   *V0044OpenapiErrors   `json:"errors,omitempty"`
	Meta     *V0044OpenapiMeta     `json:"meta,omitempty"`
	Warnings *V0044OpenapiWarnings `json:"warnings,omitempty"`
}

// V0044OpenapiSharesResp defines model for v0.0.44_openapi_shares_resp.
type V0044OpenapiSharesResp struct {
	Errors   *V0044OpenapiErrors   `json:"errors,omitempty"`
	Meta     *V0044OpenapiMeta     `json:"meta,omitempty"`
	Shares   V0044SharesRespMsg    `json:"shares"`
	Warnings *V0044OpenapiWarnings `json:"warnings,omitempty"`
}

// V0044OpenapiSlurmdbdConfigResp defines model for v0.0.44_openapi_slurmdbd_config_resp.
type V0044OpenapiSlurmdbdConfigResp struct {
	Accounts     *V0044AccountList     `json:"accounts,omitempty"`
	Associations *V0044AssocList       `json:"associations,omitempty"`
	Clusters     *V0044ClusterRecList  `json:"clusters,omitempty"`
	Errors       *V0044OpenapiErrors   `json:"errors,omitempty"`
	Instances    *V0044InstanceList    `json:"instances,omitempty"`
	Meta         *V0044OpenapiMeta     `json:"meta,omitempty"`
	Qos          *V0044QosList         `json:"qos,omitempty"`
	Tres         *V0044TresList        `json:"tres,omitempty"`
	Users        *V0044UserList        `json:"users,omitempty"`
	Warnings     *V0044OpenapiWarnings `json:"warnings,omitempty"`
	Wckeys       *V0044WckeyList       `json:"wckeys,omitempty"`
}

// V0044OpenapiSlurmdbdJobsResp defines model for v0.0.44_openapi_slurmdbd_jobs_resp.
type V0044OpenapiSlurmdbdJobsResp struct {
	Errors   *V0044OpenapiErrors   `json:"errors,omitempty"`
	Jobs     V0044JobList          `json:"jobs"`
	Meta     *V0044OpenapiMeta     `json:"meta,omitempty"`
	Warnings *V0044OpenapiWarnings `json:"warnings,omitempty"`
}

// V0044OpenapiSlurmdbdPingResp defines model for v0.0.44_openapi_slurmdbd_ping_resp.
type V0044OpenapiSlurmdbdPingResp struct {
	Errors   *V0044OpenapiErrors    `json:"errors,omitempty"`
	Meta     *V0044OpenapiMeta      `json:"meta,omitempty"`
	Pings    V0044SlurmdbdPingArray `json:"pings"`
	Warnings *V0044OpenapiWarnings  `json:"warnings,omitempty"`
}

// V0044OpenapiSlurmdbdQosRemovedResp defines model for v0.0.44_openapi_slurmdbd_qos_removed_resp.
type V0044OpenapiSlurmdbdQosRemovedResp struct {
	Errors     *V0044OpenapiErrors   `json:"errors,omitempty"`
	Meta       *V0044OpenapiMeta     `json:"meta,omitempty"`
	RemovedQos V0044StringList       `json:"removed_qos"`
	Warnings   *V0044OpenapiWarnings `json:"warnings,omitempty"`
}

// V0044OpenapiSlurmdbdQosResp defines model for v0.0.44_openapi_slurmdbd_qos_resp.
type V0044OpenapiSlurmdbdQosResp struct {
	Errors   *V0044OpenapiErrors   `json:"errors,omitempty"`
	Meta     *V0044OpenapiMeta     `json:"meta,omitempty"`
	Qos      V0044QosList          `json:"qos"`
	Warnings *V0044OpenapiWarnings `json:"warnings,omitempty"`
}

// V0044OpenapiSlurmdbdStatsResp defines model for v0.0.44_openapi_slurmdbd_stats_resp.
type V0044OpenapiSlurmdbdStatsResp struct {
	Errors     *V0044OpenapiErrors   `json:"errors,omitempty"`
	Meta       *V0044OpenapiMeta     `json:"meta,omitempty"`
	Statistics V0044StatsRec         `json:"statistics"`
	Warnings   *V0044OpenapiWarnings `json:"warnings,omitempty"`
}

// V0044OpenapiTresResp defines model for v0.0.44_openapi_tres_resp.
type V0044OpenapiTresResp struct {
	TRES     V0044TresList         `json:"TRES"`
	Errors   *V0044OpenapiErrors   `json:"errors,omitempty"`
	Meta     *V0044OpenapiMeta     `json:"meta,omitempty"`
	Warnings *V0044OpenapiWarnings `json:"warnings,omitempty"`
}

// V0044OpenapiUsersAddCondResp defines model for v0.0.44_openapi_users_add_cond_resp.
type V0044OpenapiUsersAddCondResp struct {
	AssociationCondition V0044UsersAddCond     `json:"association_condition"`
	Errors               *V0044OpenapiErrors   `json:"errors,omitempty"`
	Meta                 *V0044OpenapiMeta     `json:"meta,omitempty"`
	User                 V0044UserShort        `json:"user"`
	Warnings             *V0044OpenapiWarnings `json:"warnings,omitempty"`
}

// V0044OpenapiUsersAddCondRespStr defines model for v0.0.44_openapi_users_add_cond_resp_str.
type V0044OpenapiUsersAddCondRespStr struct {
	// AddedUsers added_users
	AddedUsers string                `json:"added_users"`
	Errors     *V0044OpenapiErrors   `json:"errors,omitempty"`
	Meta       *V0044OpenapiMeta     `json:"meta,omitempty"`
	Warnings   *V0044OpenapiWarnings `json:"warnings,omitempty"`
}

// V0044OpenapiUsersResp defines model for v0.0.44_openapi_users_resp.
type V0044OpenapiUsersResp struct {
	Errors   *V0044OpenapiErrors   `json:"errors,omitempty"`
	Meta     *V0044OpenapiMeta     `json:"meta,omitempty"`
	Users    V0044UserList         `json:"users"`
	Warnings *V0044OpenapiWarnings `json:"warnings,omitempty"`
}

// V0044OpenapiWarning defines model for v0.0.44_openapi_warning.
type V0044OpenapiWarning struct {
	// Description Long form warning description
	Description *string `json:"description,omitempty"`

	// Source Source of warning or where warning was first detected
	Source *string `json:"source,omitempty"`
}

// V0044OpenapiWarnings defines model for v0.0.44_openapi_warnings.
type V0044OpenapiWarnings = []V0044OpenapiWarning

// V0044OpenapiWckeyRemovedResp defines model for v0.0.44_openapi_wckey_removed_resp.
type V0044OpenapiWckeyRemovedResp struct {
	DeletedWckeys V0044StringList       `json:"deleted_wckeys"`
	Errors        *V0044OpenapiErrors   `json:"errors,omitempty"`
	Meta          *V0044OpenapiMeta     `json:"meta,omitempty"`
	Warnings      *V0044OpenapiWarnings `json:"warnings,omitempty"`
}

// V0044OpenapiWckeyResp defines model for v0.0.44_openapi_wckey_resp.
type V0044OpenapiWckeyResp struct {
	Errors   *V0044OpenapiErrors   `json:"errors,omitempty"`
	Meta     *V0044OpenapiMeta     `json:"meta,omitempty"`
	Warnings *V0044OpenapiWarnings `json:"warnings,omitempty"`
	Wckeys   V0044WckeyList        `json:"wckeys"`
}

// V0044PartPrio defines model for v0.0.44_part_prio.
type V0044PartPrio struct {
	// Partition Partition name
	Partition *string `json:"partition,omitempty"`

	// Priority Prospective job priority if it runs in this partition
	Priority *int32 `json:"priority,omitempty"`
}

// V0044PartitionInfo defines model for v0.0.44_partition_info.
type V0044PartitionInfo struct {
	Accounts *struct {
		// Allowed AllowAccounts - Comma-separated list of accounts which may execute jobs in the partition
		Allowed *string `json:"allowed,omitempty"`

		// Deny DenyAccounts - Comma-separated list of accounts which may not execute jobs in the partition
		Deny *string `json:"deny,omitempty"`
	} `json:"accounts,omitempty"`

	// Alternate Alternate - Partition name of alternate partition to be used if the state of this partition is DRAIN or INACTIVE
	Alternate *string `json:"alternate,omitempty"`

	// Cluster Cluster name
	Cluster *string `json:"cluster,omitempty"`
	Cpus    *struct {
		// TaskBinding CpuBind - Default method controlling how tasks are bound to allocated resources
		TaskBinding *int32 `json:"task_binding,omitempty"`

		// Total TotalCPUs - Number of CPUs available in this partition
		Total *int32 `json:"total,omitempty"`
	} `json:"cpus,omitempty"`
	Defaults *struct {
		// Job JobDefaults - Comma-separated list of job default values (this field is only used to set new defaults)
		Job *string `json:"job,omitempty"`

		// MemoryPerCpu Raw value for DefMemPerCPU or DefMemPerNode
		MemoryPerCpu           *int64                  `json:"memory_per_cpu,omitempty"`
		PartitionMemoryPerCpu  *V0044Uint64NoValStruct `json:"partition_memory_per_cpu,omitempty"`
		PartitionMemoryPerNode *V0044Uint64NoValStruct `json:"partition_memory_per_node,omitempty"`
		Time                   *V0044Uint32NoValStruct `json:"time,omitempty"`
	} `json:"defaults,omitempty"`

	// GraceTime GraceTime - Grace time in seconds to be extended to a job which has been selected for preemption
	GraceTime *int32 `json:"grace_time,omitempty"`
	Groups    *struct {
		// Allowed AllowGroups - Comma-separated list of group names which may execute jobs in this partition
		Allowed *string `json:"allowed,omitempty"`
	} `json:"groups,omitempty"`
	Maximums *struct {
		CpusPerNode   *V0044Uint32NoValStruct `json:"cpus_per_node,omitempty"`
		CpusPerSocket *V0044Uint32NoValStruct `json:"cpus_per_socket,omitempty"`

		// MemoryPerCpu Raw value for MaxMemPerCPU or MaxMemPerNode
		MemoryPerCpu  *int64                  `json:"memory_per_cpu,omitempty"`
		Nodes         *V0044Uint32NoValStruct `json:"nodes,omitempty"`
		OverTimeLimit *V0044Uint16NoValStruct `json:"over_time_limit,omitempty"`
		Oversubscribe *struct {
			// Flags Flags applicable to the OverSubscribe setting
			Flags *[]V0044PartitionInfoMaximumsOversubscribeFlags `json:"flags,omitempty"`

			// Jobs Maximum number of jobs allowed to oversubscribe resources
			Jobs *int32 `json:"jobs,omitempty"`
		} `json:"oversubscribe,omitempty"`
		PartitionMemoryPerCpu  *V0044Uint64NoValStruct `json:"partition_memory_per_cpu,omitempty"`
		PartitionMemoryPerNode *V0044Uint64NoValStruct `json:"partition_memory_per_node,omitempty"`

		// Shares OverSubscribe - Controls the ability of the partition to execute more than one job at a time on each resource
		Shares *int32                  `json:"shares,omitempty"`
		Time   *V0044Uint32NoValStruct `json:"time,omitempty"`
	} `json:"maximums,omitempty"`
	Minimums *struct {
		// Nodes MinNodes - Minimum count of nodes which may be allocated to any single job
		Nodes *int32 `json:"nodes,omitempty"`
	} `json:"minimums,omitempty"`

	// Name PartitionName - Name by which the partition may be referenced
	Name *string `json:"name,omitempty"`

	// NodeSets NodeSets - Comma-separated list of nodesets which are associated with this partition
	NodeSets *string `json:"node_sets,omitempty"`
	Nodes    *struct {
		// AllowedAllocation AllocNodes - Comma-separated list of nodes from which users can submit jobs in the partition
		AllowedAllocation *string `json:"allowed_allocation,omitempty"`

		// Configured Nodes - Comma-separated list of nodes which are associated with this partition
		Configured *string `json:"configured,omitempty"`

		// Total TotalNodes - Number of nodes available in this partition
		Total *int32 `json:"total,omitempty"`
	} `json:"nodes,omitempty"`
	Partition *struct {
		// State Current state(s)
		State *[]V0044PartitionInfoPartitionState `json:"state,omitempty"`
	} `json:"partition,omitempty"`
	Priority *struct {
		// JobFactor PriorityJobFactor - Partition factor used by priority/multifactor plugin in calculating job priority
		JobFactor *int32 `json:"job_factor,omitempty"`

		// Tier PriorityTier - Controls the order in which the scheduler evaluates jobs from different partitions
		Tier *int32 `json:"tier,omitempty"`
	} `json:"priority,omitempty"`
	Qos *struct {
		// Allowed AllowQOS - Comma-separated list of Qos which may execute jobs in the partition
		Allowed *string `json:"allowed,omitempty"`

		// Assigned QOS - QOS name containing limits that will apply to all jobs in this partition
		Assigned *string `json:"assigned,omitempty"`

		// Deny DenyQOS - Comma-separated list of Qos which may not execute jobs in the partition
		Deny *string `json:"deny,omitempty"`
	} `json:"qos,omitempty"`

	// SelectType Scheduler consumable resource selection type
	SelectType  *[]V0044PartitionInfoSelectType `json:"select_type,omitempty"`
	SuspendTime *V0044Uint32NoValStruct         `json:"suspend_time,omitempty"`
	Timeouts    *struct {
		Resume  *V0044Uint16NoValStruct `json:"resume,omitempty"`
		Suspend *V0044Uint16NoValStruct `json:"suspend,omitempty"`
	} `json:"timeouts,omitempty"`

	// Topology Topology - Name of the topology, defined in topology.yaml, used by jobs in this partition
	Topology *string `json:"topology,omitempty"`
	Tres     *struct {
		// BillingWeights TRESBillingWeights - Billing weights of each tracked TRES type that will be used in calculating the usage of a job
		BillingWeights *string `json:"billing_weights,omitempty"`

		// Configured TRES - Number of each applicable TRES type available in this partition
		Configured *string `json:"configured,omitempty"`
	} `json:"tres,omitempty"`
}

// V0044PartitionInfoMaximumsOversubscribeFlags defines model for V0044PartitionInfo.Maximums.Oversubscribe.Flags.
type V0044PartitionInfoMaximumsOversubscribeFlags string

// V0044PartitionInfoPartitionState defines model for V0044PartitionInfo.Partition.State.
type V0044PartitionInfoPartitionState string

// V0044PartitionInfoSelectType defines model for V0044PartitionInfo.SelectType.
type V0044PartitionInfoSelectType string

// V0044PartitionInfoMsg defines model for v0.0.44_partition_info_msg.
type V0044PartitionInfoMsg = []V0044PartitionInfo

// V0044PriorityByPartition defines model for v0.0.44_priority_by_partition.
type V0044PriorityByPartition = []V0044PartPrio

// V0044ProcessExitCodeVerbose defines model for v0.0.44_process_exit_code_verbose.
type V0044ProcessExitCodeVerbose struct {
	ReturnCode *V0044Uint32NoValStruct `json:"return_code,omitempty"`
	Signal     *struct {
		Id *V0044Uint16NoValStruct `json:"id,omitempty"`

		// Name Signal sent to process (name)
		Name *string `json:"name,omitempty"`
	} `json:"signal,omitempty"`

	// Status Status given by return code
	Status *[]V0044ProcessExitCodeVerboseStatus `json:"status,omitempty"`
}

// V0044ProcessExitCodeVerboseStatus defines model for V0044ProcessExitCodeVerbose.Status.
type V0044ProcessExitCodeVerboseStatus string

// V0044Qos defines model for v0.0.44_qos.
type V0044Qos struct {
	// Description Arbitrary description
	Description *string `json:"description,omitempty"`

	// Flags Flags, to avoid modifying current values specify NOT_SET
	Flags *[]V0044QosFlags `json:"flags,omitempty"`

	// Id Unique ID
	Id     *int32 `json:"id,omitempty"`
	Limits *struct {
		Factor *V0044Float64NoValStruct `json:"factor,omitempty"`

		// GraceTime GraceTime - Preemption grace time in seconds to be extended to a job which has been selected for preemption
		GraceTime *int32 `json:"grace_time,omitempty"`
		Max       *struct {
			Accruing *struct {
				Per *struct {
					Account *V0044Uint32NoValStruct `json:"account,omitempty"`
					User    *V0044Uint32NoValStruct `json:"user,omitempty"`
				} `json:"per,omitempty"`
			} `json:"accruing,omitempty"`
			ActiveJobs *struct {
				Accruing *V0044Uint32NoValStruct `json:"accruing,omitempty"`
				Count    *V0044Uint32NoValStruct `json:"count,omitempty"`
			} `json:"active_jobs,omitempty"`
			Jobs *struct {
				ActiveJobs *struct {
					Per *struct {
						Account *V0044Uint32NoValStruct `json:"account,omitempty"`
						User    *V0044Uint32NoValStruct `json:"user,omitempty"`
					} `json:"per,omitempty"`
				} `json:"active_jobs,omitempty"`
				Count *V0044Uint32NoValStruct `json:"count,omitempty"`
				Per   *struct {
					Account *V0044Uint32NoValStruct `json:"account,omitempty"`
					User    *V0044Uint32NoValStruct `json:"user,omitempty"`
				} `json:"per,omitempty"`
			} `json:"jobs,omitempty"`
			Tres *struct {
				Minutes *struct {
					Per *struct {
						Account *V0044TresList `json:"account,omitempty"`
						Job     *V0044TresList `json:"job,omitempty"`
						Qos     *V0044TresList `json:"qos,omitempty"`
						User    *V0044TresList `json:"user,omitempty"`
					} `json:"per,omitempty"`
					Total *V0044TresList `json:"total,omitempty"`
				} `json:"minutes,omitempty"`
				Per *struct {
					Account *V0044TresList `json:"account,omitempty"`
					Job     *V0044TresList `json:"job,omitempty"`
					Node    *V0044TresList `json:"node,omitempty"`
					User    *V0044TresList `json:"user,omitempty"`
				} `json:"per,omitempty"`
				Total *V0044TresList `json:"total,omitempty"`
			} `json:"tres,omitempty"`
			WallClock *struct {
				Per *struct {
					Job *V0044Uint32NoValStruct `json:"job,omitempty"`
					Qos *V0044Uint32NoValStruct `json:"qos,omitempty"`
				} `json:"per,omitempty"`
			} `json:"wall_clock,omitempty"`
		} `json:"max,omitempty"`
		Min *struct {
			PriorityThreshold *V0044Uint32NoValStruct `json:"priority_threshold,omitempty"`
			Tres              *struct {
				Per *struct {
					Job *V0044TresList `json:"job,omitempty"`
				} `json:"per,omitempty"`
			} `json:"tres,omitempty"`
		} `json:"min,omitempty"`
	} `json:"limits,omitempty"`

	// Name Name
	Name    *string `json:"name,omitempty"`
	Preempt *struct {
		ExemptTime *V0044Uint32NoValStruct `json:"exempt_time,omitempty"`
		List       *V0044QosPreemptList    `json:"list,omitempty"`

		// Mode PreemptMode - Mechanism used to preempt jobs or enable gang scheduling
		Mode *[]V0044QosPreemptMode `json:"mode,omitempty"`
	} `json:"preempt,omitempty"`
	Priority       *V0044Uint32NoValStruct  `json:"priority,omitempty"`
	UsageFactor    *V0044Float64NoValStruct `json:"usage_factor,omitempty"`
	UsageThreshold *V0044Float64NoValStruct `json:"usage_threshold,omitempty"`
}

// V0044QosFlags defines model for V0044Qos.Flags.
type V0044QosFlags string

// V0044QosPreemptMode defines model for V0044Qos.Preempt.Mode.
type V0044QosPreemptMode string

// V0044QosList defines model for v0.0.44_qos_list.
type V0044QosList = []V0044Qos

// V0044QosPreemptList defines model for v0.0.44_qos_preempt_list.
type V0044QosPreemptList = []string

// V0044QosStringIdList List of QOS names
type V0044QosStringIdList = []string

// V0044ReservationCoreSpec defines model for v0.0.44_reservation_core_spec.
type V0044ReservationCoreSpec struct {
	// Core IDs of reserved cores
	Core *string `json:"core,omitempty"`

	// Node Name of reserved node
	Node *string `json:"node,omitempty"`
}

// V0044ReservationDescMsg defines model for v0.0.44_reservation_desc_msg.
type V0044ReservationDescMsg struct {
	Accounts *V0044CsvString `json:"accounts,omitempty"`

	// BurstBuffer BurstBuffer
	BurstBuffer *string `json:"burst_buffer,omitempty"`

	// Comment Arbitrary string
	Comment   *string                 `json:"comment,omitempty"`
	CoreCount *V0044Uint32NoValStruct `json:"core_count,omitempty"`
	Duration  *V0044Uint32NoValStruct `json:"duration,omitempty"`
	EndTime   *V0044Uint64NoValStruct `json:"end_time,omitempty"`

	// Features Requested node features. Multiple values may be "&" separated if all features are required (AND operation) or separated by "|" if any of the specified features are required (OR operation). Parenthesis are also supported for features to be ANDed together with counts of nodes having the specified features.
	Features *string `json:"features,omitempty"`

	// Flags Flags associated with this reservation. Note, to remove flags use "NO_" prefixed flag excluding NO_HOLD_JOBS_AFTER_END
	Flags         *[]V0044ReservationDescMsgFlags `json:"flags,omitempty"`
	Groups        *V0044CsvString                 `json:"groups,omitempty"`
	Licenses      *V0044CsvString                 `json:"licenses,omitempty"`
	MaxStartDelay *V0044Uint32NoValStruct         `json:"max_start_delay,omitempty"`

	// Name ReservationName
	Name      *string                 `json:"name,omitempty"`
	NodeCount *V0044Uint32NoValStruct `json:"node_count,omitempty"`
	NodeList  *V0044HostlistString    `json:"node_list,omitempty"`

	// Partition Partition used to reserve nodes from. This will attempt to allocate all nodes in the specified partition unless you request fewer resources than are available with core_cnt, node_cnt or tres.
	Partition      *string `json:"partition,omitempty"`
	PurgeCompleted *struct {
		Time *V0044Uint32NoValStruct `json:"time,omitempty"`
	} `json:"purge_completed,omitempty"`
	StartTime *V0044Uint64NoValStruct `json:"start_time,omitempty"`
	Tres      *V0044TresList          `json:"tres,omitempty"`
	Users     *V0044CsvString         `json:"users,omitempty"`
}

// V0044ReservationDescMsgFlags defines model for V0044ReservationDescMsg.Flags.
type V0044ReservationDescMsgFlags string

// V0044ReservationDescMsgList defines model for v0.0.44_reservation_desc_msg_list.
type V0044ReservationDescMsgList = []V0044ReservationDescMsg

// V0044ReservationInfo defines model for v0.0.44_reservation_info.
type V0044ReservationInfo struct {
	// Accounts Comma-separated list of permitted accounts
	Accounts *string `json:"accounts,omitempty"`

	// BurstBuffer BurstBuffer - Burst buffer resources reserved
	BurstBuffer *string `json:"burst_buffer,omitempty"`

	// CoreCount CoreCnt - Number of cores reserved
	CoreCount           *int32                        `json:"core_count,omitempty"`
	CoreSpecializations *V0044ReservationInfoCoreSpec `json:"core_specializations,omitempty"`
	EndTime             *V0044Uint64NoValStruct       `json:"end_time,omitempty"`

	// Features Features - Expression describing the reservation's required node features
	Features *string `json:"features,omitempty"`

	// Flags Flags associated with this reservation
	Flags *[]V0044ReservationInfoFlags `json:"flags,omitempty"`

	// Groups Groups - Comma-separated list of permitted groups
	Groups *string `json:"groups,omitempty"`

	// Licenses Licenses - Comma-separated list of licenses reserved
	Licenses *string `json:"licenses,omitempty"`

	// MaxStartDelay MaxStartDelay - Maximum time an eligible job not requesting this reservation can delay a job requesting it in seconds
	MaxStartDelay *int32 `json:"max_start_delay,omitempty"`

	// Name ReservationName - Name of the reservation
	Name *string `json:"name,omitempty"`

	// NodeCount NodeCnt - Number of nodes reserved
	NodeCount *int32 `json:"node_count,omitempty"`

	// NodeList Nodes - Comma-separated list of node names and/or node ranges reserved
	NodeList *string `json:"node_list,omitempty"`

	// Partition PartitionName - Partition used to reserve nodes from
	Partition      *string `json:"partition,omitempty"`
	PurgeCompleted *struct {
		Time *V0044Uint32NoValStruct `json:"time,omitempty"`
	} `json:"purge_completed,omitempty"`
	StartTime *V0044Uint64NoValStruct `json:"start_time,omitempty"`

	// Tres Comma-separated list of required TRES
	Tres *string `json:"tres,omitempty"`

	// Users Comma-separated list of permitted users
	Users *string                 `json:"users,omitempty"`
	Watts *V0044Uint32NoValStruct `json:"watts,omitempty"`
}

// V0044ReservationInfoFlags defines model for V0044ReservationInfo.Flags.
type V0044ReservationInfoFlags string

// V0044ReservationInfoCoreSpec defines model for v0.0.44_reservation_info_core_spec.
type V0044ReservationInfoCoreSpec = []V0044ReservationCoreSpec

// V0044ReservationInfoMsg defines model for v0.0.44_reservation_info_msg.
type V0044ReservationInfoMsg = []V0044ReservationInfo

// V0044ReservationModReq defines model for v0.0.44_reservation_mod_req.
type V0044ReservationModReq struct {
	Reservations *V0044ReservationDescMsgList `json:"reservations,omitempty"`
}

// V0044RollupStats defines model for v0.0.44_rollup_stats.
type V0044RollupStats struct {
	Daily *struct {
		// Count Number of daily rollups since last_run
		Count    *int32 `json:"count,omitempty"`
		Duration *struct {
			// Last Total time spent doing daily daily rollup (seconds)
			Last *int64 `json:"last,omitempty"`

			// Max Longest daily rollup time (seconds)
			Max *int64 `json:"max,omitempty"`

			// Time Total time spent doing daily rollups (seconds)
			Time *int64 `json:"time,omitempty"`
		} `json:"duration,omitempty"`

		// LastRun Last time daily rollup ran (UNIX timestamp) (UNIX timestamp or time string recognized by Slurm (e.g., '[MM/DD[/YY]-]HH:MM[:SS]'))
		LastRun *int64 `json:"last_run,omitempty"`
	} `json:"daily,omitempty"`
	Hourly *struct {
		// Count Number of hourly rollups since last_run
		Count    *int32 `json:"count,omitempty"`
		Duration *struct {
			// Last Total time spent doing last daily rollup (seconds)
			Last *int64 `json:"last,omitempty"`

			// Max Longest hourly rollup time (seconds)
			Max *int64 `json:"max,omitempty"`

			// Time Total time spent doing hourly rollups (seconds)
			Time *int64 `json:"time,omitempty"`
		} `json:"duration,omitempty"`

		// LastRun Last time hourly rollup ran (UNIX timestamp) (UNIX timestamp or time string recognized by Slurm (e.g., '[MM/DD[/YY]-]HH:MM[:SS]'))
		LastRun *int64 `json:"last_run,omitempty"`
	} `json:"hourly,omitempty"`
	Monthly *struct {
		// Count Number of monthly rollups since last_run
		Count    *int32 `json:"count,omitempty"`
		Duration *struct {
			// Last Total time spent doing monthly daily rollup (seconds)
			Last *int64 `json:"last,omitempty"`

			// Max Longest monthly rollup time (seconds)
			Max *int64 `json:"max,omitempty"`

			// Time Total time spent doing monthly rollups (seconds)
			Time *int64 `json:"time,omitempty"`
		} `json:"duration,omitempty"`

		// LastRun Last time monthly rollup ran (UNIX timestamp) (UNIX timestamp or time string recognized by Slurm (e.g., '[MM/DD[/YY]-]HH:MM[:SS]'))
		LastRun *int64 `json:"last_run,omitempty"`
	} `json:"monthly,omitempty"`
}

// V0044ScheduleExitFields defines model for v0.0.44_schedule_exit_fields.
type V0044ScheduleExitFields struct {
	// DefaultQueueDepth Reached number of jobs allowed to be tested
	DefaultQueueDepth *int32 `json:"default_queue_depth,omitempty"`

	// EndJobQueue Reached end of queue
	EndJobQueue *int32 `json:"end_job_queue,omitempty"`

	// Licenses Blocked on licenses
	Licenses *int32 `json:"licenses,omitempty"`

	// MaxJobStart Reached number of jobs allowed to start
	MaxJobStart *int32 `json:"max_job_start,omitempty"`

	// MaxRpcCnt Reached RPC limit
	MaxRpcCnt *int32 `json:"max_rpc_cnt,omitempty"`

	// MaxSchedTime Reached maximum allowed scheduler time
	MaxSchedTime *int32 `json:"max_sched_time,omitempty"`
}

// V0044SelectedStepList defines model for v0.0.44_selected_step_list.
type V0044SelectedStepList = []string

// V0044SharesFloat128Tres defines model for v0.0.44_shares_float128_tres.
type V0044SharesFloat128Tres struct {
	// Name TRES name
	Name *string `json:"name,omitempty"`

	// Value TRES value
	Value *float32 `json:"value,omitempty"`
}

// V0044SharesFloat128TresList defines model for v0.0.44_shares_float128_tres_list.
type V0044SharesFloat128TresList = []V0044SharesFloat128Tres

// V0044SharesRespMsg defines model for v0.0.44_shares_resp_msg.
type V0044SharesRespMsg struct {
	Shares *V0044AssocSharesObjList `json:"shares,omitempty"`

	// TotalShares Total number of shares
	TotalShares *int64 `json:"total_shares,omitempty"`
}

// V0044SharesUint64Tres defines model for v0.0.44_shares_uint64_tres.
type V0044SharesUint64Tres struct {
	// Name TRES name
	Name  *string                 `json:"name,omitempty"`
	Value *V0044Uint64NoValStruct `json:"value,omitempty"`
}

// V0044SharesUint64TresList defines model for v0.0.44_shares_uint64_tres_list.
type V0044SharesUint64TresList = []V0044SharesUint64Tres

// V0044SlurmStepId defines model for v0.0.44_slurm_step_id.
type V0044SlurmStepId struct {
	JobId *V0044Uint32NoValStruct `json:"job_id,omitempty"`

	// Sluid SLUID (Slurm Lexicographically-sortable Unique ID)
	Sluid            *string                 `json:"sluid,omitempty"`
	StepHetComponent *V0044Uint32NoValStruct `json:"step_het_component,omitempty"`

	// StepId Job step ID
	StepId *string `json:"step_id,omitempty"`
}

// V0044SlurmdbdPing defines model for v0.0.44_slurmdbd_ping.
type V0044SlurmdbdPing struct {
	// Hostname Target for ping
	Hostname string `json:"hostname"`

	// Latency Number of microseconds it took to successfully ping or timeout
	Latency int64 `json:"latency"`

	// Primary Is responding slurmdbd the primary controller (Is responding slurmctld the primary controller)
	Primary bool `json:"primary"`

	// Responding If ping RPC responded with pong from slurmdbd
	Responding bool `json:"responding"`
}

// V0044SlurmdbdPingArray defines model for v0.0.44_slurmdbd_ping_array.
type V0044SlurmdbdPingArray = []V0044SlurmdbdPing

// V0044StatsMsg defines model for v0.0.44_stats_msg.
type V0044StatsMsg struct {
	// AgentCount Number of agent threads
	AgentCount *int32 `json:"agent_count,omitempty"`

	// AgentQueueSize Number of enqueued outgoing RPC requests in an internal retry list
	AgentQueueSize *int32 `json:"agent_queue_size,omitempty"`

	// AgentThreadCount Total number of active threads created by all agent threads
	AgentThreadCount *int32 `json:"agent_thread_count,omitempty"`

	// BfActive Backfill scheduler currently running
	BfActive *bool `json:"bf_active,omitempty"`

	// BfBackfilledHetJobs Number of heterogeneous job components started through backfilling since last Slurm start
	BfBackfilledHetJobs *int32 `json:"bf_backfilled_het_jobs,omitempty"`

	// BfBackfilledJobs Number of jobs started through backfilling since last slurm start
	BfBackfilledJobs *int32 `json:"bf_backfilled_jobs,omitempty"`

	// BfCycleCounter Number of backfill scheduling cycles since last reset
	BfCycleCounter *int32 `json:"bf_cycle_counter,omitempty"`

	// BfCycleLast Execution time in microseconds of last backfill scheduling cycle
	BfCycleLast *int32 `json:"bf_cycle_last,omitempty"`

	// BfCycleMax Execution time in microseconds of longest backfill scheduling cycle
	BfCycleMax *int32 `json:"bf_cycle_max,omitempty"`

	// BfCycleMean Mean time in microseconds of backfilling scheduling cycles since last reset
	BfCycleMean *int64 `json:"bf_cycle_mean,omitempty"`

	// BfCycleSum Total time in microseconds of backfilling scheduling cycles since last reset
	BfCycleSum *int64 `json:"bf_cycle_sum,omitempty"`

	// BfDepthMean Mean number of eligible to run jobs processed during all backfilling scheduling cycles since last reset
	BfDepthMean *int64 `json:"bf_depth_mean,omitempty"`

	// BfDepthMeanTry The subset of Depth Mean that the backfill scheduler attempted to schedule
	BfDepthMeanTry *int64 `json:"bf_depth_mean_try,omitempty"`

	// BfDepthSum Total number of jobs processed during all backfilling scheduling cycles since last reset
	BfDepthSum *int32 `json:"bf_depth_sum,omitempty"`

	// BfDepthTrySum Subset of bf_depth_sum that the backfill scheduler attempted to schedule
	BfDepthTrySum *int32             `json:"bf_depth_try_sum,omitempty"`
	BfExit        *V0044BfExitFields `json:"bf_exit,omitempty"`

	// BfLastBackfilledJobs Number of jobs started through backfilling since last reset
	BfLastBackfilledJobs *int32 `json:"bf_last_backfilled_jobs,omitempty"`

	// BfLastDepth Number of processed jobs during last backfilling scheduling cycle
	BfLastDepth *int32 `json:"bf_last_depth,omitempty"`

	// BfLastDepthTry Number of processed jobs during last backfilling scheduling cycle that had a chance to start using available resources
	BfLastDepthTry *int32 `json:"bf_last_depth_try,omitempty"`

	// BfQueueLen Number of jobs pending to be processed by backfilling algorithm
	BfQueueLen *int32 `json:"bf_queue_len,omitempty"`

	// BfQueueLenMean Mean number of jobs pending to be processed by backfilling algorithm
	BfQueueLenMean *int64 `json:"bf_queue_len_mean,omitempty"`

	// BfQueueLenSum Total number of jobs pending to be processed by backfilling algorithm since last reset
	BfQueueLenSum *int32 `json:"bf_queue_len_sum,omitempty"`

	// BfTableSize Number of different time slots tested by the backfill scheduler in its last iteration
	BfTableSize *int32 `json:"bf_table_size,omitempty"`

	// BfTableSizeMean Mean number of different time slots tested by the backfill scheduler
	BfTableSizeMean *int64 `json:"bf_table_size_mean,omitempty"`

	// BfTableSizeSum Total number of different time slots tested by the backfill scheduler
	BfTableSizeSum  *int32                  `json:"bf_table_size_sum,omitempty"`
	BfWhenLastCycle *V0044Uint64NoValStruct `json:"bf_when_last_cycle,omitempty"`

	// DbdAgentQueueSize Number of messages for SlurmDBD that are queued
	DbdAgentQueueSize *int32 `json:"dbd_agent_queue_size,omitempty"`

	// GettimeofdayLatency Latency of 1000 calls to the gettimeofday() syscall in microseconds, as measured at controller startup
	GettimeofdayLatency *int32                  `json:"gettimeofday_latency,omitempty"`
	JobStatesTs         *V0044Uint64NoValStruct `json:"job_states_ts,omitempty"`

	// JobsCanceled Number of jobs canceled since the last reset
	JobsCanceled *int32 `json:"jobs_canceled,omitempty"`

	// JobsCompleted Number of jobs completed since last reset
	JobsCompleted *int32 `json:"jobs_completed,omitempty"`

	// JobsFailed Number of jobs failed due to slurmd or other internal issues since last reset
	JobsFailed *int32 `json:"jobs_failed,omitempty"`

	// JobsPending Number of jobs pending at the time of listed in job_state_ts
	JobsPending *int32 `json:"jobs_pending,omitempty"`

	// JobsRunning Number of jobs running at the time of listed in job_state_ts
	JobsRunning *int32 `json:"jobs_running,omitempty"`

	// JobsStarted Number of jobs started since last reset
	JobsStarted *int32 `json:"jobs_started,omitempty"`

	// JobsSubmitted Number of jobs submitted since last reset
	JobsSubmitted *int32 `json:"jobs_submitted,omitempty"`

	// PartsPacked Zero if only RPC statistic included
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	PartsPacked *int32 `json:"parts_packed,omitempty"`

	// PendingRpcs Pending RPCs
	PendingRpcs *V0044StatsMsgRpcsQueue `json:"pending_rpcs,omitempty"`

	// PendingRpcsByHostlist Pending RPCs by hostlist
	PendingRpcsByHostlist *V0044StatsMsgRpcsDump  `json:"pending_rpcs_by_hostlist,omitempty"`
	ReqTime               *V0044Uint64NoValStruct `json:"req_time,omitempty"`
	ReqTimeStart          *V0044Uint64NoValStruct `json:"req_time_start,omitempty"`

	// RpcsByMessageType RPCs by type
	RpcsByMessageType *V0044StatsMsgRpcsByType `json:"rpcs_by_message_type,omitempty"`

	// RpcsByUser RPCs by user
	RpcsByUser *V0044StatsMsgRpcsByUser `json:"rpcs_by_user,omitempty"`

	// ScheduleCycleDepth Total number of jobs processed in scheduling cycles
	ScheduleCycleDepth *int32 `json:"schedule_cycle_depth,omitempty"`

	// ScheduleCycleLast Time in microseconds for last scheduling cycle
	ScheduleCycleLast *int32 `json:"schedule_cycle_last,omitempty"`

	// ScheduleCycleMax Max time of any scheduling cycle in microseconds since last reset
	ScheduleCycleMax *int32 `json:"schedule_cycle_max,omitempty"`

	// ScheduleCycleMean Mean time in microseconds for all scheduling cycles since last reset
	ScheduleCycleMean *int64 `json:"schedule_cycle_mean,omitempty"`

	// ScheduleCycleMeanDepth Mean of the number of jobs processed in a scheduling cycle
	ScheduleCycleMeanDepth *int64 `json:"schedule_cycle_mean_depth,omitempty"`

	// ScheduleCyclePerMinute Number of scheduling executions per minute
	ScheduleCyclePerMinute *int64 `json:"schedule_cycle_per_minute,omitempty"`

	// ScheduleCycleSum Total run time in microseconds for all scheduling cycles since last reset
	ScheduleCycleSum *int64 `json:"schedule_cycle_sum,omitempty"`

	// ScheduleCycleTotal Number of scheduling cycles since last reset
	ScheduleCycleTotal *int32                   `json:"schedule_cycle_total,omitempty"`
	ScheduleExit       *V0044ScheduleExitFields `json:"schedule_exit,omitempty"`

	// ScheduleQueueLength Number of jobs pending in queue
	ScheduleQueueLength *int32 `json:"schedule_queue_length,omitempty"`

	// ServerThreadCount Number of current active slurmctld threads
	ServerThreadCount *int32 `json:"server_thread_count,omitempty"`
}

// V0044StatsMsgRpcDump defines model for v0.0.44_stats_msg_rpc_dump.
type V0044StatsMsgRpcDump struct {
	Count V0044HostlistString `json:"count"`

	// MessageType Message type as string (Slurm RPC message type)
	MessageType string `json:"message_type"`

	// TypeId Message type as integer
	TypeId int32 `json:"type_id"`
}

// V0044StatsMsgRpcQueue defines model for v0.0.44_stats_msg_rpc_queue.
type V0044StatsMsgRpcQueue struct {
	// Count Number of pending RPCs queued
	Count int32 `json:"count"`

	// MessageType Message type as string (Slurm RPC message type)
	MessageType string `json:"message_type"`

	// TypeId Message type as integer
	TypeId int32 `json:"type_id"`
}

// V0044StatsMsgRpcType defines model for v0.0.44_stats_msg_rpc_type.
type V0044StatsMsgRpcType struct {
	AverageTime V0044Uint64NoValStruct `json:"average_time"`

	// Count Number of RPCs received
	Count int32 `json:"count"`

	// CycleLast Number of RPCs processed within the last RPC queue cycle
	CycleLast int32 `json:"cycle_last"`

	// CycleMax Maximum number of RPCs processed within a RPC queue cycle since start
	CycleMax int32 `json:"cycle_max"`

	// Dropped Number of RPCs dropped
	Dropped int64 `json:"dropped"`

	// MessageType Message type as string (Slurm RPC message type)
	MessageType string `json:"message_type"`

	// Queued Number of RPCs queued
	Queued int32 `json:"queued"`

	// TotalTime Total time spent processing RPC in seconds
	TotalTime int64 `json:"total_time"`

	// TypeId Message type as integer
	TypeId int32 `json:"type_id"`
}

// V0044StatsMsgRpcUser defines model for v0.0.44_stats_msg_rpc_user.
type V0044StatsMsgRpcUser struct {
	AverageTime V0044Uint64NoValStruct `json:"average_time"`

	// Count Number of RPCs received
	Count int32 `json:"count"`

	// TotalTime Total time spent processing RPC in seconds
	TotalTime int64 `json:"total_time"`

	// User User name
	User string `json:"user"`

	// UserId User ID (numeric)
	UserId int32 `json:"user_id"`
}

// V0044StatsMsgRpcsByType RPCs by type
type V0044StatsMsgRpcsByType = []V0044StatsMsgRpcType

// V0044StatsMsgRpcsByUser RPCs by user
type V0044StatsMsgRpcsByUser = []V0044StatsMsgRpcUser

// V0044StatsMsgRpcsDump Pending RPCs by hostlist
type V0044StatsMsgRpcsDump = []V0044StatsMsgRpcDump

// V0044StatsMsgRpcsQueue Pending RPCs
type V0044StatsMsgRpcsQueue = []V0044StatsMsgRpcQueue

// V0044StatsRec defines model for v0.0.44_stats_rec.
type V0044StatsRec struct {
	RPCs    *V0044StatsRpcList `json:"RPCs,omitempty"`
	Rollups *V0044RollupStats  `json:"rollups,omitempty"`

	// TimeStart When data collection started (UNIX timestamp) (UNIX timestamp or time string recognized by Slurm (e.g., '[MM/DD[/YY]-]HH:MM[:SS]'))
	TimeStart *int64              `json:"time_start,omitempty"`
	Users     *V0044StatsUserList `json:"users,omitempty"`
}

// V0044StatsRpc defines model for v0.0.44_stats_rpc.
type V0044StatsRpc struct {
	// Count Number of RPCs processed
	Count *int32 `json:"count,omitempty"`

	// Rpc RPC type
	Rpc  *string `json:"rpc,omitempty"`
	Time *struct {
		// Average Average RPC processing time in microseconds
		Average *int64 `json:"average,omitempty"`

		// Total Total RPC processing time in microseconds
		Total *int64 `json:"total,omitempty"`
	} `json:"time,omitempty"`
}

// V0044StatsRpcList defines model for v0.0.44_stats_rpc_list.
type V0044StatsRpcList = []V0044StatsRpc

// V0044StatsUser defines model for v0.0.44_stats_user.
type V0044StatsUser struct {
	// Count Number of RPCs processed
	Count *int32 `json:"count,omitempty"`
	Time  *struct {
		// Average Average RPC processing time in microseconds
		Average *int64 `json:"average,omitempty"`

		// Total Total RPC processing time in microseconds
		Total *int64 `json:"total,omitempty"`
	} `json:"time,omitempty"`

	// User User ID
	User *string `json:"user,omitempty"`
}

// V0044StatsUserList defines model for v0.0.44_stats_user_list.
type V0044StatsUserList = []V0044StatsUser

// V0044Step defines model for v0.0.44_step.
type V0044Step struct {
	CPU *struct {
		// Governor Requested CPU frequency governor in kHz
		Governor           *string `json:"governor,omitempty"`
		RequestedFrequency *struct {
			Max *V0044Uint32NoValStruct `json:"max,omitempty"`
			Min *V0044Uint32NoValStruct `json:"min,omitempty"`
		} `json:"requested_frequency,omitempty"`
	} `json:"CPU,omitempty"`
	ExitCode *V0044ProcessExitCodeVerbose `json:"exit_code,omitempty"`

	// KillRequestUser User ID that requested termination of the step
	KillRequestUser *string `json:"kill_request_user,omitempty"`
	Nodes           *struct {
		// Count Number of nodes in the job step
		Count *int32         `json:"count,omitempty"`
		List  *V0044Hostlist `json:"list,omitempty"`

		// Range Node(s) allocated to the job step
		Range *string `json:"range,omitempty"`
	} `json:"nodes,omitempty"`

	// Pid Deprecated; Process ID
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	Pid *string `json:"pid,omitempty"`

	// State Current state
	State      *[]V0044StepState `json:"state,omitempty"`
	Statistics *struct {
		CPU *struct {
			// ActualFrequency Average weighted CPU frequency of all tasks in kHz
			ActualFrequency *int64 `json:"actual_frequency,omitempty"`
		} `json:"CPU,omitempty"`
		Energy *struct {
			Consumed *V0044Uint64NoValStruct `json:"consumed,omitempty"`
		} `json:"energy,omitempty"`
	} `json:"statistics,omitempty"`
	Step *struct {
		// Id Step ID (Slurm job step ID)
		Id *string `json:"id,omitempty"`

		// Name Step name
		Name *string `json:"name,omitempty"`

		// Stderr Path to stderr file
		Stderr *string `json:"stderr,omitempty"`

		// StderrExpanded Step stderr with expanded fields
		StderrExpanded *string `json:"stderr_expanded,omitempty"`

		// Stdin Path to stdin file
		Stdin *string `json:"stdin,omitempty"`

		// StdinExpanded Step stdin with expanded fields
		StdinExpanded *string `json:"stdin_expanded,omitempty"`

		// Stdout Path to stdout file
		Stdout *string `json:"stdout,omitempty"`

		// StdoutExpanded Step stdout with expanded fields
		StdoutExpanded *string `json:"stdout_expanded,omitempty"`
	} `json:"step,omitempty"`
	Task *struct {
		// Distribution The layout of the step was when it was running
		Distribution *string `json:"distribution,omitempty"`
	} `json:"task,omitempty"`
	Tasks *struct {
		// Count Total number of tasks
		Count *int32 `json:"count,omitempty"`
	} `json:"tasks,omitempty"`
	Time *struct {
		// Elapsed Elapsed time in seconds
		Elapsed *int32                  `json:"elapsed,omitempty"`
		End     *V0044Uint64NoValStruct `json:"end,omitempty"`
		Limit   *V0044Uint32NoValStruct `json:"limit,omitempty"`
		Start   *V0044Uint64NoValStruct `json:"start,omitempty"`

		// Suspended Total time in suspended state in seconds
		Suspended *int32 `json:"suspended,omitempty"`
		System    *struct {
			// Microseconds System CPU time used by the step in microseconds
			Microseconds *int32 `json:"microseconds,omitempty"`

			// Seconds System CPU time used by the step in seconds
			Seconds *int64 `json:"seconds,omitempty"`
		} `json:"system,omitempty"`
		Total *struct {
			// Microseconds Total CPU time used by the step in microseconds
			Microseconds *int32 `json:"microseconds,omitempty"`

			// Seconds Total CPU time used by the step in seconds
			Seconds *int64 `json:"seconds,omitempty"`
		} `json:"total,omitempty"`
		User *struct {
			// Microseconds User CPU time used by the step in microseconds
			Microseconds *int32 `json:"microseconds,omitempty"`

			// Seconds User CPU time used by the step in seconds
			Seconds *int64 `json:"seconds,omitempty"`
		} `json:"user,omitempty"`
	} `json:"time,omitempty"`
	Tres *struct {
		Allocated *V0044TresList `json:"allocated,omitempty"`
		Consumed  *struct {
			Average *V0044TresList         `json:"average,omitempty"`
			Max     *V0044StepTresUsageMax `json:"max,omitempty"`
			Min     *V0044StepTresUsageMin `json:"min,omitempty"`
			Total   *V0044TresList         `json:"total,omitempty"`
		} `json:"consumed,omitempty"`
		Requested *struct {
			Average *V0044TresList       `json:"average,omitempty"`
			Max     *V0044StepTresReqMax `json:"max,omitempty"`
			Min     *V0044StepTresReqMin `json:"min,omitempty"`
			Total   *V0044TresList       `json:"total,omitempty"`
		} `json:"requested,omitempty"`
	} `json:"tres,omitempty"`
}

// V0044StepState defines model for V0044Step.State.
type V0044StepState string

// V0044StepList defines model for v0.0.44_step_list.
type V0044StepList = []V0044Step

// V0044StepTresReqMax defines model for v0.0.44_step_tres_req_max.
type V0044StepTresReqMax = []V0044Tres

// V0044StepTresReqMin defines model for v0.0.44_step_tres_req_min.
type V0044StepTresReqMin = []V0044Tres

// V0044StepTresUsageMax defines model for v0.0.44_step_tres_usage_max.
type V0044StepTresUsageMax = []V0044Tres

// V0044StepTresUsageMin defines model for v0.0.44_step_tres_usage_min.
type V0044StepTresUsageMin = []V0044Tres

// V0044StringArray defines model for v0.0.44_string_array.
type V0044StringArray = []string

// V0044StringList defines model for v0.0.44_string_list.
type V0044StringList = []string

// V0044Tres defines model for v0.0.44_tres.
type V0044Tres struct {
	// Count TRES count (0 if listed generically)
	Count *int64 `json:"count,omitempty"`

	// Id ID used in the database
	Id *int32 `json:"id,omitempty"`

	// Name TRES name (if applicable)
	Name *string `json:"name,omitempty"`

	// Type TRES type (CPU, MEM, etc)
	Type string `json:"type"`
}

// V0044TresList defines model for v0.0.44_tres_list.
type V0044TresList = []V0044Tres

// V0044Uint16NoValStruct defines model for v0.0.44_uint16_no_val_struct.
type V0044Uint16NoValStruct struct {
	// Infinite True if number has been set to infinite; "set" and "number" will be ignored
	Infinite *bool `json:"infinite,omitempty"`

	// Number If "set" is True the number will be set with value; otherwise ignore number contents
	Number *int32 `json:"number,omitempty"`

	// Set True if number has been set; False if number is unset
	Set *bool `json:"set,omitempty"`
}

// V0044Uint32NoValStruct defines model for v0.0.44_uint32_no_val_struct.
type V0044Uint32NoValStruct struct {
	// Infinite True if number has been set to infinite; "set" and "number" will be ignored
	Infinite *bool `json:"infinite,omitempty"`

	// Number If "set" is True the number will be set with value; otherwise ignore number contents
	Number *int32 `json:"number,omitempty"`

	// Set True if number has been set; False if number is unset
	Set *bool `json:"set,omitempty"`
}

// V0044Uint64NoValStruct defines model for v0.0.44_uint64_no_val_struct.
type V0044Uint64NoValStruct struct {
	// Infinite True if number has been set to infinite; "set" and "number" will be ignored
	Infinite *bool `json:"infinite,omitempty"`

	// Number If "set" is True the number will be set with value; otherwise ignore number contents
	Number *int64 `json:"number,omitempty"`

	// Set True if number has been set; False if number is unset
	Set *bool `json:"set,omitempty"`
}

// V0044UpdateNodeMsg defines model for v0.0.44_update_node_msg.
type V0044UpdateNodeMsg struct {
	Address *V0044HostlistString `json:"address,omitempty"`

	// Comment Arbitrary comment
	Comment *string `json:"comment,omitempty"`

	// CpuBind Default method for binding tasks to allocated CPUs
	CpuBind *int32 `json:"cpu_bind,omitempty"`

	// Extra Arbitrary string used for node filtering if extra constraints are enabled
	Extra       *string         `json:"extra,omitempty"`
	Features    *V0044CsvString `json:"features,omitempty"`
	FeaturesAct *V0044CsvString `json:"features_act,omitempty"`

	// Gres Generic resources
	Gres     *string              `json:"gres,omitempty"`
	Hostname *V0044HostlistString `json:"hostname,omitempty"`
	Name     *V0044HostlistString `json:"name,omitempty"`

	// Reason Reason for node being DOWN or DRAINING
	Reason *string `json:"reason,omitempty"`

	// ReasonUid User ID to associate with the reason (needed if user root is sending message)
	ReasonUid   *string                 `json:"reason_uid,omitempty"`
	ResumeAfter *V0044Uint32NoValStruct `json:"resume_after,omitempty"`

	// State New state to assign to the node
	State *[]V0044UpdateNodeMsgState `json:"state,omitempty"`

	// TopologyStr Topology
	TopologyStr *string                 `json:"topology_str,omitempty"`
	Weight      *V0044Uint32NoValStruct `json:"weight,omitempty"`
}

// V0044UpdateNodeMsgState defines model for V0044UpdateNodeMsg.State.
type V0044UpdateNodeMsgState string

// V0044User defines model for v0.0.44_user.
type V0044User struct {
	// AdministratorLevel AdminLevel granted to the user
	AdministratorLevel *[]V0044UserAdministratorLevel `json:"administrator_level,omitempty"`
	Associations       *V0044AssocShortList           `json:"associations,omitempty"`
	Coordinators       *V0044CoordList                `json:"coordinators,omitempty"`
	Default            *struct {
		// Account Default account
		Account *string `json:"account,omitempty"`

		// Qos Default QOS
		Qos *int32 `json:"qos,omitempty"`

		// Wckey Default WCKey
		Wckey *string `json:"wckey,omitempty"`
	} `json:"default,omitempty"`

	// Flags Flags associated with this user
	Flags *[]V0044UserFlags `json:"flags,omitempty"`

	// Name User name
	Name string `json:"name"`

	// OldName Previous user name
	OldName *string         `json:"old_name,omitempty"`
	Wckeys  *V0044WckeyList `json:"wckeys,omitempty"`
}

// V0044UserAdministratorLevel defines model for V0044User.AdministratorLevel.
type V0044UserAdministratorLevel string

// V0044UserFlags defines model for V0044User.Flags.
type V0044UserFlags string

// V0044UserList defines model for v0.0.44_user_list.
type V0044UserList = []V0044User

// V0044UserShort defines model for v0.0.44_user_short.
type V0044UserShort struct {
	// Adminlevel AdminLevel granted to the user
	Adminlevel *[]V0044UserShortAdminlevel `json:"adminlevel,omitempty"`

	// Defaultaccount Default account
	Defaultaccount *string `json:"defaultaccount,omitempty"`

	// Defaultqos Default QOS
	Defaultqos *int32 `json:"defaultqos,omitempty"`

	// Defaultwckey Default WCKey
	Defaultwckey *string `json:"defaultwckey,omitempty"`
}

// V0044UserShortAdminlevel defines model for V0044UserShort.Adminlevel.
type V0044UserShortAdminlevel string

// V0044UsersAddCond defines model for v0.0.44_users_add_cond.
type V0044UsersAddCond struct {
	Accounts    *V0044StringList  `json:"accounts,omitempty"`
	Association *V0044AssocRecSet `json:"association,omitempty"`
	Clusters    *V0044StringList  `json:"clusters,omitempty"`
	Partitions  *V0044StringList  `json:"partitions,omitempty"`
	Users       V0044StringList   `json:"users"`
	Wckeys      *V0044StringList  `json:"wckeys,omitempty"`
}

// V0044Wckey defines model for v0.0.44_wckey.
type V0044Wckey struct {
	Accounting *V0044AccountingList `json:"accounting,omitempty"`

	// Cluster Cluster name
	Cluster string `json:"cluster"`

	// Flags Flags associated with this WCKey
	Flags *[]V0044WckeyFlags `json:"flags,omitempty"`

	// Id Unique ID for this user-cluster-wckey combination
	Id *int32 `json:"id,omitempty"`

	// Name WCKey name
	Name string `json:"name"`

	// User User name
	User string `json:"user"`
}

// V0044WckeyFlags defines model for V0044Wckey.Flags.
type V0044WckeyFlags string

// V0044WckeyList defines model for v0.0.44_wckey_list.
type V0044WckeyList = []V0044Wckey

// V0044WckeyTagStruct defines model for v0.0.44_wckey_tag_struct.
type V0044WckeyTagStruct struct {
	// Flags Active flags
	Flags []V0044WckeyTagStructFlags `json:"flags"`

	// Wckey WCKey name
	Wckey string `json:"wckey"`
}

// V0044WckeyTagStructFlags defines model for V0044WckeyTagStruct.Flags.
type V0044WckeyTagStructFlags string

// SlurmV0044DeleteJobParams defines parameters for SlurmV0044DeleteJob.
type SlurmV0044DeleteJobParams struct {
	// Signal Signal to send to Job
	Signal *string `form:"signal,omitempty" json:"signal,omitempty"`

	// Flags Signalling flags
	Flags *SlurmV0044DeleteJobParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmV0044DeleteJobParamsFlags defines parameters for SlurmV0044DeleteJob.
type SlurmV0044DeleteJobParamsFlags string

// SlurmV0044GetJobParams defines parameters for SlurmV0044GetJob.
type SlurmV0044GetJobParams struct {
	// UpdateTime Query jobs updated more recently than this time (UNIX timestamp)
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`

	// Flags Query flags
	Flags *SlurmV0044GetJobParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmV0044GetJobParamsFlags defines parameters for SlurmV0044GetJob.
type SlurmV0044GetJobParamsFlags string

// SlurmV0044GetJobsParams defines parameters for SlurmV0044GetJobs.
type SlurmV0044GetJobsParams struct {
	// UpdateTime Query jobs updated more recently than this time (UNIX timestamp)
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`

	// Flags Query flags
	Flags *SlurmV0044GetJobsParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmV0044GetJobsParamsFlags defines parameters for SlurmV0044GetJobs.
type SlurmV0044GetJobsParamsFlags string

// SlurmV0044GetJobsStateParams defines parameters for SlurmV0044GetJobsState.
type SlurmV0044GetJobsStateParams struct {
	// JobId CSV list of Job IDs to search for
	JobId *string `form:"job_id,omitempty" json:"job_id,omitempty"`
}

// SlurmV0044GetNodeParams defines parameters for SlurmV0044GetNode.
type SlurmV0044GetNodeParams struct {
	// UpdateTime Query jobs updated more recently than this time (UNIX timestamp)
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`

	// Flags Query flags
	Flags *SlurmV0044GetNodeParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmV0044GetNodeParamsFlags defines parameters for SlurmV0044GetNode.
type SlurmV0044GetNodeParamsFlags string

// SlurmV0044GetNodesParams defines parameters for SlurmV0044GetNodes.
type SlurmV0044GetNodesParams struct {
	// UpdateTime Query jobs updated more recently than this time (UNIX timestamp)
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`

	// Flags Query flags
	Flags *SlurmV0044GetNodesParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmV0044GetNodesParamsFlags defines parameters for SlurmV0044GetNodes.
type SlurmV0044GetNodesParamsFlags string

// SlurmV0044GetPartitionParams defines parameters for SlurmV0044GetPartition.
type SlurmV0044GetPartitionParams struct {
	// UpdateTime Query partitions updated more recently than this time (UNIX timestamp)
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`

	// Flags Query flags
	Flags *SlurmV0044GetPartitionParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmV0044GetPartitionParamsFlags defines parameters for SlurmV0044GetPartition.
type SlurmV0044GetPartitionParamsFlags string

// SlurmV0044GetPartitionsParams defines parameters for SlurmV0044GetPartitions.
type SlurmV0044GetPartitionsParams struct {
	// UpdateTime Query partitions updated more recently than this time (UNIX timestamp)
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`

	// Flags Query flags
	Flags *SlurmV0044GetPartitionsParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmV0044GetPartitionsParamsFlags defines parameters for SlurmV0044GetPartitions.
type SlurmV0044GetPartitionsParamsFlags string

// SlurmV0044GetReservationParams defines parameters for SlurmV0044GetReservation.
type SlurmV0044GetReservationParams struct {
	// UpdateTime Query reservations updated more recently than this time (UNIX timestamp)
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`
}

// SlurmV0044GetReservationsParams defines parameters for SlurmV0044GetReservations.
type SlurmV0044GetReservationsParams struct {
	// UpdateTime Query reservations updated more recently than this time (UNIX timestamp)
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`
}

// SlurmV0044GetSharesParams defines parameters for SlurmV0044GetShares.
type SlurmV0044GetSharesParams struct {
	// Accounts Accounts to query
	Accounts *string `form:"accounts,omitempty" json:"accounts,omitempty"`

	// Users Users to query
	Users *string `form:"users,omitempty" json:"users,omitempty"`
}

// SlurmdbV0044GetAccountParams defines parameters for SlurmdbV0044GetAccount.
type SlurmdbV0044GetAccountParams struct {
	// WithAssocs Include associations
	WithAssocs *string `form:"with_assocs,omitempty" json:"with_assocs,omitempty"`

	// WithCoords Include coordinators
	WithCoords *string `form:"with_coords,omitempty" json:"with_coords,omitempty"`

	// WithDeleted Include deleted
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`
}

// SlurmdbV0044GetAccountsParams defines parameters for SlurmdbV0044GetAccounts.
type SlurmdbV0044GetAccountsParams struct {
	// Description CSV description list
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// DELETED include deleted associations
	DELETED *string `form:"DELETED,omitempty" json:"DELETED,omitempty"`

	// WithAssociations query includes associations
	WithAssociations *string `form:"WithAssociations,omitempty" json:"WithAssociations,omitempty"`

	// WithCoordinators query includes coordinators
	WithCoordinators *string `form:"WithCoordinators,omitempty" json:"WithCoordinators,omitempty"`

	// NoUsersAreCoords remove users as coordinators
	NoUsersAreCoords *string `form:"NoUsersAreCoords,omitempty" json:"NoUsersAreCoords,omitempty"`

	// UsersAreCoords users are coordinators
	UsersAreCoords *string `form:"UsersAreCoords,omitempty" json:"UsersAreCoords,omitempty"`
}

// SlurmdbV0044DeleteAssociationParams defines parameters for SlurmdbV0044DeleteAssociation.
type SlurmdbV0044DeleteAssociationParams struct {
	// Account CSV accounts list
	Account *string `form:"account,omitempty" json:"account,omitempty"`

	// Cluster CSV clusters list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// DefaultQos CSV QOS list
	DefaultQos                 *string `form:"default_qos,omitempty" json:"default_qos,omitempty"`
	IncludeDeletedAssociations *string `form:"Include deleted associations,omitempty" json:"Include deleted associations,omitempty"`
	IncludeUsage               *string `form:"Include usage,omitempty" json:"Include usage,omitempty"`
	FilterToOnlyDefaults       *string `form:"Filter to only defaults,omitempty" json:"Filter to only defaults,omitempty"`
	IncludeTheRawQOSOrDeltaQos *string `form:"Include the raw QOS or delta_qos,omitempty" json:"Include the raw QOS or delta_qos,omitempty"`
	IncludeSubAcctInformation  *string `form:"Include sub acct information,omitempty" json:"Include sub acct information,omitempty"`
	ExcludeParentIdname        *string `form:"Exclude parent id/name,omitempty" json:"Exclude parent id/name,omitempty"`
	ExcludeLimitsFromParents   *string `form:"Exclude limits from parents,omitempty" json:"Exclude limits from parents,omitempty"`

	// Format Ignored; process JSON manually to control output format
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Id CSV ID list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// ParentAccount CSV names of parent account
	ParentAccount *string `form:"parent_account,omitempty" json:"parent_account,omitempty"`

	// Partition CSV partition name list
	Partition *string `form:"partition,omitempty" json:"partition,omitempty"`

	// Qos CSV QOS list
	Qos *string `form:"qos,omitempty" json:"qos,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// User CSV user list
	User *string `form:"user,omitempty" json:"user,omitempty"`
}

// SlurmdbV0044GetAssociationParams defines parameters for SlurmdbV0044GetAssociation.
type SlurmdbV0044GetAssociationParams struct {
	// Account CSV accounts list
	Account *string `form:"account,omitempty" json:"account,omitempty"`

	// Cluster CSV clusters list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// DefaultQos CSV QOS list
	DefaultQos                 *string `form:"default_qos,omitempty" json:"default_qos,omitempty"`
	IncludeDeletedAssociations *string `form:"Include deleted associations,omitempty" json:"Include deleted associations,omitempty"`
	IncludeUsage               *string `form:"Include usage,omitempty" json:"Include usage,omitempty"`
	FilterToOnlyDefaults       *string `form:"Filter to only defaults,omitempty" json:"Filter to only defaults,omitempty"`
	IncludeTheRawQOSOrDeltaQos *string `form:"Include the raw QOS or delta_qos,omitempty" json:"Include the raw QOS or delta_qos,omitempty"`
	IncludeSubAcctInformation  *string `form:"Include sub acct information,omitempty" json:"Include sub acct information,omitempty"`
	ExcludeParentIdname        *string `form:"Exclude parent id/name,omitempty" json:"Exclude parent id/name,omitempty"`
	ExcludeLimitsFromParents   *string `form:"Exclude limits from parents,omitempty" json:"Exclude limits from parents,omitempty"`

	// Format Ignored; process JSON manually to control output format
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Id CSV ID list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// ParentAccount CSV names of parent account
	ParentAccount *string `form:"parent_account,omitempty" json:"parent_account,omitempty"`

	// Partition CSV partition name list
	Partition *string `form:"partition,omitempty" json:"partition,omitempty"`

	// Qos CSV QOS list
	Qos *string `form:"qos,omitempty" json:"qos,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// User CSV user list
	User *string `form:"user,omitempty" json:"user,omitempty"`
}

// SlurmdbV0044DeleteAssociationsParams defines parameters for SlurmdbV0044DeleteAssociations.
type SlurmdbV0044DeleteAssociationsParams struct {
	// Account CSV accounts list
	Account *string `form:"account,omitempty" json:"account,omitempty"`

	// Cluster CSV clusters list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// DefaultQos CSV QOS list
	DefaultQos                 *string `form:"default_qos,omitempty" json:"default_qos,omitempty"`
	IncludeDeletedAssociations *string `form:"Include deleted associations,omitempty" json:"Include deleted associations,omitempty"`
	IncludeUsage               *string `form:"Include usage,omitempty" json:"Include usage,omitempty"`
	FilterToOnlyDefaults       *string `form:"Filter to only defaults,omitempty" json:"Filter to only defaults,omitempty"`
	IncludeTheRawQOSOrDeltaQos *string `form:"Include the raw QOS or delta_qos,omitempty" json:"Include the raw QOS or delta_qos,omitempty"`
	IncludeSubAcctInformation  *string `form:"Include sub acct information,omitempty" json:"Include sub acct information,omitempty"`
	ExcludeParentIdname        *string `form:"Exclude parent id/name,omitempty" json:"Exclude parent id/name,omitempty"`
	ExcludeLimitsFromParents   *string `form:"Exclude limits from parents,omitempty" json:"Exclude limits from parents,omitempty"`

	// Format Ignored; process JSON manually to control output format
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Id CSV ID list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// ParentAccount CSV names of parent account
	ParentAccount *string `form:"parent_account,omitempty" json:"parent_account,omitempty"`

	// Partition CSV partition name list
	Partition *string `form:"partition,omitempty" json:"partition,omitempty"`

	// Qos CSV QOS list
	Qos *string `form:"qos,omitempty" json:"qos,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// User CSV user list
	User *string `form:"user,omitempty" json:"user,omitempty"`
}

// SlurmdbV0044GetAssociationsParams defines parameters for SlurmdbV0044GetAssociations.
type SlurmdbV0044GetAssociationsParams struct {
	// Account CSV accounts list
	Account *string `form:"account,omitempty" json:"account,omitempty"`

	// Cluster CSV clusters list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// DefaultQos CSV QOS list
	DefaultQos                 *string `form:"default_qos,omitempty" json:"default_qos,omitempty"`
	IncludeDeletedAssociations *string `form:"Include deleted associations,omitempty" json:"Include deleted associations,omitempty"`
	IncludeUsage               *string `form:"Include usage,omitempty" json:"Include usage,omitempty"`
	FilterToOnlyDefaults       *string `form:"Filter to only defaults,omitempty" json:"Filter to only defaults,omitempty"`
	IncludeTheRawQOSOrDeltaQos *string `form:"Include the raw QOS or delta_qos,omitempty" json:"Include the raw QOS or delta_qos,omitempty"`
	IncludeSubAcctInformation  *string `form:"Include sub acct information,omitempty" json:"Include sub acct information,omitempty"`
	ExcludeParentIdname        *string `form:"Exclude parent id/name,omitempty" json:"Exclude parent id/name,omitempty"`
	ExcludeLimitsFromParents   *string `form:"Exclude limits from parents,omitempty" json:"Exclude limits from parents,omitempty"`

	// Format Ignored; process JSON manually to control output format
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Id CSV ID list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// ParentAccount CSV names of parent account
	ParentAccount *string `form:"parent_account,omitempty" json:"parent_account,omitempty"`

	// Partition CSV partition name list
	Partition *string `form:"partition,omitempty" json:"partition,omitempty"`

	// Qos CSV QOS list
	Qos *string `form:"qos,omitempty" json:"qos,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// User CSV user list
	User *string `form:"user,omitempty" json:"user,omitempty"`
}

// SlurmdbV0044DeleteClusterParams defines parameters for SlurmdbV0044DeleteCluster.
type SlurmdbV0044DeleteClusterParams struct {
	// Classification Type of machine
	Classification *SlurmdbV0044DeleteClusterParamsClassification `form:"classification,omitempty" json:"classification,omitempty"`

	// Cluster CSV cluster list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// Federation CSV federation list
	Federation *string `form:"federation,omitempty" json:"federation,omitempty"`

	// Flags Query flags
	Flags *SlurmdbV0044DeleteClusterParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`

	// Format Ignored; process JSON manually to control output format
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// RpcVersion CSV RPC version list
	RpcVersion *string `form:"rpc_version,omitempty" json:"rpc_version,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// WithDeleted Include deleted clusters
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`

	// WithUsage Include usage
	WithUsage *string `form:"with_usage,omitempty" json:"with_usage,omitempty"`
}

// SlurmdbV0044DeleteClusterParamsClassification defines parameters for SlurmdbV0044DeleteCluster.
type SlurmdbV0044DeleteClusterParamsClassification string

// SlurmdbV0044DeleteClusterParamsFlags defines parameters for SlurmdbV0044DeleteCluster.
type SlurmdbV0044DeleteClusterParamsFlags string

// SlurmdbV0044GetClusterParams defines parameters for SlurmdbV0044GetCluster.
type SlurmdbV0044GetClusterParams struct {
	// Classification Type of machine
	Classification *SlurmdbV0044GetClusterParamsClassification `form:"classification,omitempty" json:"classification,omitempty"`

	// Cluster CSV cluster list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// Federation CSV federation list
	Federation *string `form:"federation,omitempty" json:"federation,omitempty"`

	// Flags Query flags
	Flags *SlurmdbV0044GetClusterParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`

	// Format Ignored; process JSON manually to control output format
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// RpcVersion CSV RPC version list
	RpcVersion *string `form:"rpc_version,omitempty" json:"rpc_version,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// WithDeleted Include deleted clusters
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`

	// WithUsage Include usage
	WithUsage *string `form:"with_usage,omitempty" json:"with_usage,omitempty"`
}

// SlurmdbV0044GetClusterParamsClassification defines parameters for SlurmdbV0044GetCluster.
type SlurmdbV0044GetClusterParamsClassification string

// SlurmdbV0044GetClusterParamsFlags defines parameters for SlurmdbV0044GetCluster.
type SlurmdbV0044GetClusterParamsFlags string

// SlurmdbV0044GetClustersParams defines parameters for SlurmdbV0044GetClusters.
type SlurmdbV0044GetClustersParams struct {
	// UpdateTime Query reservations updated more recently than this time (UNIX timestamp)
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`
}

// SlurmdbV0044PostClustersParams defines parameters for SlurmdbV0044PostClusters.
type SlurmdbV0044PostClustersParams struct {
	// UpdateTime Query reservations updated more recently than this time (UNIX timestamp)
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`
}

// SlurmdbV0044GetInstanceParams defines parameters for SlurmdbV0044GetInstance.
type SlurmdbV0044GetInstanceParams struct {
	// Cluster CSV clusters list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// Extra CSV extra list
	Extra *string `form:"extra,omitempty" json:"extra,omitempty"`

	// Format Ignored; process JSON manually to control output format
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// InstanceId CSV instance_id list
	InstanceId *string `form:"instance_id,omitempty" json:"instance_id,omitempty"`

	// InstanceType CSV instance_type list
	InstanceType *string `form:"instance_type,omitempty" json:"instance_type,omitempty"`

	// NodeList Ranged node string
	NodeList *string `form:"node_list,omitempty" json:"node_list,omitempty"`

	// TimeEnd Time end (UNIX timestamp)
	TimeEnd *string `form:"time_end,omitempty" json:"time_end,omitempty"`

	// TimeStart Time start (UNIX timestamp)
	TimeStart *string `form:"time_start,omitempty" json:"time_start,omitempty"`
}

// SlurmdbV0044GetInstancesParams defines parameters for SlurmdbV0044GetInstances.
type SlurmdbV0044GetInstancesParams struct {
	// Cluster CSV clusters list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// Extra CSV extra list
	Extra *string `form:"extra,omitempty" json:"extra,omitempty"`

	// Format Ignored; process JSON manually to control output format
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// InstanceId CSV instance_id list
	InstanceId *string `form:"instance_id,omitempty" json:"instance_id,omitempty"`

	// InstanceType CSV instance_type list
	InstanceType *string `form:"instance_type,omitempty" json:"instance_type,omitempty"`

	// NodeList Ranged node string
	NodeList *string `form:"node_list,omitempty" json:"node_list,omitempty"`

	// TimeEnd Time end (UNIX timestamp)
	TimeEnd *string `form:"time_end,omitempty" json:"time_end,omitempty"`

	// TimeStart Time start (UNIX timestamp)
	TimeStart *string `form:"time_start,omitempty" json:"time_start,omitempty"`
}

// SlurmdbV0044GetJobsParams defines parameters for SlurmdbV0044GetJobs.
type SlurmdbV0044GetJobsParams struct {
	// Account CSV account list
	Account *string `form:"account,omitempty" json:"account,omitempty"`

	// Association CSV association list
	Association *string `form:"association,omitempty" json:"association,omitempty"`

	// Cluster CSV cluster list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// Constraints CSV constraint list
	Constraints *string `form:"constraints,omitempty" json:"constraints,omitempty"`

	// SchedulerUnset Schedule bits not set
	SchedulerUnset *string `form:"scheduler_unset,omitempty" json:"scheduler_unset,omitempty"`

	// ScheduledOnSubmit Job was started on submit
	ScheduledOnSubmit *string `form:"scheduled_on_submit,omitempty" json:"scheduled_on_submit,omitempty"`

	// ScheduledByMain Job was started from main scheduler
	ScheduledByMain *string `form:"scheduled_by_main,omitempty" json:"scheduled_by_main,omitempty"`

	// ScheduledByBackfill Job was started from backfill
	ScheduledByBackfill *string `form:"scheduled_by_backfill,omitempty" json:"scheduled_by_backfill,omitempty"`

	// JobStarted Job start RPC was received
	JobStarted *string `form:"job_started,omitempty" json:"job_started,omitempty"`

	// JobAltered Job record has been altered
	JobAltered *string `form:"job_altered,omitempty" json:"job_altered,omitempty"`

	// ExitCode Job exit code (numeric)
	ExitCode *string `form:"exit_code,omitempty" json:"exit_code,omitempty"`

	// ShowDuplicates Include duplicate job entries
	ShowDuplicates *string `form:"show_duplicates,omitempty" json:"show_duplicates,omitempty"`

	// SkipSteps Exclude job step details
	SkipSteps *string `form:"skip_steps,omitempty" json:"skip_steps,omitempty"`

	// DisableTruncateUsageTime Do not truncate the time to usage_start and usage_end
	DisableTruncateUsageTime *string `form:"disable_truncate_usage_time,omitempty" json:"disable_truncate_usage_time,omitempty"`

	// WholeHetjob Include details on all hetjob components
	WholeHetjob *string `form:"whole_hetjob,omitempty" json:"whole_hetjob,omitempty"`

	// DisableWholeHetjob Only show details on specified hetjob components
	DisableWholeHetjob *string `form:"disable_whole_hetjob,omitempty" json:"disable_whole_hetjob,omitempty"`

	// DisableWaitForResult Tell dbd not to wait for the result
	DisableWaitForResult *string `form:"disable_wait_for_result,omitempty" json:"disable_wait_for_result,omitempty"`

	// UsageTimeAsSubmitTime Use usage_time as the submit_time of the job
	UsageTimeAsSubmitTime *string `form:"usage_time_as_submit_time,omitempty" json:"usage_time_as_submit_time,omitempty"`

	// ShowBatchScript Include job script
	ShowBatchScript *string `form:"show_batch_script,omitempty" json:"show_batch_script,omitempty"`

	// ShowJobEnvironment Include job environment
	ShowJobEnvironment *string `form:"show_job_environment,omitempty" json:"show_job_environment,omitempty"`

	// Format Ignored; process JSON manually to control output format
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Groups CSV group list
	Groups *string `form:"groups,omitempty" json:"groups,omitempty"`

	// JobName CSV job name list
	JobName *string `form:"job_name,omitempty" json:"job_name,omitempty"`

	// Partition CSV partition name list
	Partition *string `form:"partition,omitempty" json:"partition,omitempty"`

	// Qos CSV QOS name list
	Qos *string `form:"qos,omitempty" json:"qos,omitempty"`

	// Reason CSV reason list
	Reason *string `form:"reason,omitempty" json:"reason,omitempty"`

	// Reservation CSV reservation name list
	Reservation *string `form:"reservation,omitempty" json:"reservation,omitempty"`

	// ReservationId CSV reservation ID list
	ReservationId *string `form:"reservation_id,omitempty" json:"reservation_id,omitempty"`

	// State CSV state list
	State *string `form:"state,omitempty" json:"state,omitempty"`

	// Step CSV step id list
	Step *string `form:"step,omitempty" json:"step,omitempty"`

	// EndTime Usage end (UNIX timestamp)
	EndTime *string `form:"end_time,omitempty" json:"end_time,omitempty"`

	// StartTime Usage start (UNIX timestamp)
	StartTime *string `form:"start_time,omitempty" json:"start_time,omitempty"`

	// Node Ranged node string where jobs ran
	Node *string `form:"node,omitempty" json:"node,omitempty"`

	// Users CSV user name list
	Users *string `form:"users,omitempty" json:"users,omitempty"`

	// Wckey CSV WCKey list
	Wckey *string `form:"wckey,omitempty" json:"wckey,omitempty"`
}

// SlurmdbV0044GetQosParams defines parameters for SlurmdbV0044GetQos.
type SlurmdbV0044GetQosParams struct {
	// Description CSV description list
	Description       *string `form:"description,omitempty" json:"description,omitempty"`
	IncludeDeletedQOS *string `form:"Include deleted QOS,omitempty" json:"Include deleted QOS,omitempty"`

	// Id CSV QOS id list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Format Ignored; process JSON manually to control output format
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Name CSV QOS name list
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// PreemptMode PreemptMode used when jobs in this QOS are preempted
	PreemptMode *SlurmdbV0044GetQosParamsPreemptMode `form:"preempt_mode,omitempty" json:"preempt_mode,omitempty"`
}

// SlurmdbV0044GetQosParamsPreemptMode defines parameters for SlurmdbV0044GetQos.
type SlurmdbV0044GetQosParamsPreemptMode string

// SlurmdbV0044PostQosParams defines parameters for SlurmdbV0044PostQos.
type SlurmdbV0044PostQosParams struct {
	// Description CSV description list
	Description       *string `form:"description,omitempty" json:"description,omitempty"`
	IncludeDeletedQOS *string `form:"Include deleted QOS,omitempty" json:"Include deleted QOS,omitempty"`

	// Id CSV QOS id list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Format Ignored; process JSON manually to control output format
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Name CSV QOS name list
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// PreemptMode PreemptMode used when jobs in this QOS are preempted
	PreemptMode *SlurmdbV0044PostQosParamsPreemptMode `form:"preempt_mode,omitempty" json:"preempt_mode,omitempty"`
}

// SlurmdbV0044PostQosParamsPreemptMode defines parameters for SlurmdbV0044PostQos.
type SlurmdbV0044PostQosParamsPreemptMode string

// SlurmdbV0044GetSingleQosParams defines parameters for SlurmdbV0044GetSingleQos.
type SlurmdbV0044GetSingleQosParams struct {
	// WithDeleted Query includes deleted QOS
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`
}

// SlurmdbV0044GetUserParams defines parameters for SlurmdbV0044GetUser.
type SlurmdbV0044GetUserParams struct {
	// WithDeleted Include deleted users
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`

	// WithAssocs Include associations
	WithAssocs *string `form:"with_assocs,omitempty" json:"with_assocs,omitempty"`

	// WithCoords Include coordinators
	WithCoords *string `form:"with_coords,omitempty" json:"with_coords,omitempty"`

	// WithWckeys Include WCKeys
	WithWckeys *string `form:"with_wckeys,omitempty" json:"with_wckeys,omitempty"`
}

// SlurmdbV0044GetUsersParams defines parameters for SlurmdbV0044GetUsers.
type SlurmdbV0044GetUsersParams struct {
	// AdminLevel Administrator level
	AdminLevel *SlurmdbV0044GetUsersParamsAdminLevel `form:"admin_level,omitempty" json:"admin_level,omitempty"`

	// DefaultAccount CSV default account list
	DefaultAccount *string `form:"default_account,omitempty" json:"default_account,omitempty"`

	// DefaultWckey CSV default WCKey list
	DefaultWckey *string `form:"default_wckey,omitempty" json:"default_wckey,omitempty"`

	// WithAssocs With associations
	WithAssocs *string `form:"with_assocs,omitempty" json:"with_assocs,omitempty"`

	// WithCoords With coordinators
	WithCoords *string `form:"with_coords,omitempty" json:"with_coords,omitempty"`

	// WithDeleted With deleted
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`

	// WithWckeys With WCKeys
	WithWckeys *string `form:"with_wckeys,omitempty" json:"with_wckeys,omitempty"`

	// WithoutDefaults Exclude defaults
	WithoutDefaults *string `form:"without_defaults,omitempty" json:"without_defaults,omitempty"`
}

// SlurmdbV0044GetUsersParamsAdminLevel defines parameters for SlurmdbV0044GetUsers.
type SlurmdbV0044GetUsersParamsAdminLevel string

// SlurmdbV0044PostUsersAssociationParams defines parameters for SlurmdbV0044PostUsersAssociation.
type SlurmdbV0044PostUsersAssociationParams struct {
	// UpdateTime Query partitions updated more recently than this time (UNIX timestamp)
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`

	// Flags Query flags
	Flags *SlurmdbV0044PostUsersAssociationParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmdbV0044PostUsersAssociationParamsFlags defines parameters for SlurmdbV0044PostUsersAssociation.
type SlurmdbV0044PostUsersAssociationParamsFlags string

// SlurmdbV0044GetWckeysParams defines parameters for SlurmdbV0044GetWckeys.
type SlurmdbV0044GetWckeysParams struct {
	// Cluster CSV cluster name list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// Format Ignored; process JSON manually to control output format
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Id CSV ID list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Name CSV name list
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// OnlyDefaults Only query defaults
	OnlyDefaults *string `form:"only_defaults,omitempty" json:"only_defaults,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// User CSV user list
	User *string `form:"user,omitempty" json:"user,omitempty"`

	// WithUsage Include usage
	WithUsage *string `form:"with_usage,omitempty" json:"with_usage,omitempty"`

	// WithDeleted Include deleted WCKeys
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`
}

// SlurmdbV0044PostWckeysParams defines parameters for SlurmdbV0044PostWckeys.
type SlurmdbV0044PostWckeysParams struct {
	// Cluster CSV cluster name list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// Format Ignored; process JSON manually to control output format
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Id CSV ID list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Name CSV name list
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// OnlyDefaults Only query defaults
	OnlyDefaults *string `form:"only_defaults,omitempty" json:"only_defaults,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// User CSV user list
	User *string `form:"user,omitempty" json:"user,omitempty"`

	// WithUsage Include usage
	WithUsage *string `form:"with_usage,omitempty" json:"with_usage,omitempty"`

	// WithDeleted Include deleted WCKeys
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`
}

// SlurmV0044PostJobAllocateJSONRequestBody defines body for SlurmV0044PostJobAllocate for application/json ContentType.
type SlurmV0044PostJobAllocateJSONRequestBody = V0044JobAllocReq

// SlurmV0044PostJobSubmitJSONRequestBody defines body for SlurmV0044PostJobSubmit for application/json ContentType.
type SlurmV0044PostJobSubmitJSONRequestBody = V0044JobSubmitReq

// SlurmV0044PostJobJSONRequestBody defines body for SlurmV0044PostJob for application/json ContentType.
type SlurmV0044PostJobJSONRequestBody = V0044JobDescMsg

// SlurmV0044DeleteJobsJSONRequestBody defines body for SlurmV0044DeleteJobs for application/json ContentType.
type SlurmV0044DeleteJobsJSONRequestBody = V0044KillJobsMsg

// SlurmV0044PostNewNodeJSONRequestBody defines body for SlurmV0044PostNewNode for application/json ContentType.
type SlurmV0044PostNewNodeJSONRequestBody = V0044OpenapiCreateNodeReq

// SlurmV0044PostNodeJSONRequestBody defines body for SlurmV0044PostNode for application/json ContentType.
type SlurmV0044PostNodeJSONRequestBody = V0044UpdateNodeMsg

// SlurmV0044PostNodesJSONRequestBody defines body for SlurmV0044PostNodes for application/json ContentType.
type SlurmV0044PostNodesJSONRequestBody = V0044UpdateNodeMsg

// SlurmV0044PostReservationJSONRequestBody defines body for SlurmV0044PostReservation for application/json ContentType.
type SlurmV0044PostReservationJSONRequestBody = V0044ReservationDescMsg

// SlurmV0044PostReservationsJSONRequestBody defines body for SlurmV0044PostReservations for application/json ContentType.
type SlurmV0044PostReservationsJSONRequestBody = V0044ReservationModReq

// SlurmdbV0044PostAccountsJSONRequestBody defines body for SlurmdbV0044PostAccounts for application/json ContentType.
type SlurmdbV0044PostAccountsJSONRequestBody = V0044OpenapiAccountsResp

// SlurmdbV0044PostAccountsAssociationJSONRequestBody defines body for SlurmdbV0044PostAccountsAssociation for application/json ContentType.
type SlurmdbV0044PostAccountsAssociationJSONRequestBody = V0044OpenapiAccountsAddCondResp

// SlurmdbV0044PostAssociationsJSONRequestBody defines body for SlurmdbV0044PostAssociations for application/json ContentType.
type SlurmdbV0044PostAssociationsJSONRequestBody = V0044OpenapiAssocsResp

// SlurmdbV0044PostClustersJSONRequestBody defines body for SlurmdbV0044PostClusters for application/json ContentType.
type SlurmdbV0044PostClustersJSONRequestBody = V0044OpenapiClustersResp

// SlurmdbV0044PostConfigJSONRequestBody defines body for SlurmdbV0044PostConfig for application/json ContentType.
type SlurmdbV0044PostConfigJSONRequestBody = V0044OpenapiSlurmdbdConfigResp

// SlurmdbV0044PostJobJSONRequestBody defines body for SlurmdbV0044PostJob for application/json ContentType.
type SlurmdbV0044PostJobJSONRequestBody = V0044JobModify

// SlurmdbV0044PostJobsJSONRequestBody defines body for SlurmdbV0044PostJobs for application/json ContentType.
type SlurmdbV0044PostJobsJSONRequestBody = V0044OpenapiJobModifyReq

// SlurmdbV0044PostQosJSONRequestBody defines body for SlurmdbV0044PostQos for application/json ContentType.
type SlurmdbV0044PostQosJSONRequestBody = V0044OpenapiSlurmdbdQosResp

// SlurmdbV0044PostTresJSONRequestBody defines body for SlurmdbV0044PostTres for application/json ContentType.
type SlurmdbV0044PostTresJSONRequestBody = V0044OpenapiTresResp

// SlurmdbV0044PostUsersJSONRequestBody defines body for SlurmdbV0044PostUsers for application/json ContentType.
type SlurmdbV0044PostUsersJSONRequestBody = V0044OpenapiUsersResp

// SlurmdbV0044PostUsersAssociationJSONRequestBody defines body for SlurmdbV0044PostUsersAssociation for application/json ContentType.
type SlurmdbV0044PostUsersAssociationJSONRequestBody = V0044OpenapiUsersAddCondResp

// SlurmdbV0044PostWckeysJSONRequestBody defines body for SlurmdbV0044PostWckeys for application/json ContentType.
type SlurmdbV0044PostWckeysJSONRequestBody = V0044OpenapiWckeyResp

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// SlurmV0044GetDiag request
	SlurmV0044GetDiag(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0044PostJobAllocateWithBody request with any body
	SlurmV0044PostJobAllocateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmV0044PostJobAllocate(ctx context.Context, body SlurmV0044PostJobAllocateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0044PostJobSubmitWithBody request with any body
	SlurmV0044PostJobSubmitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmV0044PostJobSubmit(ctx context.Context, body SlurmV0044PostJobSubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0044DeleteJob request
	SlurmV0044DeleteJob(ctx context.Context, jobId string, params *SlurmV0044DeleteJobParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0044GetJob request
	SlurmV0044GetJob(ctx context.Context, jobId string, params *SlurmV0044GetJobParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0044PostJobWithBody request with any body
	SlurmV0044PostJobWithBody(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmV0044PostJob(ctx context.Context, jobId string, body SlurmV0044PostJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0044DeleteJobsWithBody request with any body
	SlurmV0044DeleteJobsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmV0044DeleteJobs(ctx context.Context, body SlurmV0044DeleteJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0044GetJobs request
	SlurmV0044GetJobs(ctx context.Context, params *SlurmV0044GetJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0044GetJobsState request
	SlurmV0044GetJobsState(ctx context.Context, params *SlurmV0044GetJobsStateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0044GetLicenses request
	SlurmV0044GetLicenses(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0044PostNewNodeWithBody request with any body
	SlurmV0044PostNewNodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmV0044PostNewNode(ctx context.Context, body SlurmV0044PostNewNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0044DeleteNode request
	SlurmV0044DeleteNode(ctx context.Context, nodeName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0044GetNode request
	SlurmV0044GetNode(ctx context.Context, nodeName string, params *SlurmV0044GetNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0044PostNodeWithBody request with any body
	SlurmV0044PostNodeWithBody(ctx context.Context, nodeName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmV0044PostNode(ctx context.Context, nodeName string, body SlurmV0044PostNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0044GetNodes request
	SlurmV0044GetNodes(ctx context.Context, params *SlurmV0044GetNodesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0044PostNodesWithBody request with any body
	SlurmV0044PostNodesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmV0044PostNodes(ctx context.Context, body SlurmV0044PostNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0044GetPartition request
	SlurmV0044GetPartition(ctx context.Context, partitionName string, params *SlurmV0044GetPartitionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0044GetPartitions request
	SlurmV0044GetPartitions(ctx context.Context, params *SlurmV0044GetPartitionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0044GetPing request
	SlurmV0044GetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0044GetReconfigure request
	SlurmV0044GetReconfigure(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0044PostReservationWithBody request with any body
	SlurmV0044PostReservationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmV0044PostReservation(ctx context.Context, body SlurmV0044PostReservationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0044DeleteReservation request
	SlurmV0044DeleteReservation(ctx context.Context, reservationName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0044GetReservation request
	SlurmV0044GetReservation(ctx context.Context, reservationName string, params *SlurmV0044GetReservationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0044GetReservations request
	SlurmV0044GetReservations(ctx context.Context, params *SlurmV0044GetReservationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0044PostReservationsWithBody request with any body
	SlurmV0044PostReservationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmV0044PostReservations(ctx context.Context, body SlurmV0044PostReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0044GetShares request
	SlurmV0044GetShares(ctx context.Context, params *SlurmV0044GetSharesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044DeleteAccount request
	SlurmdbV0044DeleteAccount(ctx context.Context, accountName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044GetAccount request
	SlurmdbV0044GetAccount(ctx context.Context, accountName string, params *SlurmdbV0044GetAccountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044GetAccounts request
	SlurmdbV0044GetAccounts(ctx context.Context, params *SlurmdbV0044GetAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044PostAccountsWithBody request with any body
	SlurmdbV0044PostAccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0044PostAccounts(ctx context.Context, body SlurmdbV0044PostAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044PostAccountsAssociationWithBody request with any body
	SlurmdbV0044PostAccountsAssociationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0044PostAccountsAssociation(ctx context.Context, body SlurmdbV0044PostAccountsAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044DeleteAssociation request
	SlurmdbV0044DeleteAssociation(ctx context.Context, params *SlurmdbV0044DeleteAssociationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044GetAssociation request
	SlurmdbV0044GetAssociation(ctx context.Context, params *SlurmdbV0044GetAssociationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044DeleteAssociations request
	SlurmdbV0044DeleteAssociations(ctx context.Context, params *SlurmdbV0044DeleteAssociationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044GetAssociations request
	SlurmdbV0044GetAssociations(ctx context.Context, params *SlurmdbV0044GetAssociationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044PostAssociationsWithBody request with any body
	SlurmdbV0044PostAssociationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0044PostAssociations(ctx context.Context, body SlurmdbV0044PostAssociationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044DeleteCluster request
	SlurmdbV0044DeleteCluster(ctx context.Context, clusterName string, params *SlurmdbV0044DeleteClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044GetCluster request
	SlurmdbV0044GetCluster(ctx context.Context, clusterName string, params *SlurmdbV0044GetClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044GetClusters request
	SlurmdbV0044GetClusters(ctx context.Context, params *SlurmdbV0044GetClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044PostClustersWithBody request with any body
	SlurmdbV0044PostClustersWithBody(ctx context.Context, params *SlurmdbV0044PostClustersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0044PostClusters(ctx context.Context, params *SlurmdbV0044PostClustersParams, body SlurmdbV0044PostClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044GetConfig request
	SlurmdbV0044GetConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044PostConfigWithBody request with any body
	SlurmdbV0044PostConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0044PostConfig(ctx context.Context, body SlurmdbV0044PostConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044GetDiag request
	SlurmdbV0044GetDiag(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044GetInstance request
	SlurmdbV0044GetInstance(ctx context.Context, params *SlurmdbV0044GetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044GetInstances request
	SlurmdbV0044GetInstances(ctx context.Context, params *SlurmdbV0044GetInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044GetJob request
	SlurmdbV0044GetJob(ctx context.Context, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044PostJobWithBody request with any body
	SlurmdbV0044PostJobWithBody(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0044PostJob(ctx context.Context, jobId string, body SlurmdbV0044PostJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044GetJobs request
	SlurmdbV0044GetJobs(ctx context.Context, params *SlurmdbV0044GetJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044PostJobsWithBody request with any body
	SlurmdbV0044PostJobsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0044PostJobs(ctx context.Context, body SlurmdbV0044PostJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044GetPing request
	SlurmdbV0044GetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044GetQos request
	SlurmdbV0044GetQos(ctx context.Context, params *SlurmdbV0044GetQosParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044PostQosWithBody request with any body
	SlurmdbV0044PostQosWithBody(ctx context.Context, params *SlurmdbV0044PostQosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0044PostQos(ctx context.Context, params *SlurmdbV0044PostQosParams, body SlurmdbV0044PostQosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044DeleteSingleQos request
	SlurmdbV0044DeleteSingleQos(ctx context.Context, qos string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044GetSingleQos request
	SlurmdbV0044GetSingleQos(ctx context.Context, qos string, params *SlurmdbV0044GetSingleQosParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044GetTres request
	SlurmdbV0044GetTres(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044PostTresWithBody request with any body
	SlurmdbV0044PostTresWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0044PostTres(ctx context.Context, body SlurmdbV0044PostTresJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044DeleteUser request
	SlurmdbV0044DeleteUser(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044GetUser request
	SlurmdbV0044GetUser(ctx context.Context, name string, params *SlurmdbV0044GetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044GetUsers request
	SlurmdbV0044GetUsers(ctx context.Context, params *SlurmdbV0044GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044PostUsersWithBody request with any body
	SlurmdbV0044PostUsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0044PostUsers(ctx context.Context, body SlurmdbV0044PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044PostUsersAssociationWithBody request with any body
	SlurmdbV0044PostUsersAssociationWithBody(ctx context.Context, params *SlurmdbV0044PostUsersAssociationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0044PostUsersAssociation(ctx context.Context, params *SlurmdbV0044PostUsersAssociationParams, body SlurmdbV0044PostUsersAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044DeleteWckey request
	SlurmdbV0044DeleteWckey(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044GetWckey request
	SlurmdbV0044GetWckey(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044GetWckeys request
	SlurmdbV0044GetWckeys(ctx context.Context, params *SlurmdbV0044GetWckeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0044PostWckeysWithBody request with any body
	SlurmdbV0044PostWckeysWithBody(ctx context.Context, params *SlurmdbV0044PostWckeysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0044PostWckeys(ctx context.Context, params *SlurmdbV0044PostWckeysParams, body SlurmdbV0044PostWckeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) SlurmV0044GetDiag(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044GetDiagRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044PostJobAllocateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044PostJobAllocateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044PostJobAllocate(ctx context.Context, body SlurmV0044PostJobAllocateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044PostJobAllocateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044PostJobSubmitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044PostJobSubmitRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044PostJobSubmit(ctx context.Context, body SlurmV0044PostJobSubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044PostJobSubmitRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044DeleteJob(ctx context.Context, jobId string, params *SlurmV0044DeleteJobParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044DeleteJobRequest(c.Server, jobId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044GetJob(ctx context.Context, jobId string, params *SlurmV0044GetJobParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044GetJobRequest(c.Server, jobId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044PostJobWithBody(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044PostJobRequestWithBody(c.Server, jobId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044PostJob(ctx context.Context, jobId string, body SlurmV0044PostJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044PostJobRequest(c.Server, jobId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044DeleteJobsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044DeleteJobsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044DeleteJobs(ctx context.Context, body SlurmV0044DeleteJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044DeleteJobsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044GetJobs(ctx context.Context, params *SlurmV0044GetJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044GetJobsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044GetJobsState(ctx context.Context, params *SlurmV0044GetJobsStateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044GetJobsStateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044GetLicenses(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044GetLicensesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044PostNewNodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044PostNewNodeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044PostNewNode(ctx context.Context, body SlurmV0044PostNewNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044PostNewNodeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044DeleteNode(ctx context.Context, nodeName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044DeleteNodeRequest(c.Server, nodeName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044GetNode(ctx context.Context, nodeName string, params *SlurmV0044GetNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044GetNodeRequest(c.Server, nodeName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044PostNodeWithBody(ctx context.Context, nodeName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044PostNodeRequestWithBody(c.Server, nodeName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044PostNode(ctx context.Context, nodeName string, body SlurmV0044PostNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044PostNodeRequest(c.Server, nodeName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044GetNodes(ctx context.Context, params *SlurmV0044GetNodesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044GetNodesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044PostNodesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044PostNodesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044PostNodes(ctx context.Context, body SlurmV0044PostNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044PostNodesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044GetPartition(ctx context.Context, partitionName string, params *SlurmV0044GetPartitionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044GetPartitionRequest(c.Server, partitionName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044GetPartitions(ctx context.Context, params *SlurmV0044GetPartitionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044GetPartitionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044GetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044GetPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044GetReconfigure(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044GetReconfigureRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044PostReservationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044PostReservationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044PostReservation(ctx context.Context, body SlurmV0044PostReservationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044PostReservationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044DeleteReservation(ctx context.Context, reservationName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044DeleteReservationRequest(c.Server, reservationName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044GetReservation(ctx context.Context, reservationName string, params *SlurmV0044GetReservationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044GetReservationRequest(c.Server, reservationName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044GetReservations(ctx context.Context, params *SlurmV0044GetReservationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044GetReservationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044PostReservationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044PostReservationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044PostReservations(ctx context.Context, body SlurmV0044PostReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044PostReservationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0044GetShares(ctx context.Context, params *SlurmV0044GetSharesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0044GetSharesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044DeleteAccount(ctx context.Context, accountName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044DeleteAccountRequest(c.Server, accountName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044GetAccount(ctx context.Context, accountName string, params *SlurmdbV0044GetAccountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044GetAccountRequest(c.Server, accountName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044GetAccounts(ctx context.Context, params *SlurmdbV0044GetAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044GetAccountsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044PostAccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044PostAccountsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044PostAccounts(ctx context.Context, body SlurmdbV0044PostAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044PostAccountsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044PostAccountsAssociationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044PostAccountsAssociationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044PostAccountsAssociation(ctx context.Context, body SlurmdbV0044PostAccountsAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044PostAccountsAssociationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044DeleteAssociation(ctx context.Context, params *SlurmdbV0044DeleteAssociationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044DeleteAssociationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044GetAssociation(ctx context.Context, params *SlurmdbV0044GetAssociationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044GetAssociationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044DeleteAssociations(ctx context.Context, params *SlurmdbV0044DeleteAssociationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044DeleteAssociationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044GetAssociations(ctx context.Context, params *SlurmdbV0044GetAssociationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044GetAssociationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044PostAssociationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044PostAssociationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044PostAssociations(ctx context.Context, body SlurmdbV0044PostAssociationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044PostAssociationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044DeleteCluster(ctx context.Context, clusterName string, params *SlurmdbV0044DeleteClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044DeleteClusterRequest(c.Server, clusterName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044GetCluster(ctx context.Context, clusterName string, params *SlurmdbV0044GetClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044GetClusterRequest(c.Server, clusterName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044GetClusters(ctx context.Context, params *SlurmdbV0044GetClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044GetClustersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044PostClustersWithBody(ctx context.Context, params *SlurmdbV0044PostClustersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044PostClustersRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044PostClusters(ctx context.Context, params *SlurmdbV0044PostClustersParams, body SlurmdbV0044PostClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044PostClustersRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044GetConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044GetConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044PostConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044PostConfigRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044PostConfig(ctx context.Context, body SlurmdbV0044PostConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044PostConfigRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044GetDiag(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044GetDiagRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044GetInstance(ctx context.Context, params *SlurmdbV0044GetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044GetInstanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044GetInstances(ctx context.Context, params *SlurmdbV0044GetInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044GetInstancesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044GetJob(ctx context.Context, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044GetJobRequest(c.Server, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044PostJobWithBody(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044PostJobRequestWithBody(c.Server, jobId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044PostJob(ctx context.Context, jobId string, body SlurmdbV0044PostJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044PostJobRequest(c.Server, jobId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044GetJobs(ctx context.Context, params *SlurmdbV0044GetJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044GetJobsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044PostJobsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044PostJobsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044PostJobs(ctx context.Context, body SlurmdbV0044PostJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044PostJobsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044GetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044GetPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044GetQos(ctx context.Context, params *SlurmdbV0044GetQosParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044GetQosRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044PostQosWithBody(ctx context.Context, params *SlurmdbV0044PostQosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044PostQosRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044PostQos(ctx context.Context, params *SlurmdbV0044PostQosParams, body SlurmdbV0044PostQosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044PostQosRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044DeleteSingleQos(ctx context.Context, qos string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044DeleteSingleQosRequest(c.Server, qos)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044GetSingleQos(ctx context.Context, qos string, params *SlurmdbV0044GetSingleQosParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044GetSingleQosRequest(c.Server, qos, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044GetTres(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044GetTresRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044PostTresWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044PostTresRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044PostTres(ctx context.Context, body SlurmdbV0044PostTresJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044PostTresRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044DeleteUser(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044DeleteUserRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044GetUser(ctx context.Context, name string, params *SlurmdbV0044GetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044GetUserRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044GetUsers(ctx context.Context, params *SlurmdbV0044GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044GetUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044PostUsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044PostUsersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044PostUsers(ctx context.Context, body SlurmdbV0044PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044PostUsersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044PostUsersAssociationWithBody(ctx context.Context, params *SlurmdbV0044PostUsersAssociationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044PostUsersAssociationRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044PostUsersAssociation(ctx context.Context, params *SlurmdbV0044PostUsersAssociationParams, body SlurmdbV0044PostUsersAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044PostUsersAssociationRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044DeleteWckey(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044DeleteWckeyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044GetWckey(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044GetWckeyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044GetWckeys(ctx context.Context, params *SlurmdbV0044GetWckeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044GetWckeysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044PostWckeysWithBody(ctx context.Context, params *SlurmdbV0044PostWckeysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044PostWckeysRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0044PostWckeys(ctx context.Context, params *SlurmdbV0044PostWckeysParams, body SlurmdbV0044PostWckeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0044PostWckeysRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewSlurmV0044GetDiagRequest generates requests for SlurmV0044GetDiag
func NewSlurmV0044GetDiagRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.44/diag/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0044PostJobAllocateRequest calls the generic SlurmV0044PostJobAllocate builder with application/json body
func NewSlurmV0044PostJobAllocateRequest(server string, body SlurmV0044PostJobAllocateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmV0044PostJobAllocateRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmV0044PostJobAllocateRequestWithBody generates requests for SlurmV0044PostJobAllocate with any type of body
func NewSlurmV0044PostJobAllocateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.44/job/allocate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmV0044PostJobSubmitRequest calls the generic SlurmV0044PostJobSubmit builder with application/json body
func NewSlurmV0044PostJobSubmitRequest(server string, body SlurmV0044PostJobSubmitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmV0044PostJobSubmitRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmV0044PostJobSubmitRequestWithBody generates requests for SlurmV0044PostJobSubmit with any type of body
func NewSlurmV0044PostJobSubmitRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.44/job/submit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmV0044DeleteJobRequest generates requests for SlurmV0044DeleteJob
func NewSlurmV0044DeleteJobRequest(server string, jobId string, params *SlurmV0044DeleteJobParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.44/job/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Signal != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "signal", runtime.ParamLocationQuery, *params.Signal); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0044GetJobRequest generates requests for SlurmV0044GetJob
func NewSlurmV0044GetJobRequest(server string, jobId string, params *SlurmV0044GetJobParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.44/job/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0044PostJobRequest calls the generic SlurmV0044PostJob builder with application/json body
func NewSlurmV0044PostJobRequest(server string, jobId string, body SlurmV0044PostJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmV0044PostJobRequestWithBody(server, jobId, "application/json", bodyReader)
}

// NewSlurmV0044PostJobRequestWithBody generates requests for SlurmV0044PostJob with any type of body
func NewSlurmV0044PostJobRequestWithBody(server string, jobId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.44/job/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmV0044DeleteJobsRequest calls the generic SlurmV0044DeleteJobs builder with application/json body
func NewSlurmV0044DeleteJobsRequest(server string, body SlurmV0044DeleteJobsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmV0044DeleteJobsRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmV0044DeleteJobsRequestWithBody generates requests for SlurmV0044DeleteJobs with any type of body
func NewSlurmV0044DeleteJobsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.44/jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmV0044GetJobsRequest generates requests for SlurmV0044GetJobs
func NewSlurmV0044GetJobsRequest(server string, params *SlurmV0044GetJobsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.44/jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0044GetJobsStateRequest generates requests for SlurmV0044GetJobsState
func NewSlurmV0044GetJobsStateRequest(server string, params *SlurmV0044GetJobsStateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.44/jobs/state/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.JobId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "job_id", runtime.ParamLocationQuery, *params.JobId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0044GetLicensesRequest generates requests for SlurmV0044GetLicenses
func NewSlurmV0044GetLicensesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.44/licenses/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0044PostNewNodeRequest calls the generic SlurmV0044PostNewNode builder with application/json body
func NewSlurmV0044PostNewNodeRequest(server string, body SlurmV0044PostNewNodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmV0044PostNewNodeRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmV0044PostNewNodeRequestWithBody generates requests for SlurmV0044PostNewNode with any type of body
func NewSlurmV0044PostNewNodeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.44/new/node/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmV0044DeleteNodeRequest generates requests for SlurmV0044DeleteNode
func NewSlurmV0044DeleteNodeRequest(server string, nodeName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_name", runtime.ParamLocationPath, nodeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.44/node/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0044GetNodeRequest generates requests for SlurmV0044GetNode
func NewSlurmV0044GetNodeRequest(server string, nodeName string, params *SlurmV0044GetNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_name", runtime.ParamLocationPath, nodeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.44/node/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0044PostNodeRequest calls the generic SlurmV0044PostNode builder with application/json body
func NewSlurmV0044PostNodeRequest(server string, nodeName string, body SlurmV0044PostNodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmV0044PostNodeRequestWithBody(server, nodeName, "application/json", bodyReader)
}

// NewSlurmV0044PostNodeRequestWithBody generates requests for SlurmV0044PostNode with any type of body
func NewSlurmV0044PostNodeRequestWithBody(server string, nodeName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_name", runtime.ParamLocationPath, nodeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.44/node/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmV0044GetNodesRequest generates requests for SlurmV0044GetNodes
func NewSlurmV0044GetNodesRequest(server string, params *SlurmV0044GetNodesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.44/nodes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0044PostNodesRequest calls the generic SlurmV0044PostNodes builder with application/json body
func NewSlurmV0044PostNodesRequest(server string, body SlurmV0044PostNodesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmV0044PostNodesRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmV0044PostNodesRequestWithBody generates requests for SlurmV0044PostNodes with any type of body
func NewSlurmV0044PostNodesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.44/nodes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmV0044GetPartitionRequest generates requests for SlurmV0044GetPartition
func NewSlurmV0044GetPartitionRequest(server string, partitionName string, params *SlurmV0044GetPartitionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "partition_name", runtime.ParamLocationPath, partitionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.44/partition/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0044GetPartitionsRequest generates requests for SlurmV0044GetPartitions
func NewSlurmV0044GetPartitionsRequest(server string, params *SlurmV0044GetPartitionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.44/partitions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0044GetPingRequest generates requests for SlurmV0044GetPing
func NewSlurmV0044GetPingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.44/ping/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0044GetReconfigureRequest generates requests for SlurmV0044GetReconfigure
func NewSlurmV0044GetReconfigureRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.44/reconfigure/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0044PostReservationRequest calls the generic SlurmV0044PostReservation builder with application/json body
func NewSlurmV0044PostReservationRequest(server string, body SlurmV0044PostReservationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmV0044PostReservationRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmV0044PostReservationRequestWithBody generates requests for SlurmV0044PostReservation with any type of body
func NewSlurmV0044PostReservationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.44/reservation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmV0044DeleteReservationRequest generates requests for SlurmV0044DeleteReservation
func NewSlurmV0044DeleteReservationRequest(server string, reservationName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "reservation_name", runtime.ParamLocationPath, reservationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.44/reservation/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0044GetReservationRequest generates requests for SlurmV0044GetReservation
func NewSlurmV0044GetReservationRequest(server string, reservationName string, params *SlurmV0044GetReservationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "reservation_name", runtime.ParamLocationPath, reservationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.44/reservation/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0044GetReservationsRequest generates requests for SlurmV0044GetReservations
func NewSlurmV0044GetReservationsRequest(server string, params *SlurmV0044GetReservationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.44/reservations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0044PostReservationsRequest calls the generic SlurmV0044PostReservations builder with application/json body
func NewSlurmV0044PostReservationsRequest(server string, body SlurmV0044PostReservationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmV0044PostReservationsRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmV0044PostReservationsRequestWithBody generates requests for SlurmV0044PostReservations with any type of body
func NewSlurmV0044PostReservationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.44/reservations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmV0044GetSharesRequest generates requests for SlurmV0044GetShares
func NewSlurmV0044GetSharesRequest(server string, params *SlurmV0044GetSharesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.44/shares")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Accounts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "accounts", runtime.ParamLocationQuery, *params.Accounts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Users != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "users", runtime.ParamLocationQuery, *params.Users); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0044DeleteAccountRequest generates requests for SlurmdbV0044DeleteAccount
func NewSlurmdbV0044DeleteAccountRequest(server string, accountName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_name", runtime.ParamLocationPath, accountName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/account/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0044GetAccountRequest generates requests for SlurmdbV0044GetAccount
func NewSlurmdbV0044GetAccountRequest(server string, accountName string, params *SlurmdbV0044GetAccountParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_name", runtime.ParamLocationPath, accountName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/account/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WithAssocs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_assocs", runtime.ParamLocationQuery, *params.WithAssocs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithCoords != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_coords", runtime.ParamLocationQuery, *params.WithCoords); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0044GetAccountsRequest generates requests for SlurmdbV0044GetAccounts
func NewSlurmdbV0044GetAccountsRequest(server string, params *SlurmdbV0044GetAccountsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/accounts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DELETED != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "DELETED", runtime.ParamLocationQuery, *params.DELETED); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithAssociations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "WithAssociations", runtime.ParamLocationQuery, *params.WithAssociations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithCoordinators != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "WithCoordinators", runtime.ParamLocationQuery, *params.WithCoordinators); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NoUsersAreCoords != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "NoUsersAreCoords", runtime.ParamLocationQuery, *params.NoUsersAreCoords); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsersAreCoords != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "UsersAreCoords", runtime.ParamLocationQuery, *params.UsersAreCoords); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0044PostAccountsRequest calls the generic SlurmdbV0044PostAccounts builder with application/json body
func NewSlurmdbV0044PostAccountsRequest(server string, body SlurmdbV0044PostAccountsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0044PostAccountsRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmdbV0044PostAccountsRequestWithBody generates requests for SlurmdbV0044PostAccounts with any type of body
func NewSlurmdbV0044PostAccountsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/accounts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmdbV0044PostAccountsAssociationRequest calls the generic SlurmdbV0044PostAccountsAssociation builder with application/json body
func NewSlurmdbV0044PostAccountsAssociationRequest(server string, body SlurmdbV0044PostAccountsAssociationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0044PostAccountsAssociationRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmdbV0044PostAccountsAssociationRequestWithBody generates requests for SlurmdbV0044PostAccountsAssociation with any type of body
func NewSlurmdbV0044PostAccountsAssociationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/accounts_association/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmdbV0044DeleteAssociationRequest generates requests for SlurmdbV0044DeleteAssociation
func NewSlurmdbV0044DeleteAssociationRequest(server string, params *SlurmdbV0044DeleteAssociationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/association/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Account != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "account", runtime.ParamLocationQuery, *params.Account); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DefaultQos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "default_qos", runtime.ParamLocationQuery, *params.DefaultQos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeDeletedAssociations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include deleted associations", runtime.ParamLocationQuery, *params.IncludeDeletedAssociations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeUsage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include usage", runtime.ParamLocationQuery, *params.IncludeUsage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterToOnlyDefaults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Filter to only defaults", runtime.ParamLocationQuery, *params.FilterToOnlyDefaults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeTheRawQOSOrDeltaQos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include the raw QOS or delta_qos", runtime.ParamLocationQuery, *params.IncludeTheRawQOSOrDeltaQos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeSubAcctInformation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include sub acct information", runtime.ParamLocationQuery, *params.IncludeSubAcctInformation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeParentIdname != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Exclude parent id/name", runtime.ParamLocationQuery, *params.ExcludeParentIdname); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeLimitsFromParents != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Exclude limits from parents", runtime.ParamLocationQuery, *params.ExcludeLimitsFromParents); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentAccount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "parent_account", runtime.ParamLocationQuery, *params.ParentAccount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Partition != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "partition", runtime.ParamLocationQuery, *params.Partition); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Qos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "qos", runtime.ParamLocationQuery, *params.Qos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_end", runtime.ParamLocationQuery, *params.UsageEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_start", runtime.ParamLocationQuery, *params.UsageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0044GetAssociationRequest generates requests for SlurmdbV0044GetAssociation
func NewSlurmdbV0044GetAssociationRequest(server string, params *SlurmdbV0044GetAssociationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/association/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Account != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "account", runtime.ParamLocationQuery, *params.Account); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DefaultQos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "default_qos", runtime.ParamLocationQuery, *params.DefaultQos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeDeletedAssociations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include deleted associations", runtime.ParamLocationQuery, *params.IncludeDeletedAssociations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeUsage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include usage", runtime.ParamLocationQuery, *params.IncludeUsage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterToOnlyDefaults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Filter to only defaults", runtime.ParamLocationQuery, *params.FilterToOnlyDefaults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeTheRawQOSOrDeltaQos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include the raw QOS or delta_qos", runtime.ParamLocationQuery, *params.IncludeTheRawQOSOrDeltaQos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeSubAcctInformation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include sub acct information", runtime.ParamLocationQuery, *params.IncludeSubAcctInformation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeParentIdname != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Exclude parent id/name", runtime.ParamLocationQuery, *params.ExcludeParentIdname); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeLimitsFromParents != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Exclude limits from parents", runtime.ParamLocationQuery, *params.ExcludeLimitsFromParents); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentAccount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "parent_account", runtime.ParamLocationQuery, *params.ParentAccount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Partition != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "partition", runtime.ParamLocationQuery, *params.Partition); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Qos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "qos", runtime.ParamLocationQuery, *params.Qos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_end", runtime.ParamLocationQuery, *params.UsageEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_start", runtime.ParamLocationQuery, *params.UsageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0044DeleteAssociationsRequest generates requests for SlurmdbV0044DeleteAssociations
func NewSlurmdbV0044DeleteAssociationsRequest(server string, params *SlurmdbV0044DeleteAssociationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/associations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Account != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "account", runtime.ParamLocationQuery, *params.Account); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DefaultQos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "default_qos", runtime.ParamLocationQuery, *params.DefaultQos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeDeletedAssociations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include deleted associations", runtime.ParamLocationQuery, *params.IncludeDeletedAssociations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeUsage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include usage", runtime.ParamLocationQuery, *params.IncludeUsage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterToOnlyDefaults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Filter to only defaults", runtime.ParamLocationQuery, *params.FilterToOnlyDefaults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeTheRawQOSOrDeltaQos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include the raw QOS or delta_qos", runtime.ParamLocationQuery, *params.IncludeTheRawQOSOrDeltaQos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeSubAcctInformation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include sub acct information", runtime.ParamLocationQuery, *params.IncludeSubAcctInformation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeParentIdname != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Exclude parent id/name", runtime.ParamLocationQuery, *params.ExcludeParentIdname); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeLimitsFromParents != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Exclude limits from parents", runtime.ParamLocationQuery, *params.ExcludeLimitsFromParents); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentAccount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "parent_account", runtime.ParamLocationQuery, *params.ParentAccount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Partition != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "partition", runtime.ParamLocationQuery, *params.Partition); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Qos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "qos", runtime.ParamLocationQuery, *params.Qos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_end", runtime.ParamLocationQuery, *params.UsageEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_start", runtime.ParamLocationQuery, *params.UsageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0044GetAssociationsRequest generates requests for SlurmdbV0044GetAssociations
func NewSlurmdbV0044GetAssociationsRequest(server string, params *SlurmdbV0044GetAssociationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/associations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Account != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "account", runtime.ParamLocationQuery, *params.Account); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DefaultQos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "default_qos", runtime.ParamLocationQuery, *params.DefaultQos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeDeletedAssociations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include deleted associations", runtime.ParamLocationQuery, *params.IncludeDeletedAssociations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeUsage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include usage", runtime.ParamLocationQuery, *params.IncludeUsage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterToOnlyDefaults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Filter to only defaults", runtime.ParamLocationQuery, *params.FilterToOnlyDefaults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeTheRawQOSOrDeltaQos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include the raw QOS or delta_qos", runtime.ParamLocationQuery, *params.IncludeTheRawQOSOrDeltaQos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeSubAcctInformation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include sub acct information", runtime.ParamLocationQuery, *params.IncludeSubAcctInformation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeParentIdname != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Exclude parent id/name", runtime.ParamLocationQuery, *params.ExcludeParentIdname); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeLimitsFromParents != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Exclude limits from parents", runtime.ParamLocationQuery, *params.ExcludeLimitsFromParents); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentAccount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "parent_account", runtime.ParamLocationQuery, *params.ParentAccount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Partition != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "partition", runtime.ParamLocationQuery, *params.Partition); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Qos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "qos", runtime.ParamLocationQuery, *params.Qos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_end", runtime.ParamLocationQuery, *params.UsageEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_start", runtime.ParamLocationQuery, *params.UsageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0044PostAssociationsRequest calls the generic SlurmdbV0044PostAssociations builder with application/json body
func NewSlurmdbV0044PostAssociationsRequest(server string, body SlurmdbV0044PostAssociationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0044PostAssociationsRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmdbV0044PostAssociationsRequestWithBody generates requests for SlurmdbV0044PostAssociations with any type of body
func NewSlurmdbV0044PostAssociationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/associations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmdbV0044DeleteClusterRequest generates requests for SlurmdbV0044DeleteCluster
func NewSlurmdbV0044DeleteClusterRequest(server string, clusterName string, params *SlurmdbV0044DeleteClusterParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_name", runtime.ParamLocationPath, clusterName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/cluster/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Classification != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "classification", runtime.ParamLocationQuery, *params.Classification); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Federation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "federation", runtime.ParamLocationQuery, *params.Federation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RpcVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rpc_version", runtime.ParamLocationQuery, *params.RpcVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_end", runtime.ParamLocationQuery, *params.UsageEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_start", runtime.ParamLocationQuery, *params.UsageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithUsage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_usage", runtime.ParamLocationQuery, *params.WithUsage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0044GetClusterRequest generates requests for SlurmdbV0044GetCluster
func NewSlurmdbV0044GetClusterRequest(server string, clusterName string, params *SlurmdbV0044GetClusterParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_name", runtime.ParamLocationPath, clusterName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/cluster/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Classification != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "classification", runtime.ParamLocationQuery, *params.Classification); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Federation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "federation", runtime.ParamLocationQuery, *params.Federation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RpcVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rpc_version", runtime.ParamLocationQuery, *params.RpcVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_end", runtime.ParamLocationQuery, *params.UsageEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_start", runtime.ParamLocationQuery, *params.UsageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithUsage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_usage", runtime.ParamLocationQuery, *params.WithUsage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0044GetClustersRequest generates requests for SlurmdbV0044GetClusters
func NewSlurmdbV0044GetClustersRequest(server string, params *SlurmdbV0044GetClustersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/clusters/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0044PostClustersRequest calls the generic SlurmdbV0044PostClusters builder with application/json body
func NewSlurmdbV0044PostClustersRequest(server string, params *SlurmdbV0044PostClustersParams, body SlurmdbV0044PostClustersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0044PostClustersRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSlurmdbV0044PostClustersRequestWithBody generates requests for SlurmdbV0044PostClusters with any type of body
func NewSlurmdbV0044PostClustersRequestWithBody(server string, params *SlurmdbV0044PostClustersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/clusters/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmdbV0044GetConfigRequest generates requests for SlurmdbV0044GetConfig
func NewSlurmdbV0044GetConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0044PostConfigRequest calls the generic SlurmdbV0044PostConfig builder with application/json body
func NewSlurmdbV0044PostConfigRequest(server string, body SlurmdbV0044PostConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0044PostConfigRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmdbV0044PostConfigRequestWithBody generates requests for SlurmdbV0044PostConfig with any type of body
func NewSlurmdbV0044PostConfigRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmdbV0044GetDiagRequest generates requests for SlurmdbV0044GetDiag
func NewSlurmdbV0044GetDiagRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/diag/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0044GetInstanceRequest generates requests for SlurmdbV0044GetInstance
func NewSlurmdbV0044GetInstanceRequest(server string, params *SlurmdbV0044GetInstanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/instance/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Extra != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "extra", runtime.ParamLocationQuery, *params.Extra); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InstanceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "instance_id", runtime.ParamLocationQuery, *params.InstanceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InstanceType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "instance_type", runtime.ParamLocationQuery, *params.InstanceType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NodeList != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "node_list", runtime.ParamLocationQuery, *params.NodeList); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimeEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "time_end", runtime.ParamLocationQuery, *params.TimeEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimeStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "time_start", runtime.ParamLocationQuery, *params.TimeStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0044GetInstancesRequest generates requests for SlurmdbV0044GetInstances
func NewSlurmdbV0044GetInstancesRequest(server string, params *SlurmdbV0044GetInstancesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/instances/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Extra != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "extra", runtime.ParamLocationQuery, *params.Extra); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InstanceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "instance_id", runtime.ParamLocationQuery, *params.InstanceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InstanceType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "instance_type", runtime.ParamLocationQuery, *params.InstanceType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NodeList != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "node_list", runtime.ParamLocationQuery, *params.NodeList); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimeEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "time_end", runtime.ParamLocationQuery, *params.TimeEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimeStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "time_start", runtime.ParamLocationQuery, *params.TimeStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0044GetJobRequest generates requests for SlurmdbV0044GetJob
func NewSlurmdbV0044GetJobRequest(server string, jobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/job/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0044PostJobRequest calls the generic SlurmdbV0044PostJob builder with application/json body
func NewSlurmdbV0044PostJobRequest(server string, jobId string, body SlurmdbV0044PostJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0044PostJobRequestWithBody(server, jobId, "application/json", bodyReader)
}

// NewSlurmdbV0044PostJobRequestWithBody generates requests for SlurmdbV0044PostJob with any type of body
func NewSlurmdbV0044PostJobRequestWithBody(server string, jobId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/job/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmdbV0044GetJobsRequest generates requests for SlurmdbV0044GetJobs
func NewSlurmdbV0044GetJobsRequest(server string, params *SlurmdbV0044GetJobsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Account != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "account", runtime.ParamLocationQuery, *params.Account); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Association != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "association", runtime.ParamLocationQuery, *params.Association); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Constraints != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "constraints", runtime.ParamLocationQuery, *params.Constraints); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SchedulerUnset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "scheduler_unset", runtime.ParamLocationQuery, *params.SchedulerUnset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScheduledOnSubmit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "scheduled_on_submit", runtime.ParamLocationQuery, *params.ScheduledOnSubmit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScheduledByMain != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "scheduled_by_main", runtime.ParamLocationQuery, *params.ScheduledByMain); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScheduledByBackfill != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "scheduled_by_backfill", runtime.ParamLocationQuery, *params.ScheduledByBackfill); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JobStarted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "job_started", runtime.ParamLocationQuery, *params.JobStarted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JobAltered != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "job_altered", runtime.ParamLocationQuery, *params.JobAltered); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExitCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "exit_code", runtime.ParamLocationQuery, *params.ExitCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowDuplicates != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "show_duplicates", runtime.ParamLocationQuery, *params.ShowDuplicates); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SkipSteps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "skip_steps", runtime.ParamLocationQuery, *params.SkipSteps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DisableTruncateUsageTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "disable_truncate_usage_time", runtime.ParamLocationQuery, *params.DisableTruncateUsageTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WholeHetjob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "whole_hetjob", runtime.ParamLocationQuery, *params.WholeHetjob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DisableWholeHetjob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "disable_whole_hetjob", runtime.ParamLocationQuery, *params.DisableWholeHetjob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DisableWaitForResult != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "disable_wait_for_result", runtime.ParamLocationQuery, *params.DisableWaitForResult); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageTimeAsSubmitTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_time_as_submit_time", runtime.ParamLocationQuery, *params.UsageTimeAsSubmitTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowBatchScript != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "show_batch_script", runtime.ParamLocationQuery, *params.ShowBatchScript); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowJobEnvironment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "show_job_environment", runtime.ParamLocationQuery, *params.ShowJobEnvironment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Groups != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "groups", runtime.ParamLocationQuery, *params.Groups); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JobName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "job_name", runtime.ParamLocationQuery, *params.JobName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Partition != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "partition", runtime.ParamLocationQuery, *params.Partition); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Qos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "qos", runtime.ParamLocationQuery, *params.Qos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reason != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "reason", runtime.ParamLocationQuery, *params.Reason); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reservation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "reservation", runtime.ParamLocationQuery, *params.Reservation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReservationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "reservation_id", runtime.ParamLocationQuery, *params.ReservationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Step != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "step", runtime.ParamLocationQuery, *params.Step); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "end_time", runtime.ParamLocationQuery, *params.EndTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "start_time", runtime.ParamLocationQuery, *params.StartTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Node != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "node", runtime.ParamLocationQuery, *params.Node); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Users != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "users", runtime.ParamLocationQuery, *params.Users); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Wckey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "wckey", runtime.ParamLocationQuery, *params.Wckey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0044PostJobsRequest calls the generic SlurmdbV0044PostJobs builder with application/json body
func NewSlurmdbV0044PostJobsRequest(server string, body SlurmdbV0044PostJobsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0044PostJobsRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmdbV0044PostJobsRequestWithBody generates requests for SlurmdbV0044PostJobs with any type of body
func NewSlurmdbV0044PostJobsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmdbV0044GetPingRequest generates requests for SlurmdbV0044GetPing
func NewSlurmdbV0044GetPingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/ping/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0044GetQosRequest generates requests for SlurmdbV0044GetQos
func NewSlurmdbV0044GetQosRequest(server string, params *SlurmdbV0044GetQosParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/qos/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeDeletedQOS != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include deleted QOS", runtime.ParamLocationQuery, *params.IncludeDeletedQOS); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PreemptMode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "preempt_mode", runtime.ParamLocationQuery, *params.PreemptMode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0044PostQosRequest calls the generic SlurmdbV0044PostQos builder with application/json body
func NewSlurmdbV0044PostQosRequest(server string, params *SlurmdbV0044PostQosParams, body SlurmdbV0044PostQosJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0044PostQosRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSlurmdbV0044PostQosRequestWithBody generates requests for SlurmdbV0044PostQos with any type of body
func NewSlurmdbV0044PostQosRequestWithBody(server string, params *SlurmdbV0044PostQosParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/qos/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeDeletedQOS != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include deleted QOS", runtime.ParamLocationQuery, *params.IncludeDeletedQOS); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PreemptMode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "preempt_mode", runtime.ParamLocationQuery, *params.PreemptMode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmdbV0044DeleteSingleQosRequest generates requests for SlurmdbV0044DeleteSingleQos
func NewSlurmdbV0044DeleteSingleQosRequest(server string, qos string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "qos", runtime.ParamLocationPath, qos)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/qos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0044GetSingleQosRequest generates requests for SlurmdbV0044GetSingleQos
func NewSlurmdbV0044GetSingleQosRequest(server string, qos string, params *SlurmdbV0044GetSingleQosParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "qos", runtime.ParamLocationPath, qos)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/qos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0044GetTresRequest generates requests for SlurmdbV0044GetTres
func NewSlurmdbV0044GetTresRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/tres/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0044PostTresRequest calls the generic SlurmdbV0044PostTres builder with application/json body
func NewSlurmdbV0044PostTresRequest(server string, body SlurmdbV0044PostTresJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0044PostTresRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmdbV0044PostTresRequestWithBody generates requests for SlurmdbV0044PostTres with any type of body
func NewSlurmdbV0044PostTresRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/tres/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmdbV0044DeleteUserRequest generates requests for SlurmdbV0044DeleteUser
func NewSlurmdbV0044DeleteUserRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0044GetUserRequest generates requests for SlurmdbV0044GetUser
func NewSlurmdbV0044GetUserRequest(server string, name string, params *SlurmdbV0044GetUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithAssocs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_assocs", runtime.ParamLocationQuery, *params.WithAssocs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithCoords != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_coords", runtime.ParamLocationQuery, *params.WithCoords); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithWckeys != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_wckeys", runtime.ParamLocationQuery, *params.WithWckeys); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0044GetUsersRequest generates requests for SlurmdbV0044GetUsers
func NewSlurmdbV0044GetUsersRequest(server string, params *SlurmdbV0044GetUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/users/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AdminLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "admin_level", runtime.ParamLocationQuery, *params.AdminLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DefaultAccount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "default_account", runtime.ParamLocationQuery, *params.DefaultAccount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DefaultWckey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "default_wckey", runtime.ParamLocationQuery, *params.DefaultWckey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithAssocs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_assocs", runtime.ParamLocationQuery, *params.WithAssocs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithCoords != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_coords", runtime.ParamLocationQuery, *params.WithCoords); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithWckeys != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_wckeys", runtime.ParamLocationQuery, *params.WithWckeys); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutDefaults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_defaults", runtime.ParamLocationQuery, *params.WithoutDefaults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0044PostUsersRequest calls the generic SlurmdbV0044PostUsers builder with application/json body
func NewSlurmdbV0044PostUsersRequest(server string, body SlurmdbV0044PostUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0044PostUsersRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmdbV0044PostUsersRequestWithBody generates requests for SlurmdbV0044PostUsers with any type of body
func NewSlurmdbV0044PostUsersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/users/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmdbV0044PostUsersAssociationRequest calls the generic SlurmdbV0044PostUsersAssociation builder with application/json body
func NewSlurmdbV0044PostUsersAssociationRequest(server string, params *SlurmdbV0044PostUsersAssociationParams, body SlurmdbV0044PostUsersAssociationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0044PostUsersAssociationRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSlurmdbV0044PostUsersAssociationRequestWithBody generates requests for SlurmdbV0044PostUsersAssociation with any type of body
func NewSlurmdbV0044PostUsersAssociationRequestWithBody(server string, params *SlurmdbV0044PostUsersAssociationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/users_association/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmdbV0044DeleteWckeyRequest generates requests for SlurmdbV0044DeleteWckey
func NewSlurmdbV0044DeleteWckeyRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/wckey/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0044GetWckeyRequest generates requests for SlurmdbV0044GetWckey
func NewSlurmdbV0044GetWckeyRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/wckey/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0044GetWckeysRequest generates requests for SlurmdbV0044GetWckeys
func NewSlurmdbV0044GetWckeysRequest(server string, params *SlurmdbV0044GetWckeysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/wckeys/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OnlyDefaults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "only_defaults", runtime.ParamLocationQuery, *params.OnlyDefaults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_end", runtime.ParamLocationQuery, *params.UsageEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_start", runtime.ParamLocationQuery, *params.UsageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithUsage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_usage", runtime.ParamLocationQuery, *params.WithUsage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0044PostWckeysRequest calls the generic SlurmdbV0044PostWckeys builder with application/json body
func NewSlurmdbV0044PostWckeysRequest(server string, params *SlurmdbV0044PostWckeysParams, body SlurmdbV0044PostWckeysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0044PostWckeysRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSlurmdbV0044PostWckeysRequestWithBody generates requests for SlurmdbV0044PostWckeys with any type of body
func NewSlurmdbV0044PostWckeysRequestWithBody(server string, params *SlurmdbV0044PostWckeysParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.44/wckeys/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OnlyDefaults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "only_defaults", runtime.ParamLocationQuery, *params.OnlyDefaults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_end", runtime.ParamLocationQuery, *params.UsageEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_start", runtime.ParamLocationQuery, *params.UsageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithUsage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_usage", runtime.ParamLocationQuery, *params.WithUsage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// SlurmV0044GetDiagWithResponse request
	SlurmV0044GetDiagWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmV0044GetDiagResponse, error)

	// SlurmV0044PostJobAllocateWithBodyWithResponse request with any body
	SlurmV0044PostJobAllocateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0044PostJobAllocateResponse, error)

	SlurmV0044PostJobAllocateWithResponse(ctx context.Context, body SlurmV0044PostJobAllocateJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0044PostJobAllocateResponse, error)

	// SlurmV0044PostJobSubmitWithBodyWithResponse request with any body
	SlurmV0044PostJobSubmitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0044PostJobSubmitResponse, error)

	SlurmV0044PostJobSubmitWithResponse(ctx context.Context, body SlurmV0044PostJobSubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0044PostJobSubmitResponse, error)

	// SlurmV0044DeleteJobWithResponse request
	SlurmV0044DeleteJobWithResponse(ctx context.Context, jobId string, params *SlurmV0044DeleteJobParams, reqEditors ...RequestEditorFn) (*SlurmV0044DeleteJobResponse, error)

	// SlurmV0044GetJobWithResponse request
	SlurmV0044GetJobWithResponse(ctx context.Context, jobId string, params *SlurmV0044GetJobParams, reqEditors ...RequestEditorFn) (*SlurmV0044GetJobResponse, error)

	// SlurmV0044PostJobWithBodyWithResponse request with any body
	SlurmV0044PostJobWithBodyWithResponse(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0044PostJobResponse, error)

	SlurmV0044PostJobWithResponse(ctx context.Context, jobId string, body SlurmV0044PostJobJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0044PostJobResponse, error)

	// SlurmV0044DeleteJobsWithBodyWithResponse request with any body
	SlurmV0044DeleteJobsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0044DeleteJobsResponse, error)

	SlurmV0044DeleteJobsWithResponse(ctx context.Context, body SlurmV0044DeleteJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0044DeleteJobsResponse, error)

	// SlurmV0044GetJobsWithResponse request
	SlurmV0044GetJobsWithResponse(ctx context.Context, params *SlurmV0044GetJobsParams, reqEditors ...RequestEditorFn) (*SlurmV0044GetJobsResponse, error)

	// SlurmV0044GetJobsStateWithResponse request
	SlurmV0044GetJobsStateWithResponse(ctx context.Context, params *SlurmV0044GetJobsStateParams, reqEditors ...RequestEditorFn) (*SlurmV0044GetJobsStateResponse, error)

	// SlurmV0044GetLicensesWithResponse request
	SlurmV0044GetLicensesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmV0044GetLicensesResponse, error)

	// SlurmV0044PostNewNodeWithBodyWithResponse request with any body
	SlurmV0044PostNewNodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0044PostNewNodeResponse, error)

	SlurmV0044PostNewNodeWithResponse(ctx context.Context, body SlurmV0044PostNewNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0044PostNewNodeResponse, error)

	// SlurmV0044DeleteNodeWithResponse request
	SlurmV0044DeleteNodeWithResponse(ctx context.Context, nodeName string, reqEditors ...RequestEditorFn) (*SlurmV0044DeleteNodeResponse, error)

	// SlurmV0044GetNodeWithResponse request
	SlurmV0044GetNodeWithResponse(ctx context.Context, nodeName string, params *SlurmV0044GetNodeParams, reqEditors ...RequestEditorFn) (*SlurmV0044GetNodeResponse, error)

	// SlurmV0044PostNodeWithBodyWithResponse request with any body
	SlurmV0044PostNodeWithBodyWithResponse(ctx context.Context, nodeName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0044PostNodeResponse, error)

	SlurmV0044PostNodeWithResponse(ctx context.Context, nodeName string, body SlurmV0044PostNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0044PostNodeResponse, error)

	// SlurmV0044GetNodesWithResponse request
	SlurmV0044GetNodesWithResponse(ctx context.Context, params *SlurmV0044GetNodesParams, reqEditors ...RequestEditorFn) (*SlurmV0044GetNodesResponse, error)

	// SlurmV0044PostNodesWithBodyWithResponse request with any body
	SlurmV0044PostNodesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0044PostNodesResponse, error)

	SlurmV0044PostNodesWithResponse(ctx context.Context, body SlurmV0044PostNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0044PostNodesResponse, error)

	// SlurmV0044GetPartitionWithResponse request
	SlurmV0044GetPartitionWithResponse(ctx context.Context, partitionName string, params *SlurmV0044GetPartitionParams, reqEditors ...RequestEditorFn) (*SlurmV0044GetPartitionResponse, error)

	// SlurmV0044GetPartitionsWithResponse request
	SlurmV0044GetPartitionsWithResponse(ctx context.Context, params *SlurmV0044GetPartitionsParams, reqEditors ...RequestEditorFn) (*SlurmV0044GetPartitionsResponse, error)

	// SlurmV0044GetPingWithResponse request
	SlurmV0044GetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmV0044GetPingResponse, error)

	// SlurmV0044GetReconfigureWithResponse request
	SlurmV0044GetReconfigureWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmV0044GetReconfigureResponse, error)

	// SlurmV0044PostReservationWithBodyWithResponse request with any body
	SlurmV0044PostReservationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0044PostReservationResponse, error)

	SlurmV0044PostReservationWithResponse(ctx context.Context, body SlurmV0044PostReservationJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0044PostReservationResponse, error)

	// SlurmV0044DeleteReservationWithResponse request
	SlurmV0044DeleteReservationWithResponse(ctx context.Context, reservationName string, reqEditors ...RequestEditorFn) (*SlurmV0044DeleteReservationResponse, error)

	// SlurmV0044GetReservationWithResponse request
	SlurmV0044GetReservationWithResponse(ctx context.Context, reservationName string, params *SlurmV0044GetReservationParams, reqEditors ...RequestEditorFn) (*SlurmV0044GetReservationResponse, error)

	// SlurmV0044GetReservationsWithResponse request
	SlurmV0044GetReservationsWithResponse(ctx context.Context, params *SlurmV0044GetReservationsParams, reqEditors ...RequestEditorFn) (*SlurmV0044GetReservationsResponse, error)

	// SlurmV0044PostReservationsWithBodyWithResponse request with any body
	SlurmV0044PostReservationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0044PostReservationsResponse, error)

	SlurmV0044PostReservationsWithResponse(ctx context.Context, body SlurmV0044PostReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0044PostReservationsResponse, error)

	// SlurmV0044GetSharesWithResponse request
	SlurmV0044GetSharesWithResponse(ctx context.Context, params *SlurmV0044GetSharesParams, reqEditors ...RequestEditorFn) (*SlurmV0044GetSharesResponse, error)

	// SlurmdbV0044DeleteAccountWithResponse request
	SlurmdbV0044DeleteAccountWithResponse(ctx context.Context, accountName string, reqEditors ...RequestEditorFn) (*SlurmdbV0044DeleteAccountResponse, error)

	// SlurmdbV0044GetAccountWithResponse request
	SlurmdbV0044GetAccountWithResponse(ctx context.Context, accountName string, params *SlurmdbV0044GetAccountParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetAccountResponse, error)

	// SlurmdbV0044GetAccountsWithResponse request
	SlurmdbV0044GetAccountsWithResponse(ctx context.Context, params *SlurmdbV0044GetAccountsParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetAccountsResponse, error)

	// SlurmdbV0044PostAccountsWithBodyWithResponse request with any body
	SlurmdbV0044PostAccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostAccountsResponse, error)

	SlurmdbV0044PostAccountsWithResponse(ctx context.Context, body SlurmdbV0044PostAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostAccountsResponse, error)

	// SlurmdbV0044PostAccountsAssociationWithBodyWithResponse request with any body
	SlurmdbV0044PostAccountsAssociationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostAccountsAssociationResponse, error)

	SlurmdbV0044PostAccountsAssociationWithResponse(ctx context.Context, body SlurmdbV0044PostAccountsAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostAccountsAssociationResponse, error)

	// SlurmdbV0044DeleteAssociationWithResponse request
	SlurmdbV0044DeleteAssociationWithResponse(ctx context.Context, params *SlurmdbV0044DeleteAssociationParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044DeleteAssociationResponse, error)

	// SlurmdbV0044GetAssociationWithResponse request
	SlurmdbV0044GetAssociationWithResponse(ctx context.Context, params *SlurmdbV0044GetAssociationParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetAssociationResponse, error)

	// SlurmdbV0044DeleteAssociationsWithResponse request
	SlurmdbV0044DeleteAssociationsWithResponse(ctx context.Context, params *SlurmdbV0044DeleteAssociationsParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044DeleteAssociationsResponse, error)

	// SlurmdbV0044GetAssociationsWithResponse request
	SlurmdbV0044GetAssociationsWithResponse(ctx context.Context, params *SlurmdbV0044GetAssociationsParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetAssociationsResponse, error)

	// SlurmdbV0044PostAssociationsWithBodyWithResponse request with any body
	SlurmdbV0044PostAssociationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostAssociationsResponse, error)

	SlurmdbV0044PostAssociationsWithResponse(ctx context.Context, body SlurmdbV0044PostAssociationsJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostAssociationsResponse, error)

	// SlurmdbV0044DeleteClusterWithResponse request
	SlurmdbV0044DeleteClusterWithResponse(ctx context.Context, clusterName string, params *SlurmdbV0044DeleteClusterParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044DeleteClusterResponse, error)

	// SlurmdbV0044GetClusterWithResponse request
	SlurmdbV0044GetClusterWithResponse(ctx context.Context, clusterName string, params *SlurmdbV0044GetClusterParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetClusterResponse, error)

	// SlurmdbV0044GetClustersWithResponse request
	SlurmdbV0044GetClustersWithResponse(ctx context.Context, params *SlurmdbV0044GetClustersParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetClustersResponse, error)

	// SlurmdbV0044PostClustersWithBodyWithResponse request with any body
	SlurmdbV0044PostClustersWithBodyWithResponse(ctx context.Context, params *SlurmdbV0044PostClustersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostClustersResponse, error)

	SlurmdbV0044PostClustersWithResponse(ctx context.Context, params *SlurmdbV0044PostClustersParams, body SlurmdbV0044PostClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostClustersResponse, error)

	// SlurmdbV0044GetConfigWithResponse request
	SlurmdbV0044GetConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetConfigResponse, error)

	// SlurmdbV0044PostConfigWithBodyWithResponse request with any body
	SlurmdbV0044PostConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostConfigResponse, error)

	SlurmdbV0044PostConfigWithResponse(ctx context.Context, body SlurmdbV0044PostConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostConfigResponse, error)

	// SlurmdbV0044GetDiagWithResponse request
	SlurmdbV0044GetDiagWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetDiagResponse, error)

	// SlurmdbV0044GetInstanceWithResponse request
	SlurmdbV0044GetInstanceWithResponse(ctx context.Context, params *SlurmdbV0044GetInstanceParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetInstanceResponse, error)

	// SlurmdbV0044GetInstancesWithResponse request
	SlurmdbV0044GetInstancesWithResponse(ctx context.Context, params *SlurmdbV0044GetInstancesParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetInstancesResponse, error)

	// SlurmdbV0044GetJobWithResponse request
	SlurmdbV0044GetJobWithResponse(ctx context.Context, jobId string, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetJobResponse, error)

	// SlurmdbV0044PostJobWithBodyWithResponse request with any body
	SlurmdbV0044PostJobWithBodyWithResponse(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostJobResponse, error)

	SlurmdbV0044PostJobWithResponse(ctx context.Context, jobId string, body SlurmdbV0044PostJobJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostJobResponse, error)

	// SlurmdbV0044GetJobsWithResponse request
	SlurmdbV0044GetJobsWithResponse(ctx context.Context, params *SlurmdbV0044GetJobsParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetJobsResponse, error)

	// SlurmdbV0044PostJobsWithBodyWithResponse request with any body
	SlurmdbV0044PostJobsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostJobsResponse, error)

	SlurmdbV0044PostJobsWithResponse(ctx context.Context, body SlurmdbV0044PostJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostJobsResponse, error)

	// SlurmdbV0044GetPingWithResponse request
	SlurmdbV0044GetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetPingResponse, error)

	// SlurmdbV0044GetQosWithResponse request
	SlurmdbV0044GetQosWithResponse(ctx context.Context, params *SlurmdbV0044GetQosParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetQosResponse, error)

	// SlurmdbV0044PostQosWithBodyWithResponse request with any body
	SlurmdbV0044PostQosWithBodyWithResponse(ctx context.Context, params *SlurmdbV0044PostQosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostQosResponse, error)

	SlurmdbV0044PostQosWithResponse(ctx context.Context, params *SlurmdbV0044PostQosParams, body SlurmdbV0044PostQosJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostQosResponse, error)

	// SlurmdbV0044DeleteSingleQosWithResponse request
	SlurmdbV0044DeleteSingleQosWithResponse(ctx context.Context, qos string, reqEditors ...RequestEditorFn) (*SlurmdbV0044DeleteSingleQosResponse, error)

	// SlurmdbV0044GetSingleQosWithResponse request
	SlurmdbV0044GetSingleQosWithResponse(ctx context.Context, qos string, params *SlurmdbV0044GetSingleQosParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetSingleQosResponse, error)

	// SlurmdbV0044GetTresWithResponse request
	SlurmdbV0044GetTresWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetTresResponse, error)

	// SlurmdbV0044PostTresWithBodyWithResponse request with any body
	SlurmdbV0044PostTresWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostTresResponse, error)

	SlurmdbV0044PostTresWithResponse(ctx context.Context, body SlurmdbV0044PostTresJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostTresResponse, error)

	// SlurmdbV0044DeleteUserWithResponse request
	SlurmdbV0044DeleteUserWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*SlurmdbV0044DeleteUserResponse, error)

	// SlurmdbV0044GetUserWithResponse request
	SlurmdbV0044GetUserWithResponse(ctx context.Context, name string, params *SlurmdbV0044GetUserParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetUserResponse, error)

	// SlurmdbV0044GetUsersWithResponse request
	SlurmdbV0044GetUsersWithResponse(ctx context.Context, params *SlurmdbV0044GetUsersParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetUsersResponse, error)

	// SlurmdbV0044PostUsersWithBodyWithResponse request with any body
	SlurmdbV0044PostUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostUsersResponse, error)

	SlurmdbV0044PostUsersWithResponse(ctx context.Context, body SlurmdbV0044PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostUsersResponse, error)

	// SlurmdbV0044PostUsersAssociationWithBodyWithResponse request with any body
	SlurmdbV0044PostUsersAssociationWithBodyWithResponse(ctx context.Context, params *SlurmdbV0044PostUsersAssociationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostUsersAssociationResponse, error)

	SlurmdbV0044PostUsersAssociationWithResponse(ctx context.Context, params *SlurmdbV0044PostUsersAssociationParams, body SlurmdbV0044PostUsersAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostUsersAssociationResponse, error)

	// SlurmdbV0044DeleteWckeyWithResponse request
	SlurmdbV0044DeleteWckeyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SlurmdbV0044DeleteWckeyResponse, error)

	// SlurmdbV0044GetWckeyWithResponse request
	SlurmdbV0044GetWckeyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetWckeyResponse, error)

	// SlurmdbV0044GetWckeysWithResponse request
	SlurmdbV0044GetWckeysWithResponse(ctx context.Context, params *SlurmdbV0044GetWckeysParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetWckeysResponse, error)

	// SlurmdbV0044PostWckeysWithBodyWithResponse request with any body
	SlurmdbV0044PostWckeysWithBodyWithResponse(ctx context.Context, params *SlurmdbV0044PostWckeysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostWckeysResponse, error)

	SlurmdbV0044PostWckeysWithResponse(ctx context.Context, params *SlurmdbV0044PostWckeysParams, body SlurmdbV0044PostWckeysJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostWckeysResponse, error)
}

type SlurmV0044GetDiagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiDiagResp
	JSONDefault  *V0044OpenapiDiagResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0044GetDiagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0044GetDiagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0044PostJobAllocateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiJobAllocResp
	JSONDefault  *V0044OpenapiJobAllocResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0044PostJobAllocateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0044PostJobAllocateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0044PostJobSubmitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiJobSubmitResponse
	JSONDefault  *V0044OpenapiJobSubmitResponse
}

// Status returns HTTPResponse.Status
func (r SlurmV0044PostJobSubmitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0044PostJobSubmitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0044DeleteJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiKillJobResp
	JSONDefault  *V0044OpenapiKillJobResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0044DeleteJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0044DeleteJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0044GetJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiJobInfoResp
	JSONDefault  *V0044OpenapiJobInfoResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0044GetJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0044GetJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0044PostJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiJobPostResponse
	JSONDefault  *V0044OpenapiJobPostResponse
}

// Status returns HTTPResponse.Status
func (r SlurmV0044PostJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0044PostJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0044DeleteJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiKillJobsResp
	JSONDefault  *V0044OpenapiKillJobsResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0044DeleteJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0044DeleteJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0044GetJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiJobInfoResp
	JSONDefault  *V0044OpenapiJobInfoResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0044GetJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0044GetJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0044GetJobsStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiJobInfoResp
	JSONDefault  *V0044OpenapiJobInfoResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0044GetJobsStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0044GetJobsStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0044GetLicensesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiLicensesResp
	JSONDefault  *V0044OpenapiLicensesResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0044GetLicensesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0044GetLicensesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0044PostNewNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiResp
	JSONDefault  *V0044OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0044PostNewNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0044PostNewNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0044DeleteNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiResp
	JSONDefault  *V0044OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0044DeleteNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0044DeleteNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0044GetNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiNodesResp
	JSONDefault  *V0044OpenapiNodesResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0044GetNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0044GetNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0044PostNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiResp
	JSONDefault  *V0044OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0044PostNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0044PostNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0044GetNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiNodesResp
	JSONDefault  *V0044OpenapiNodesResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0044GetNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0044GetNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0044PostNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiResp
	JSONDefault  *V0044OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0044PostNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0044PostNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0044GetPartitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiPartitionResp
	JSONDefault  *V0044OpenapiPartitionResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0044GetPartitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0044GetPartitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0044GetPartitionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiPartitionResp
	JSONDefault  *V0044OpenapiPartitionResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0044GetPartitionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0044GetPartitionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0044GetPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiPingArrayResp
	JSONDefault  *V0044OpenapiPingArrayResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0044GetPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0044GetPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0044GetReconfigureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiResp
	JSONDefault  *V0044OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0044GetReconfigureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0044GetReconfigureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0044PostReservationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiReservationModResp
	JSONDefault  *V0044OpenapiReservationModResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0044PostReservationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0044PostReservationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0044DeleteReservationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiResp
	JSONDefault  *V0044OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0044DeleteReservationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0044DeleteReservationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0044GetReservationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiReservationResp
	JSONDefault  *V0044OpenapiReservationResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0044GetReservationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0044GetReservationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0044GetReservationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiReservationResp
	JSONDefault  *V0044OpenapiReservationResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0044GetReservationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0044GetReservationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0044PostReservationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiReservationModResp
	JSONDefault  *V0044OpenapiReservationModResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0044PostReservationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0044PostReservationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0044GetSharesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiSharesResp
	JSONDefault  *V0044OpenapiSharesResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0044GetSharesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0044GetSharesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044DeleteAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiAccountsRemovedResp
	JSONDefault  *V0044OpenapiAccountsRemovedResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044DeleteAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044DeleteAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044GetAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiAccountsResp
	JSONDefault  *V0044OpenapiAccountsResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044GetAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044GetAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044GetAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiAccountsResp
	JSONDefault  *V0044OpenapiAccountsResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044GetAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044GetAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044PostAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiResp
	JSONDefault  *V0044OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044PostAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044PostAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044PostAccountsAssociationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiAccountsAddCondRespStr
	JSONDefault  *V0044OpenapiAccountsAddCondRespStr
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044PostAccountsAssociationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044PostAccountsAssociationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044DeleteAssociationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiAssocsRemovedResp
	JSONDefault  *V0044OpenapiAssocsRemovedResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044DeleteAssociationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044DeleteAssociationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044GetAssociationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiAssocsResp
	JSONDefault  *V0044OpenapiAssocsResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044GetAssociationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044GetAssociationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044DeleteAssociationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiAssocsRemovedResp
	JSONDefault  *V0044OpenapiAssocsRemovedResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044DeleteAssociationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044DeleteAssociationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044GetAssociationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiAssocsResp
	JSONDefault  *V0044OpenapiAssocsResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044GetAssociationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044GetAssociationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044PostAssociationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiResp
	JSONDefault  *V0044OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044PostAssociationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044PostAssociationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044DeleteClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiClustersRemovedResp
	JSONDefault  *V0044OpenapiClustersRemovedResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044DeleteClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044DeleteClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044GetClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiClustersResp
	JSONDefault  *V0044OpenapiClustersResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044GetClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044GetClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044GetClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiClustersResp
	JSONDefault  *V0044OpenapiClustersResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044GetClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044GetClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044PostClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiResp
	JSONDefault  *V0044OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044PostClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044PostClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044GetConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiSlurmdbdConfigResp
	JSONDefault  *V0044OpenapiSlurmdbdConfigResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044GetConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044GetConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044PostConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiResp
	JSONDefault  *V0044OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044PostConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044PostConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044GetDiagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiSlurmdbdStatsResp
	JSONDefault  *V0044OpenapiSlurmdbdStatsResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044GetDiagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044GetDiagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044GetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiInstancesResp
	JSONDefault  *V0044OpenapiInstancesResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044GetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044GetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044GetInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiInstancesResp
	JSONDefault  *V0044OpenapiInstancesResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044GetInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044GetInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044GetJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiSlurmdbdJobsResp
	JSONDefault  *V0044OpenapiSlurmdbdJobsResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044GetJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044GetJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044PostJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiJobModifyResp
	JSONDefault  *V0044OpenapiJobModifyResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044PostJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044PostJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044GetJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiSlurmdbdJobsResp
	JSONDefault  *V0044OpenapiSlurmdbdJobsResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044GetJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044GetJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044PostJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiJobModifyResp
	JSONDefault  *V0044OpenapiJobModifyResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044PostJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044PostJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044GetPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiSlurmdbdPingResp
	JSONDefault  *V0044OpenapiSlurmdbdPingResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044GetPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044GetPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044GetQosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiSlurmdbdQosResp
	JSONDefault  *V0044OpenapiSlurmdbdQosResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044GetQosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044GetQosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044PostQosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiResp
	JSONDefault  *V0044OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044PostQosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044PostQosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044DeleteSingleQosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiSlurmdbdQosRemovedResp
	JSONDefault  *V0044OpenapiSlurmdbdQosRemovedResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044DeleteSingleQosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044DeleteSingleQosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044GetSingleQosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiSlurmdbdQosResp
	JSONDefault  *V0044OpenapiSlurmdbdQosResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044GetSingleQosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044GetSingleQosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044GetTresResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiTresResp
	JSONDefault  *V0044OpenapiTresResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044GetTresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044GetTresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044PostTresResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiResp
	JSONDefault  *V0044OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044PostTresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044PostTresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044DeleteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiResp
	JSONDefault  *V0044OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044DeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044DeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiUsersResp
	JSONDefault  *V0044OpenapiUsersResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiUsersResp
	JSONDefault  *V0044OpenapiUsersResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044PostUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiResp
	JSONDefault  *V0044OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044PostUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044PostUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044PostUsersAssociationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiUsersAddCondRespStr
	JSONDefault  *V0044OpenapiUsersAddCondRespStr
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044PostUsersAssociationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044PostUsersAssociationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044DeleteWckeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiWckeyRemovedResp
	JSONDefault  *V0044OpenapiWckeyRemovedResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044DeleteWckeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044DeleteWckeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044GetWckeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiWckeyResp
	JSONDefault  *V0044OpenapiWckeyResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044GetWckeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044GetWckeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044GetWckeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiWckeyResp
	JSONDefault  *V0044OpenapiWckeyResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044GetWckeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044GetWckeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0044PostWckeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0044OpenapiResp
	JSONDefault  *V0044OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0044PostWckeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0044PostWckeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// SlurmV0044GetDiagWithResponse request returning *SlurmV0044GetDiagResponse
func (c *ClientWithResponses) SlurmV0044GetDiagWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmV0044GetDiagResponse, error) {
	rsp, err := c.SlurmV0044GetDiag(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044GetDiagResponse(rsp)
}

// SlurmV0044PostJobAllocateWithBodyWithResponse request with arbitrary body returning *SlurmV0044PostJobAllocateResponse
func (c *ClientWithResponses) SlurmV0044PostJobAllocateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0044PostJobAllocateResponse, error) {
	rsp, err := c.SlurmV0044PostJobAllocateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044PostJobAllocateResponse(rsp)
}

func (c *ClientWithResponses) SlurmV0044PostJobAllocateWithResponse(ctx context.Context, body SlurmV0044PostJobAllocateJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0044PostJobAllocateResponse, error) {
	rsp, err := c.SlurmV0044PostJobAllocate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044PostJobAllocateResponse(rsp)
}

// SlurmV0044PostJobSubmitWithBodyWithResponse request with arbitrary body returning *SlurmV0044PostJobSubmitResponse
func (c *ClientWithResponses) SlurmV0044PostJobSubmitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0044PostJobSubmitResponse, error) {
	rsp, err := c.SlurmV0044PostJobSubmitWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044PostJobSubmitResponse(rsp)
}

func (c *ClientWithResponses) SlurmV0044PostJobSubmitWithResponse(ctx context.Context, body SlurmV0044PostJobSubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0044PostJobSubmitResponse, error) {
	rsp, err := c.SlurmV0044PostJobSubmit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044PostJobSubmitResponse(rsp)
}

// SlurmV0044DeleteJobWithResponse request returning *SlurmV0044DeleteJobResponse
func (c *ClientWithResponses) SlurmV0044DeleteJobWithResponse(ctx context.Context, jobId string, params *SlurmV0044DeleteJobParams, reqEditors ...RequestEditorFn) (*SlurmV0044DeleteJobResponse, error) {
	rsp, err := c.SlurmV0044DeleteJob(ctx, jobId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044DeleteJobResponse(rsp)
}

// SlurmV0044GetJobWithResponse request returning *SlurmV0044GetJobResponse
func (c *ClientWithResponses) SlurmV0044GetJobWithResponse(ctx context.Context, jobId string, params *SlurmV0044GetJobParams, reqEditors ...RequestEditorFn) (*SlurmV0044GetJobResponse, error) {
	rsp, err := c.SlurmV0044GetJob(ctx, jobId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044GetJobResponse(rsp)
}

// SlurmV0044PostJobWithBodyWithResponse request with arbitrary body returning *SlurmV0044PostJobResponse
func (c *ClientWithResponses) SlurmV0044PostJobWithBodyWithResponse(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0044PostJobResponse, error) {
	rsp, err := c.SlurmV0044PostJobWithBody(ctx, jobId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044PostJobResponse(rsp)
}

func (c *ClientWithResponses) SlurmV0044PostJobWithResponse(ctx context.Context, jobId string, body SlurmV0044PostJobJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0044PostJobResponse, error) {
	rsp, err := c.SlurmV0044PostJob(ctx, jobId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044PostJobResponse(rsp)
}

// SlurmV0044DeleteJobsWithBodyWithResponse request with arbitrary body returning *SlurmV0044DeleteJobsResponse
func (c *ClientWithResponses) SlurmV0044DeleteJobsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0044DeleteJobsResponse, error) {
	rsp, err := c.SlurmV0044DeleteJobsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044DeleteJobsResponse(rsp)
}

func (c *ClientWithResponses) SlurmV0044DeleteJobsWithResponse(ctx context.Context, body SlurmV0044DeleteJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0044DeleteJobsResponse, error) {
	rsp, err := c.SlurmV0044DeleteJobs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044DeleteJobsResponse(rsp)
}

// SlurmV0044GetJobsWithResponse request returning *SlurmV0044GetJobsResponse
func (c *ClientWithResponses) SlurmV0044GetJobsWithResponse(ctx context.Context, params *SlurmV0044GetJobsParams, reqEditors ...RequestEditorFn) (*SlurmV0044GetJobsResponse, error) {
	rsp, err := c.SlurmV0044GetJobs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044GetJobsResponse(rsp)
}

// SlurmV0044GetJobsStateWithResponse request returning *SlurmV0044GetJobsStateResponse
func (c *ClientWithResponses) SlurmV0044GetJobsStateWithResponse(ctx context.Context, params *SlurmV0044GetJobsStateParams, reqEditors ...RequestEditorFn) (*SlurmV0044GetJobsStateResponse, error) {
	rsp, err := c.SlurmV0044GetJobsState(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044GetJobsStateResponse(rsp)
}

// SlurmV0044GetLicensesWithResponse request returning *SlurmV0044GetLicensesResponse
func (c *ClientWithResponses) SlurmV0044GetLicensesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmV0044GetLicensesResponse, error) {
	rsp, err := c.SlurmV0044GetLicenses(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044GetLicensesResponse(rsp)
}

// SlurmV0044PostNewNodeWithBodyWithResponse request with arbitrary body returning *SlurmV0044PostNewNodeResponse
func (c *ClientWithResponses) SlurmV0044PostNewNodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0044PostNewNodeResponse, error) {
	rsp, err := c.SlurmV0044PostNewNodeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044PostNewNodeResponse(rsp)
}

func (c *ClientWithResponses) SlurmV0044PostNewNodeWithResponse(ctx context.Context, body SlurmV0044PostNewNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0044PostNewNodeResponse, error) {
	rsp, err := c.SlurmV0044PostNewNode(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044PostNewNodeResponse(rsp)
}

// SlurmV0044DeleteNodeWithResponse request returning *SlurmV0044DeleteNodeResponse
func (c *ClientWithResponses) SlurmV0044DeleteNodeWithResponse(ctx context.Context, nodeName string, reqEditors ...RequestEditorFn) (*SlurmV0044DeleteNodeResponse, error) {
	rsp, err := c.SlurmV0044DeleteNode(ctx, nodeName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044DeleteNodeResponse(rsp)
}

// SlurmV0044GetNodeWithResponse request returning *SlurmV0044GetNodeResponse
func (c *ClientWithResponses) SlurmV0044GetNodeWithResponse(ctx context.Context, nodeName string, params *SlurmV0044GetNodeParams, reqEditors ...RequestEditorFn) (*SlurmV0044GetNodeResponse, error) {
	rsp, err := c.SlurmV0044GetNode(ctx, nodeName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044GetNodeResponse(rsp)
}

// SlurmV0044PostNodeWithBodyWithResponse request with arbitrary body returning *SlurmV0044PostNodeResponse
func (c *ClientWithResponses) SlurmV0044PostNodeWithBodyWithResponse(ctx context.Context, nodeName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0044PostNodeResponse, error) {
	rsp, err := c.SlurmV0044PostNodeWithBody(ctx, nodeName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044PostNodeResponse(rsp)
}

func (c *ClientWithResponses) SlurmV0044PostNodeWithResponse(ctx context.Context, nodeName string, body SlurmV0044PostNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0044PostNodeResponse, error) {
	rsp, err := c.SlurmV0044PostNode(ctx, nodeName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044PostNodeResponse(rsp)
}

// SlurmV0044GetNodesWithResponse request returning *SlurmV0044GetNodesResponse
func (c *ClientWithResponses) SlurmV0044GetNodesWithResponse(ctx context.Context, params *SlurmV0044GetNodesParams, reqEditors ...RequestEditorFn) (*SlurmV0044GetNodesResponse, error) {
	rsp, err := c.SlurmV0044GetNodes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044GetNodesResponse(rsp)
}

// SlurmV0044PostNodesWithBodyWithResponse request with arbitrary body returning *SlurmV0044PostNodesResponse
func (c *ClientWithResponses) SlurmV0044PostNodesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0044PostNodesResponse, error) {
	rsp, err := c.SlurmV0044PostNodesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044PostNodesResponse(rsp)
}

func (c *ClientWithResponses) SlurmV0044PostNodesWithResponse(ctx context.Context, body SlurmV0044PostNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0044PostNodesResponse, error) {
	rsp, err := c.SlurmV0044PostNodes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044PostNodesResponse(rsp)
}

// SlurmV0044GetPartitionWithResponse request returning *SlurmV0044GetPartitionResponse
func (c *ClientWithResponses) SlurmV0044GetPartitionWithResponse(ctx context.Context, partitionName string, params *SlurmV0044GetPartitionParams, reqEditors ...RequestEditorFn) (*SlurmV0044GetPartitionResponse, error) {
	rsp, err := c.SlurmV0044GetPartition(ctx, partitionName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044GetPartitionResponse(rsp)
}

// SlurmV0044GetPartitionsWithResponse request returning *SlurmV0044GetPartitionsResponse
func (c *ClientWithResponses) SlurmV0044GetPartitionsWithResponse(ctx context.Context, params *SlurmV0044GetPartitionsParams, reqEditors ...RequestEditorFn) (*SlurmV0044GetPartitionsResponse, error) {
	rsp, err := c.SlurmV0044GetPartitions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044GetPartitionsResponse(rsp)
}

// SlurmV0044GetPingWithResponse request returning *SlurmV0044GetPingResponse
func (c *ClientWithResponses) SlurmV0044GetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmV0044GetPingResponse, error) {
	rsp, err := c.SlurmV0044GetPing(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044GetPingResponse(rsp)
}

// SlurmV0044GetReconfigureWithResponse request returning *SlurmV0044GetReconfigureResponse
func (c *ClientWithResponses) SlurmV0044GetReconfigureWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmV0044GetReconfigureResponse, error) {
	rsp, err := c.SlurmV0044GetReconfigure(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044GetReconfigureResponse(rsp)
}

// SlurmV0044PostReservationWithBodyWithResponse request with arbitrary body returning *SlurmV0044PostReservationResponse
func (c *ClientWithResponses) SlurmV0044PostReservationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0044PostReservationResponse, error) {
	rsp, err := c.SlurmV0044PostReservationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044PostReservationResponse(rsp)
}

func (c *ClientWithResponses) SlurmV0044PostReservationWithResponse(ctx context.Context, body SlurmV0044PostReservationJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0044PostReservationResponse, error) {
	rsp, err := c.SlurmV0044PostReservation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044PostReservationResponse(rsp)
}

// SlurmV0044DeleteReservationWithResponse request returning *SlurmV0044DeleteReservationResponse
func (c *ClientWithResponses) SlurmV0044DeleteReservationWithResponse(ctx context.Context, reservationName string, reqEditors ...RequestEditorFn) (*SlurmV0044DeleteReservationResponse, error) {
	rsp, err := c.SlurmV0044DeleteReservation(ctx, reservationName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044DeleteReservationResponse(rsp)
}

// SlurmV0044GetReservationWithResponse request returning *SlurmV0044GetReservationResponse
func (c *ClientWithResponses) SlurmV0044GetReservationWithResponse(ctx context.Context, reservationName string, params *SlurmV0044GetReservationParams, reqEditors ...RequestEditorFn) (*SlurmV0044GetReservationResponse, error) {
	rsp, err := c.SlurmV0044GetReservation(ctx, reservationName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044GetReservationResponse(rsp)
}

// SlurmV0044GetReservationsWithResponse request returning *SlurmV0044GetReservationsResponse
func (c *ClientWithResponses) SlurmV0044GetReservationsWithResponse(ctx context.Context, params *SlurmV0044GetReservationsParams, reqEditors ...RequestEditorFn) (*SlurmV0044GetReservationsResponse, error) {
	rsp, err := c.SlurmV0044GetReservations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044GetReservationsResponse(rsp)
}

// SlurmV0044PostReservationsWithBodyWithResponse request with arbitrary body returning *SlurmV0044PostReservationsResponse
func (c *ClientWithResponses) SlurmV0044PostReservationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0044PostReservationsResponse, error) {
	rsp, err := c.SlurmV0044PostReservationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044PostReservationsResponse(rsp)
}

func (c *ClientWithResponses) SlurmV0044PostReservationsWithResponse(ctx context.Context, body SlurmV0044PostReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0044PostReservationsResponse, error) {
	rsp, err := c.SlurmV0044PostReservations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044PostReservationsResponse(rsp)
}

// SlurmV0044GetSharesWithResponse request returning *SlurmV0044GetSharesResponse
func (c *ClientWithResponses) SlurmV0044GetSharesWithResponse(ctx context.Context, params *SlurmV0044GetSharesParams, reqEditors ...RequestEditorFn) (*SlurmV0044GetSharesResponse, error) {
	rsp, err := c.SlurmV0044GetShares(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0044GetSharesResponse(rsp)
}

// SlurmdbV0044DeleteAccountWithResponse request returning *SlurmdbV0044DeleteAccountResponse
func (c *ClientWithResponses) SlurmdbV0044DeleteAccountWithResponse(ctx context.Context, accountName string, reqEditors ...RequestEditorFn) (*SlurmdbV0044DeleteAccountResponse, error) {
	rsp, err := c.SlurmdbV0044DeleteAccount(ctx, accountName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044DeleteAccountResponse(rsp)
}

// SlurmdbV0044GetAccountWithResponse request returning *SlurmdbV0044GetAccountResponse
func (c *ClientWithResponses) SlurmdbV0044GetAccountWithResponse(ctx context.Context, accountName string, params *SlurmdbV0044GetAccountParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetAccountResponse, error) {
	rsp, err := c.SlurmdbV0044GetAccount(ctx, accountName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044GetAccountResponse(rsp)
}

// SlurmdbV0044GetAccountsWithResponse request returning *SlurmdbV0044GetAccountsResponse
func (c *ClientWithResponses) SlurmdbV0044GetAccountsWithResponse(ctx context.Context, params *SlurmdbV0044GetAccountsParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetAccountsResponse, error) {
	rsp, err := c.SlurmdbV0044GetAccounts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044GetAccountsResponse(rsp)
}

// SlurmdbV0044PostAccountsWithBodyWithResponse request with arbitrary body returning *SlurmdbV0044PostAccountsResponse
func (c *ClientWithResponses) SlurmdbV0044PostAccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostAccountsResponse, error) {
	rsp, err := c.SlurmdbV0044PostAccountsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044PostAccountsResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0044PostAccountsWithResponse(ctx context.Context, body SlurmdbV0044PostAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostAccountsResponse, error) {
	rsp, err := c.SlurmdbV0044PostAccounts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044PostAccountsResponse(rsp)
}

// SlurmdbV0044PostAccountsAssociationWithBodyWithResponse request with arbitrary body returning *SlurmdbV0044PostAccountsAssociationResponse
func (c *ClientWithResponses) SlurmdbV0044PostAccountsAssociationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostAccountsAssociationResponse, error) {
	rsp, err := c.SlurmdbV0044PostAccountsAssociationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044PostAccountsAssociationResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0044PostAccountsAssociationWithResponse(ctx context.Context, body SlurmdbV0044PostAccountsAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostAccountsAssociationResponse, error) {
	rsp, err := c.SlurmdbV0044PostAccountsAssociation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044PostAccountsAssociationResponse(rsp)
}

// SlurmdbV0044DeleteAssociationWithResponse request returning *SlurmdbV0044DeleteAssociationResponse
func (c *ClientWithResponses) SlurmdbV0044DeleteAssociationWithResponse(ctx context.Context, params *SlurmdbV0044DeleteAssociationParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044DeleteAssociationResponse, error) {
	rsp, err := c.SlurmdbV0044DeleteAssociation(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044DeleteAssociationResponse(rsp)
}

// SlurmdbV0044GetAssociationWithResponse request returning *SlurmdbV0044GetAssociationResponse
func (c *ClientWithResponses) SlurmdbV0044GetAssociationWithResponse(ctx context.Context, params *SlurmdbV0044GetAssociationParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetAssociationResponse, error) {
	rsp, err := c.SlurmdbV0044GetAssociation(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044GetAssociationResponse(rsp)
}

// SlurmdbV0044DeleteAssociationsWithResponse request returning *SlurmdbV0044DeleteAssociationsResponse
func (c *ClientWithResponses) SlurmdbV0044DeleteAssociationsWithResponse(ctx context.Context, params *SlurmdbV0044DeleteAssociationsParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044DeleteAssociationsResponse, error) {
	rsp, err := c.SlurmdbV0044DeleteAssociations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044DeleteAssociationsResponse(rsp)
}

// SlurmdbV0044GetAssociationsWithResponse request returning *SlurmdbV0044GetAssociationsResponse
func (c *ClientWithResponses) SlurmdbV0044GetAssociationsWithResponse(ctx context.Context, params *SlurmdbV0044GetAssociationsParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetAssociationsResponse, error) {
	rsp, err := c.SlurmdbV0044GetAssociations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044GetAssociationsResponse(rsp)
}

// SlurmdbV0044PostAssociationsWithBodyWithResponse request with arbitrary body returning *SlurmdbV0044PostAssociationsResponse
func (c *ClientWithResponses) SlurmdbV0044PostAssociationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostAssociationsResponse, error) {
	rsp, err := c.SlurmdbV0044PostAssociationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044PostAssociationsResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0044PostAssociationsWithResponse(ctx context.Context, body SlurmdbV0044PostAssociationsJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostAssociationsResponse, error) {
	rsp, err := c.SlurmdbV0044PostAssociations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044PostAssociationsResponse(rsp)
}

// SlurmdbV0044DeleteClusterWithResponse request returning *SlurmdbV0044DeleteClusterResponse
func (c *ClientWithResponses) SlurmdbV0044DeleteClusterWithResponse(ctx context.Context, clusterName string, params *SlurmdbV0044DeleteClusterParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044DeleteClusterResponse, error) {
	rsp, err := c.SlurmdbV0044DeleteCluster(ctx, clusterName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044DeleteClusterResponse(rsp)
}

// SlurmdbV0044GetClusterWithResponse request returning *SlurmdbV0044GetClusterResponse
func (c *ClientWithResponses) SlurmdbV0044GetClusterWithResponse(ctx context.Context, clusterName string, params *SlurmdbV0044GetClusterParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetClusterResponse, error) {
	rsp, err := c.SlurmdbV0044GetCluster(ctx, clusterName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044GetClusterResponse(rsp)
}

// SlurmdbV0044GetClustersWithResponse request returning *SlurmdbV0044GetClustersResponse
func (c *ClientWithResponses) SlurmdbV0044GetClustersWithResponse(ctx context.Context, params *SlurmdbV0044GetClustersParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetClustersResponse, error) {
	rsp, err := c.SlurmdbV0044GetClusters(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044GetClustersResponse(rsp)
}

// SlurmdbV0044PostClustersWithBodyWithResponse request with arbitrary body returning *SlurmdbV0044PostClustersResponse
func (c *ClientWithResponses) SlurmdbV0044PostClustersWithBodyWithResponse(ctx context.Context, params *SlurmdbV0044PostClustersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostClustersResponse, error) {
	rsp, err := c.SlurmdbV0044PostClustersWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044PostClustersResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0044PostClustersWithResponse(ctx context.Context, params *SlurmdbV0044PostClustersParams, body SlurmdbV0044PostClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostClustersResponse, error) {
	rsp, err := c.SlurmdbV0044PostClusters(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044PostClustersResponse(rsp)
}

// SlurmdbV0044GetConfigWithResponse request returning *SlurmdbV0044GetConfigResponse
func (c *ClientWithResponses) SlurmdbV0044GetConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetConfigResponse, error) {
	rsp, err := c.SlurmdbV0044GetConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044GetConfigResponse(rsp)
}

// SlurmdbV0044PostConfigWithBodyWithResponse request with arbitrary body returning *SlurmdbV0044PostConfigResponse
func (c *ClientWithResponses) SlurmdbV0044PostConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostConfigResponse, error) {
	rsp, err := c.SlurmdbV0044PostConfigWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044PostConfigResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0044PostConfigWithResponse(ctx context.Context, body SlurmdbV0044PostConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostConfigResponse, error) {
	rsp, err := c.SlurmdbV0044PostConfig(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044PostConfigResponse(rsp)
}

// SlurmdbV0044GetDiagWithResponse request returning *SlurmdbV0044GetDiagResponse
func (c *ClientWithResponses) SlurmdbV0044GetDiagWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetDiagResponse, error) {
	rsp, err := c.SlurmdbV0044GetDiag(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044GetDiagResponse(rsp)
}

// SlurmdbV0044GetInstanceWithResponse request returning *SlurmdbV0044GetInstanceResponse
func (c *ClientWithResponses) SlurmdbV0044GetInstanceWithResponse(ctx context.Context, params *SlurmdbV0044GetInstanceParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetInstanceResponse, error) {
	rsp, err := c.SlurmdbV0044GetInstance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044GetInstanceResponse(rsp)
}

// SlurmdbV0044GetInstancesWithResponse request returning *SlurmdbV0044GetInstancesResponse
func (c *ClientWithResponses) SlurmdbV0044GetInstancesWithResponse(ctx context.Context, params *SlurmdbV0044GetInstancesParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetInstancesResponse, error) {
	rsp, err := c.SlurmdbV0044GetInstances(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044GetInstancesResponse(rsp)
}

// SlurmdbV0044GetJobWithResponse request returning *SlurmdbV0044GetJobResponse
func (c *ClientWithResponses) SlurmdbV0044GetJobWithResponse(ctx context.Context, jobId string, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetJobResponse, error) {
	rsp, err := c.SlurmdbV0044GetJob(ctx, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044GetJobResponse(rsp)
}

// SlurmdbV0044PostJobWithBodyWithResponse request with arbitrary body returning *SlurmdbV0044PostJobResponse
func (c *ClientWithResponses) SlurmdbV0044PostJobWithBodyWithResponse(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostJobResponse, error) {
	rsp, err := c.SlurmdbV0044PostJobWithBody(ctx, jobId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044PostJobResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0044PostJobWithResponse(ctx context.Context, jobId string, body SlurmdbV0044PostJobJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostJobResponse, error) {
	rsp, err := c.SlurmdbV0044PostJob(ctx, jobId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044PostJobResponse(rsp)
}

// SlurmdbV0044GetJobsWithResponse request returning *SlurmdbV0044GetJobsResponse
func (c *ClientWithResponses) SlurmdbV0044GetJobsWithResponse(ctx context.Context, params *SlurmdbV0044GetJobsParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetJobsResponse, error) {
	rsp, err := c.SlurmdbV0044GetJobs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044GetJobsResponse(rsp)
}

// SlurmdbV0044PostJobsWithBodyWithResponse request with arbitrary body returning *SlurmdbV0044PostJobsResponse
func (c *ClientWithResponses) SlurmdbV0044PostJobsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostJobsResponse, error) {
	rsp, err := c.SlurmdbV0044PostJobsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044PostJobsResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0044PostJobsWithResponse(ctx context.Context, body SlurmdbV0044PostJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostJobsResponse, error) {
	rsp, err := c.SlurmdbV0044PostJobs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044PostJobsResponse(rsp)
}

// SlurmdbV0044GetPingWithResponse request returning *SlurmdbV0044GetPingResponse
func (c *ClientWithResponses) SlurmdbV0044GetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetPingResponse, error) {
	rsp, err := c.SlurmdbV0044GetPing(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044GetPingResponse(rsp)
}

// SlurmdbV0044GetQosWithResponse request returning *SlurmdbV0044GetQosResponse
func (c *ClientWithResponses) SlurmdbV0044GetQosWithResponse(ctx context.Context, params *SlurmdbV0044GetQosParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetQosResponse, error) {
	rsp, err := c.SlurmdbV0044GetQos(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044GetQosResponse(rsp)
}

// SlurmdbV0044PostQosWithBodyWithResponse request with arbitrary body returning *SlurmdbV0044PostQosResponse
func (c *ClientWithResponses) SlurmdbV0044PostQosWithBodyWithResponse(ctx context.Context, params *SlurmdbV0044PostQosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostQosResponse, error) {
	rsp, err := c.SlurmdbV0044PostQosWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044PostQosResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0044PostQosWithResponse(ctx context.Context, params *SlurmdbV0044PostQosParams, body SlurmdbV0044PostQosJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostQosResponse, error) {
	rsp, err := c.SlurmdbV0044PostQos(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044PostQosResponse(rsp)
}

// SlurmdbV0044DeleteSingleQosWithResponse request returning *SlurmdbV0044DeleteSingleQosResponse
func (c *ClientWithResponses) SlurmdbV0044DeleteSingleQosWithResponse(ctx context.Context, qos string, reqEditors ...RequestEditorFn) (*SlurmdbV0044DeleteSingleQosResponse, error) {
	rsp, err := c.SlurmdbV0044DeleteSingleQos(ctx, qos, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044DeleteSingleQosResponse(rsp)
}

// SlurmdbV0044GetSingleQosWithResponse request returning *SlurmdbV0044GetSingleQosResponse
func (c *ClientWithResponses) SlurmdbV0044GetSingleQosWithResponse(ctx context.Context, qos string, params *SlurmdbV0044GetSingleQosParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetSingleQosResponse, error) {
	rsp, err := c.SlurmdbV0044GetSingleQos(ctx, qos, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044GetSingleQosResponse(rsp)
}

// SlurmdbV0044GetTresWithResponse request returning *SlurmdbV0044GetTresResponse
func (c *ClientWithResponses) SlurmdbV0044GetTresWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetTresResponse, error) {
	rsp, err := c.SlurmdbV0044GetTres(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044GetTresResponse(rsp)
}

// SlurmdbV0044PostTresWithBodyWithResponse request with arbitrary body returning *SlurmdbV0044PostTresResponse
func (c *ClientWithResponses) SlurmdbV0044PostTresWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostTresResponse, error) {
	rsp, err := c.SlurmdbV0044PostTresWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044PostTresResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0044PostTresWithResponse(ctx context.Context, body SlurmdbV0044PostTresJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostTresResponse, error) {
	rsp, err := c.SlurmdbV0044PostTres(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044PostTresResponse(rsp)
}

// SlurmdbV0044DeleteUserWithResponse request returning *SlurmdbV0044DeleteUserResponse
func (c *ClientWithResponses) SlurmdbV0044DeleteUserWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*SlurmdbV0044DeleteUserResponse, error) {
	rsp, err := c.SlurmdbV0044DeleteUser(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044DeleteUserResponse(rsp)
}

// SlurmdbV0044GetUserWithResponse request returning *SlurmdbV0044GetUserResponse
func (c *ClientWithResponses) SlurmdbV0044GetUserWithResponse(ctx context.Context, name string, params *SlurmdbV0044GetUserParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetUserResponse, error) {
	rsp, err := c.SlurmdbV0044GetUser(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044GetUserResponse(rsp)
}

// SlurmdbV0044GetUsersWithResponse request returning *SlurmdbV0044GetUsersResponse
func (c *ClientWithResponses) SlurmdbV0044GetUsersWithResponse(ctx context.Context, params *SlurmdbV0044GetUsersParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetUsersResponse, error) {
	rsp, err := c.SlurmdbV0044GetUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044GetUsersResponse(rsp)
}

// SlurmdbV0044PostUsersWithBodyWithResponse request with arbitrary body returning *SlurmdbV0044PostUsersResponse
func (c *ClientWithResponses) SlurmdbV0044PostUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostUsersResponse, error) {
	rsp, err := c.SlurmdbV0044PostUsersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044PostUsersResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0044PostUsersWithResponse(ctx context.Context, body SlurmdbV0044PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostUsersResponse, error) {
	rsp, err := c.SlurmdbV0044PostUsers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044PostUsersResponse(rsp)
}

// SlurmdbV0044PostUsersAssociationWithBodyWithResponse request with arbitrary body returning *SlurmdbV0044PostUsersAssociationResponse
func (c *ClientWithResponses) SlurmdbV0044PostUsersAssociationWithBodyWithResponse(ctx context.Context, params *SlurmdbV0044PostUsersAssociationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostUsersAssociationResponse, error) {
	rsp, err := c.SlurmdbV0044PostUsersAssociationWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044PostUsersAssociationResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0044PostUsersAssociationWithResponse(ctx context.Context, params *SlurmdbV0044PostUsersAssociationParams, body SlurmdbV0044PostUsersAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostUsersAssociationResponse, error) {
	rsp, err := c.SlurmdbV0044PostUsersAssociation(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044PostUsersAssociationResponse(rsp)
}

// SlurmdbV0044DeleteWckeyWithResponse request returning *SlurmdbV0044DeleteWckeyResponse
func (c *ClientWithResponses) SlurmdbV0044DeleteWckeyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SlurmdbV0044DeleteWckeyResponse, error) {
	rsp, err := c.SlurmdbV0044DeleteWckey(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044DeleteWckeyResponse(rsp)
}

// SlurmdbV0044GetWckeyWithResponse request returning *SlurmdbV0044GetWckeyResponse
func (c *ClientWithResponses) SlurmdbV0044GetWckeyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetWckeyResponse, error) {
	rsp, err := c.SlurmdbV0044GetWckey(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044GetWckeyResponse(rsp)
}

// SlurmdbV0044GetWckeysWithResponse request returning *SlurmdbV0044GetWckeysResponse
func (c *ClientWithResponses) SlurmdbV0044GetWckeysWithResponse(ctx context.Context, params *SlurmdbV0044GetWckeysParams, reqEditors ...RequestEditorFn) (*SlurmdbV0044GetWckeysResponse, error) {
	rsp, err := c.SlurmdbV0044GetWckeys(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044GetWckeysResponse(rsp)
}

// SlurmdbV0044PostWckeysWithBodyWithResponse request with arbitrary body returning *SlurmdbV0044PostWckeysResponse
func (c *ClientWithResponses) SlurmdbV0044PostWckeysWithBodyWithResponse(ctx context.Context, params *SlurmdbV0044PostWckeysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostWckeysResponse, error) {
	rsp, err := c.SlurmdbV0044PostWckeysWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044PostWckeysResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0044PostWckeysWithResponse(ctx context.Context, params *SlurmdbV0044PostWckeysParams, body SlurmdbV0044PostWckeysJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0044PostWckeysResponse, error) {
	rsp, err := c.SlurmdbV0044PostWckeys(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0044PostWckeysResponse(rsp)
}

// ParseSlurmV0044GetDiagResponse parses an HTTP response from a SlurmV0044GetDiagWithResponse call
func ParseSlurmV0044GetDiagResponse(rsp *http.Response) (*SlurmV0044GetDiagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0044GetDiagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiDiagResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiDiagResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0044PostJobAllocateResponse parses an HTTP response from a SlurmV0044PostJobAllocateWithResponse call
func ParseSlurmV0044PostJobAllocateResponse(rsp *http.Response) (*SlurmV0044PostJobAllocateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0044PostJobAllocateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiJobAllocResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiJobAllocResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0044PostJobSubmitResponse parses an HTTP response from a SlurmV0044PostJobSubmitWithResponse call
func ParseSlurmV0044PostJobSubmitResponse(rsp *http.Response) (*SlurmV0044PostJobSubmitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0044PostJobSubmitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiJobSubmitResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiJobSubmitResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0044DeleteJobResponse parses an HTTP response from a SlurmV0044DeleteJobWithResponse call
func ParseSlurmV0044DeleteJobResponse(rsp *http.Response) (*SlurmV0044DeleteJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0044DeleteJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiKillJobResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiKillJobResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0044GetJobResponse parses an HTTP response from a SlurmV0044GetJobWithResponse call
func ParseSlurmV0044GetJobResponse(rsp *http.Response) (*SlurmV0044GetJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0044GetJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiJobInfoResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiJobInfoResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0044PostJobResponse parses an HTTP response from a SlurmV0044PostJobWithResponse call
func ParseSlurmV0044PostJobResponse(rsp *http.Response) (*SlurmV0044PostJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0044PostJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiJobPostResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiJobPostResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0044DeleteJobsResponse parses an HTTP response from a SlurmV0044DeleteJobsWithResponse call
func ParseSlurmV0044DeleteJobsResponse(rsp *http.Response) (*SlurmV0044DeleteJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0044DeleteJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiKillJobsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiKillJobsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0044GetJobsResponse parses an HTTP response from a SlurmV0044GetJobsWithResponse call
func ParseSlurmV0044GetJobsResponse(rsp *http.Response) (*SlurmV0044GetJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0044GetJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiJobInfoResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiJobInfoResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0044GetJobsStateResponse parses an HTTP response from a SlurmV0044GetJobsStateWithResponse call
func ParseSlurmV0044GetJobsStateResponse(rsp *http.Response) (*SlurmV0044GetJobsStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0044GetJobsStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiJobInfoResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiJobInfoResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0044GetLicensesResponse parses an HTTP response from a SlurmV0044GetLicensesWithResponse call
func ParseSlurmV0044GetLicensesResponse(rsp *http.Response) (*SlurmV0044GetLicensesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0044GetLicensesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiLicensesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiLicensesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0044PostNewNodeResponse parses an HTTP response from a SlurmV0044PostNewNodeWithResponse call
func ParseSlurmV0044PostNewNodeResponse(rsp *http.Response) (*SlurmV0044PostNewNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0044PostNewNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0044DeleteNodeResponse parses an HTTP response from a SlurmV0044DeleteNodeWithResponse call
func ParseSlurmV0044DeleteNodeResponse(rsp *http.Response) (*SlurmV0044DeleteNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0044DeleteNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0044GetNodeResponse parses an HTTP response from a SlurmV0044GetNodeWithResponse call
func ParseSlurmV0044GetNodeResponse(rsp *http.Response) (*SlurmV0044GetNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0044GetNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiNodesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiNodesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0044PostNodeResponse parses an HTTP response from a SlurmV0044PostNodeWithResponse call
func ParseSlurmV0044PostNodeResponse(rsp *http.Response) (*SlurmV0044PostNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0044PostNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0044GetNodesResponse parses an HTTP response from a SlurmV0044GetNodesWithResponse call
func ParseSlurmV0044GetNodesResponse(rsp *http.Response) (*SlurmV0044GetNodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0044GetNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiNodesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiNodesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0044PostNodesResponse parses an HTTP response from a SlurmV0044PostNodesWithResponse call
func ParseSlurmV0044PostNodesResponse(rsp *http.Response) (*SlurmV0044PostNodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0044PostNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0044GetPartitionResponse parses an HTTP response from a SlurmV0044GetPartitionWithResponse call
func ParseSlurmV0044GetPartitionResponse(rsp *http.Response) (*SlurmV0044GetPartitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0044GetPartitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiPartitionResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiPartitionResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0044GetPartitionsResponse parses an HTTP response from a SlurmV0044GetPartitionsWithResponse call
func ParseSlurmV0044GetPartitionsResponse(rsp *http.Response) (*SlurmV0044GetPartitionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0044GetPartitionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiPartitionResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiPartitionResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0044GetPingResponse parses an HTTP response from a SlurmV0044GetPingWithResponse call
func ParseSlurmV0044GetPingResponse(rsp *http.Response) (*SlurmV0044GetPingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0044GetPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiPingArrayResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiPingArrayResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0044GetReconfigureResponse parses an HTTP response from a SlurmV0044GetReconfigureWithResponse call
func ParseSlurmV0044GetReconfigureResponse(rsp *http.Response) (*SlurmV0044GetReconfigureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0044GetReconfigureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0044PostReservationResponse parses an HTTP response from a SlurmV0044PostReservationWithResponse call
func ParseSlurmV0044PostReservationResponse(rsp *http.Response) (*SlurmV0044PostReservationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0044PostReservationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiReservationModResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiReservationModResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0044DeleteReservationResponse parses an HTTP response from a SlurmV0044DeleteReservationWithResponse call
func ParseSlurmV0044DeleteReservationResponse(rsp *http.Response) (*SlurmV0044DeleteReservationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0044DeleteReservationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0044GetReservationResponse parses an HTTP response from a SlurmV0044GetReservationWithResponse call
func ParseSlurmV0044GetReservationResponse(rsp *http.Response) (*SlurmV0044GetReservationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0044GetReservationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiReservationResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiReservationResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0044GetReservationsResponse parses an HTTP response from a SlurmV0044GetReservationsWithResponse call
func ParseSlurmV0044GetReservationsResponse(rsp *http.Response) (*SlurmV0044GetReservationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0044GetReservationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiReservationResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiReservationResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0044PostReservationsResponse parses an HTTP response from a SlurmV0044PostReservationsWithResponse call
func ParseSlurmV0044PostReservationsResponse(rsp *http.Response) (*SlurmV0044PostReservationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0044PostReservationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiReservationModResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiReservationModResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0044GetSharesResponse parses an HTTP response from a SlurmV0044GetSharesWithResponse call
func ParseSlurmV0044GetSharesResponse(rsp *http.Response) (*SlurmV0044GetSharesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0044GetSharesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiSharesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiSharesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044DeleteAccountResponse parses an HTTP response from a SlurmdbV0044DeleteAccountWithResponse call
func ParseSlurmdbV0044DeleteAccountResponse(rsp *http.Response) (*SlurmdbV0044DeleteAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044DeleteAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiAccountsRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiAccountsRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044GetAccountResponse parses an HTTP response from a SlurmdbV0044GetAccountWithResponse call
func ParseSlurmdbV0044GetAccountResponse(rsp *http.Response) (*SlurmdbV0044GetAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044GetAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiAccountsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiAccountsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044GetAccountsResponse parses an HTTP response from a SlurmdbV0044GetAccountsWithResponse call
func ParseSlurmdbV0044GetAccountsResponse(rsp *http.Response) (*SlurmdbV0044GetAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044GetAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiAccountsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiAccountsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044PostAccountsResponse parses an HTTP response from a SlurmdbV0044PostAccountsWithResponse call
func ParseSlurmdbV0044PostAccountsResponse(rsp *http.Response) (*SlurmdbV0044PostAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044PostAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044PostAccountsAssociationResponse parses an HTTP response from a SlurmdbV0044PostAccountsAssociationWithResponse call
func ParseSlurmdbV0044PostAccountsAssociationResponse(rsp *http.Response) (*SlurmdbV0044PostAccountsAssociationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044PostAccountsAssociationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiAccountsAddCondRespStr
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiAccountsAddCondRespStr
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044DeleteAssociationResponse parses an HTTP response from a SlurmdbV0044DeleteAssociationWithResponse call
func ParseSlurmdbV0044DeleteAssociationResponse(rsp *http.Response) (*SlurmdbV0044DeleteAssociationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044DeleteAssociationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiAssocsRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiAssocsRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044GetAssociationResponse parses an HTTP response from a SlurmdbV0044GetAssociationWithResponse call
func ParseSlurmdbV0044GetAssociationResponse(rsp *http.Response) (*SlurmdbV0044GetAssociationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044GetAssociationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiAssocsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiAssocsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044DeleteAssociationsResponse parses an HTTP response from a SlurmdbV0044DeleteAssociationsWithResponse call
func ParseSlurmdbV0044DeleteAssociationsResponse(rsp *http.Response) (*SlurmdbV0044DeleteAssociationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044DeleteAssociationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiAssocsRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiAssocsRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044GetAssociationsResponse parses an HTTP response from a SlurmdbV0044GetAssociationsWithResponse call
func ParseSlurmdbV0044GetAssociationsResponse(rsp *http.Response) (*SlurmdbV0044GetAssociationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044GetAssociationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiAssocsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiAssocsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044PostAssociationsResponse parses an HTTP response from a SlurmdbV0044PostAssociationsWithResponse call
func ParseSlurmdbV0044PostAssociationsResponse(rsp *http.Response) (*SlurmdbV0044PostAssociationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044PostAssociationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044DeleteClusterResponse parses an HTTP response from a SlurmdbV0044DeleteClusterWithResponse call
func ParseSlurmdbV0044DeleteClusterResponse(rsp *http.Response) (*SlurmdbV0044DeleteClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044DeleteClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiClustersRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiClustersRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044GetClusterResponse parses an HTTP response from a SlurmdbV0044GetClusterWithResponse call
func ParseSlurmdbV0044GetClusterResponse(rsp *http.Response) (*SlurmdbV0044GetClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044GetClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiClustersResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiClustersResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044GetClustersResponse parses an HTTP response from a SlurmdbV0044GetClustersWithResponse call
func ParseSlurmdbV0044GetClustersResponse(rsp *http.Response) (*SlurmdbV0044GetClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044GetClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiClustersResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiClustersResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044PostClustersResponse parses an HTTP response from a SlurmdbV0044PostClustersWithResponse call
func ParseSlurmdbV0044PostClustersResponse(rsp *http.Response) (*SlurmdbV0044PostClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044PostClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044GetConfigResponse parses an HTTP response from a SlurmdbV0044GetConfigWithResponse call
func ParseSlurmdbV0044GetConfigResponse(rsp *http.Response) (*SlurmdbV0044GetConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044GetConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiSlurmdbdConfigResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiSlurmdbdConfigResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044PostConfigResponse parses an HTTP response from a SlurmdbV0044PostConfigWithResponse call
func ParseSlurmdbV0044PostConfigResponse(rsp *http.Response) (*SlurmdbV0044PostConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044PostConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044GetDiagResponse parses an HTTP response from a SlurmdbV0044GetDiagWithResponse call
func ParseSlurmdbV0044GetDiagResponse(rsp *http.Response) (*SlurmdbV0044GetDiagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044GetDiagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiSlurmdbdStatsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiSlurmdbdStatsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044GetInstanceResponse parses an HTTP response from a SlurmdbV0044GetInstanceWithResponse call
func ParseSlurmdbV0044GetInstanceResponse(rsp *http.Response) (*SlurmdbV0044GetInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044GetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiInstancesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiInstancesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044GetInstancesResponse parses an HTTP response from a SlurmdbV0044GetInstancesWithResponse call
func ParseSlurmdbV0044GetInstancesResponse(rsp *http.Response) (*SlurmdbV0044GetInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044GetInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiInstancesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiInstancesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044GetJobResponse parses an HTTP response from a SlurmdbV0044GetJobWithResponse call
func ParseSlurmdbV0044GetJobResponse(rsp *http.Response) (*SlurmdbV0044GetJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044GetJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiSlurmdbdJobsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiSlurmdbdJobsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044PostJobResponse parses an HTTP response from a SlurmdbV0044PostJobWithResponse call
func ParseSlurmdbV0044PostJobResponse(rsp *http.Response) (*SlurmdbV0044PostJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044PostJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiJobModifyResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiJobModifyResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044GetJobsResponse parses an HTTP response from a SlurmdbV0044GetJobsWithResponse call
func ParseSlurmdbV0044GetJobsResponse(rsp *http.Response) (*SlurmdbV0044GetJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044GetJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiSlurmdbdJobsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiSlurmdbdJobsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044PostJobsResponse parses an HTTP response from a SlurmdbV0044PostJobsWithResponse call
func ParseSlurmdbV0044PostJobsResponse(rsp *http.Response) (*SlurmdbV0044PostJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044PostJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiJobModifyResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiJobModifyResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044GetPingResponse parses an HTTP response from a SlurmdbV0044GetPingWithResponse call
func ParseSlurmdbV0044GetPingResponse(rsp *http.Response) (*SlurmdbV0044GetPingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044GetPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiSlurmdbdPingResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiSlurmdbdPingResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044GetQosResponse parses an HTTP response from a SlurmdbV0044GetQosWithResponse call
func ParseSlurmdbV0044GetQosResponse(rsp *http.Response) (*SlurmdbV0044GetQosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044GetQosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiSlurmdbdQosResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiSlurmdbdQosResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044PostQosResponse parses an HTTP response from a SlurmdbV0044PostQosWithResponse call
func ParseSlurmdbV0044PostQosResponse(rsp *http.Response) (*SlurmdbV0044PostQosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044PostQosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044DeleteSingleQosResponse parses an HTTP response from a SlurmdbV0044DeleteSingleQosWithResponse call
func ParseSlurmdbV0044DeleteSingleQosResponse(rsp *http.Response) (*SlurmdbV0044DeleteSingleQosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044DeleteSingleQosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiSlurmdbdQosRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiSlurmdbdQosRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044GetSingleQosResponse parses an HTTP response from a SlurmdbV0044GetSingleQosWithResponse call
func ParseSlurmdbV0044GetSingleQosResponse(rsp *http.Response) (*SlurmdbV0044GetSingleQosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044GetSingleQosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiSlurmdbdQosResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiSlurmdbdQosResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044GetTresResponse parses an HTTP response from a SlurmdbV0044GetTresWithResponse call
func ParseSlurmdbV0044GetTresResponse(rsp *http.Response) (*SlurmdbV0044GetTresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044GetTresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiTresResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiTresResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044PostTresResponse parses an HTTP response from a SlurmdbV0044PostTresWithResponse call
func ParseSlurmdbV0044PostTresResponse(rsp *http.Response) (*SlurmdbV0044PostTresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044PostTresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044DeleteUserResponse parses an HTTP response from a SlurmdbV0044DeleteUserWithResponse call
func ParseSlurmdbV0044DeleteUserResponse(rsp *http.Response) (*SlurmdbV0044DeleteUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044DeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044GetUserResponse parses an HTTP response from a SlurmdbV0044GetUserWithResponse call
func ParseSlurmdbV0044GetUserResponse(rsp *http.Response) (*SlurmdbV0044GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiUsersResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiUsersResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044GetUsersResponse parses an HTTP response from a SlurmdbV0044GetUsersWithResponse call
func ParseSlurmdbV0044GetUsersResponse(rsp *http.Response) (*SlurmdbV0044GetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiUsersResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiUsersResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044PostUsersResponse parses an HTTP response from a SlurmdbV0044PostUsersWithResponse call
func ParseSlurmdbV0044PostUsersResponse(rsp *http.Response) (*SlurmdbV0044PostUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044PostUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044PostUsersAssociationResponse parses an HTTP response from a SlurmdbV0044PostUsersAssociationWithResponse call
func ParseSlurmdbV0044PostUsersAssociationResponse(rsp *http.Response) (*SlurmdbV0044PostUsersAssociationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044PostUsersAssociationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiUsersAddCondRespStr
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiUsersAddCondRespStr
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044DeleteWckeyResponse parses an HTTP response from a SlurmdbV0044DeleteWckeyWithResponse call
func ParseSlurmdbV0044DeleteWckeyResponse(rsp *http.Response) (*SlurmdbV0044DeleteWckeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044DeleteWckeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiWckeyRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiWckeyRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044GetWckeyResponse parses an HTTP response from a SlurmdbV0044GetWckeyWithResponse call
func ParseSlurmdbV0044GetWckeyResponse(rsp *http.Response) (*SlurmdbV0044GetWckeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044GetWckeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiWckeyResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiWckeyResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044GetWckeysResponse parses an HTTP response from a SlurmdbV0044GetWckeysWithResponse call
func ParseSlurmdbV0044GetWckeysResponse(rsp *http.Response) (*SlurmdbV0044GetWckeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044GetWckeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiWckeyResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiWckeyResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0044PostWckeysResponse parses an HTTP response from a SlurmdbV0044PostWckeysWithResponse call
func ParseSlurmdbV0044PostWckeysResponse(rsp *http.Response) (*SlurmdbV0044PostWckeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0044PostWckeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0044OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0044OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
