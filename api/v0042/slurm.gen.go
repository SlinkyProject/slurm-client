// Package v0042 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package v0042

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
	TokenScopes      = "token.Scopes"
	UserScopes       = "user.Scopes"
)

// Defines values for V0042AccountFlags.
const (
	V0042AccountFlagsDELETED          V0042AccountFlags = "DELETED"
	V0042AccountFlagsNoUsersAreCoords V0042AccountFlags = "NoUsersAreCoords"
	V0042AccountFlagsUsersAreCoords   V0042AccountFlags = "UsersAreCoords"
	V0042AccountFlagsWithAssociations V0042AccountFlags = "WithAssociations"
	V0042AccountFlagsWithCoordinators V0042AccountFlags = "WithCoordinators"
)

// Defines values for V0042AssocFlags.
const (
	V0042AssocFlagsDELETED          V0042AssocFlags = "DELETED"
	V0042AssocFlagsExact            V0042AssocFlags = "Exact"
	V0042AssocFlagsNoUpdate         V0042AssocFlags = "NoUpdate"
	V0042AssocFlagsNoUsersAreCoords V0042AssocFlags = "NoUsersAreCoords"
	V0042AssocFlagsUsersAreCoords   V0042AssocFlags = "UsersAreCoords"
)

// Defines values for V0042AssocSharesObjWrapType.
const (
	ASSOCIATION V0042AssocSharesObjWrapType = "ASSOCIATION"
	USER        V0042AssocSharesObjWrapType = "USER"
)

// Defines values for V0042ClusterRecFlags.
const (
	V0042ClusterRecFlagsEXTERNAL       V0042ClusterRecFlags = "EXTERNAL"
	V0042ClusterRecFlagsFEDERATION     V0042ClusterRecFlags = "FEDERATION"
	V0042ClusterRecFlagsFRONTEND       V0042ClusterRecFlags = "FRONT_END"
	V0042ClusterRecFlagsMULTIPLESLURMD V0042ClusterRecFlags = "MULTIPLE_SLURMD"
	V0042ClusterRecFlagsREGISTERING    V0042ClusterRecFlags = "REGISTERING"
)

// Defines values for V0042CronEntryFlags.
const (
	WILDDAYOFMONTH V0042CronEntryFlags = "WILD_DAY_OF_MONTH"
	WILDDAYOFWEEK  V0042CronEntryFlags = "WILD_DAY_OF_WEEK"
	WILDHOUR       V0042CronEntryFlags = "WILD_HOUR"
	WILDMINUTE     V0042CronEntryFlags = "WILD_MINUTE"
	WILDMONTH      V0042CronEntryFlags = "WILD_MONTH"
)

// Defines values for V0042JobFlags.
const (
	V0042JobFlagsCLEARSCHEDULING   V0042JobFlags = "CLEAR_SCHEDULING"
	V0042JobFlagsNONE              V0042JobFlags = "NONE"
	V0042JobFlagsNOTSET            V0042JobFlags = "NOT_SET"
	V0042JobFlagsSTARTEDONBACKFILL V0042JobFlags = "STARTED_ON_BACKFILL"
	V0042JobFlagsSTARTEDONSCHEDULE V0042JobFlags = "STARTED_ON_SCHEDULE"
	V0042JobFlagsSTARTEDONSUBMIT   V0042JobFlags = "STARTED_ON_SUBMIT"
	V0042JobFlagsSTARTRECEIVED     V0042JobFlags = "START_RECEIVED"
)

// Defines values for V0042JobStateCurrent.
const (
	V0042JobStateCurrentBOOTFAIL     V0042JobStateCurrent = "BOOT_FAIL"
	V0042JobStateCurrentCANCELLED    V0042JobStateCurrent = "CANCELLED"
	V0042JobStateCurrentCOMPLETED    V0042JobStateCurrent = "COMPLETED"
	V0042JobStateCurrentCOMPLETING   V0042JobStateCurrent = "COMPLETING"
	V0042JobStateCurrentCONFIGURING  V0042JobStateCurrent = "CONFIGURING"
	V0042JobStateCurrentDEADLINE     V0042JobStateCurrent = "DEADLINE"
	V0042JobStateCurrentFAILED       V0042JobStateCurrent = "FAILED"
	V0042JobStateCurrentLAUNCHFAILED V0042JobStateCurrent = "LAUNCH_FAILED"
	V0042JobStateCurrentNODEFAIL     V0042JobStateCurrent = "NODE_FAIL"
	V0042JobStateCurrentOUTOFMEMORY  V0042JobStateCurrent = "OUT_OF_MEMORY"
	V0042JobStateCurrentPENDING      V0042JobStateCurrent = "PENDING"
	V0042JobStateCurrentPOWERUPNODE  V0042JobStateCurrent = "POWER_UP_NODE"
	V0042JobStateCurrentPREEMPTED    V0042JobStateCurrent = "PREEMPTED"
	V0042JobStateCurrentRECONFIGFAIL V0042JobStateCurrent = "RECONFIG_FAIL"
	V0042JobStateCurrentREQUEUED     V0042JobStateCurrent = "REQUEUED"
	V0042JobStateCurrentREQUEUEFED   V0042JobStateCurrent = "REQUEUE_FED"
	V0042JobStateCurrentREQUEUEHOLD  V0042JobStateCurrent = "REQUEUE_HOLD"
	V0042JobStateCurrentRESIZING     V0042JobStateCurrent = "RESIZING"
	V0042JobStateCurrentRESVDELHOLD  V0042JobStateCurrent = "RESV_DEL_HOLD"
	V0042JobStateCurrentREVOKED      V0042JobStateCurrent = "REVOKED"
	V0042JobStateCurrentRUNNING      V0042JobStateCurrent = "RUNNING"
	V0042JobStateCurrentSIGNALING    V0042JobStateCurrent = "SIGNALING"
	V0042JobStateCurrentSPECIALEXIT  V0042JobStateCurrent = "SPECIAL_EXIT"
	V0042JobStateCurrentSTAGEOUT     V0042JobStateCurrent = "STAGE_OUT"
	V0042JobStateCurrentSTOPPED      V0042JobStateCurrent = "STOPPED"
	V0042JobStateCurrentSUSPENDED    V0042JobStateCurrent = "SUSPENDED"
	V0042JobStateCurrentTIMEOUT      V0042JobStateCurrent = "TIMEOUT"
)

// Defines values for V0042JobDescMsgCpuBindingFlags.
const (
	V0042JobDescMsgCpuBindingFlagsCPUBINDLDMAP            V0042JobDescMsgCpuBindingFlags = "CPU_BIND_LDMAP"
	V0042JobDescMsgCpuBindingFlagsCPUBINDLDMASK           V0042JobDescMsgCpuBindingFlags = "CPU_BIND_LDMASK"
	V0042JobDescMsgCpuBindingFlagsCPUBINDLDRANK           V0042JobDescMsgCpuBindingFlags = "CPU_BIND_LDRANK"
	V0042JobDescMsgCpuBindingFlagsCPUBINDMAP              V0042JobDescMsgCpuBindingFlags = "CPU_BIND_MAP"
	V0042JobDescMsgCpuBindingFlagsCPUBINDMASK             V0042JobDescMsgCpuBindingFlags = "CPU_BIND_MASK"
	V0042JobDescMsgCpuBindingFlagsCPUBINDNONE             V0042JobDescMsgCpuBindingFlags = "CPU_BIND_NONE"
	V0042JobDescMsgCpuBindingFlagsCPUBINDONETHREADPERCORE V0042JobDescMsgCpuBindingFlags = "CPU_BIND_ONE_THREAD_PER_CORE"
	V0042JobDescMsgCpuBindingFlagsCPUBINDRANK             V0042JobDescMsgCpuBindingFlags = "CPU_BIND_RANK"
	V0042JobDescMsgCpuBindingFlagsCPUBINDTOCORES          V0042JobDescMsgCpuBindingFlags = "CPU_BIND_TO_CORES"
	V0042JobDescMsgCpuBindingFlagsCPUBINDTOLDOMS          V0042JobDescMsgCpuBindingFlags = "CPU_BIND_TO_LDOMS"
	V0042JobDescMsgCpuBindingFlagsCPUBINDTOSOCKETS        V0042JobDescMsgCpuBindingFlags = "CPU_BIND_TO_SOCKETS"
	V0042JobDescMsgCpuBindingFlagsCPUBINDTOTHREADS        V0042JobDescMsgCpuBindingFlags = "CPU_BIND_TO_THREADS"
	V0042JobDescMsgCpuBindingFlagsVERBOSE                 V0042JobDescMsgCpuBindingFlags = "VERBOSE"
)

// Defines values for V0042JobDescMsgFlags.
const (
	V0042JobDescMsgFlagsACCRUECOUNTCLEARED       V0042JobDescMsgFlags = "ACCRUE_COUNT_CLEARED"
	V0042JobDescMsgFlagsBACKFILLATTEMPTED        V0042JobDescMsgFlags = "BACKFILL_ATTEMPTED"
	V0042JobDescMsgFlagsCRONJOB                  V0042JobDescMsgFlags = "CRON_JOB"
	V0042JobDescMsgFlagsDEPENDENT                V0042JobDescMsgFlags = "DEPENDENT"
	V0042JobDescMsgFlagsEXACTCPUCOUNTREQUESTED   V0042JobDescMsgFlags = "EXACT_CPU_COUNT_REQUESTED"
	V0042JobDescMsgFlagsEXACTMEMORYREQUESTED     V0042JobDescMsgFlags = "EXACT_MEMORY_REQUESTED"
	V0042JobDescMsgFlagsEXACTTASKCOUNTREQUESTED  V0042JobDescMsgFlags = "EXACT_TASK_COUNT_REQUESTED"
	V0042JobDescMsgFlagsGRESBINDINGDISABLED      V0042JobDescMsgFlags = "GRES_BINDING_DISABLED"
	V0042JobDescMsgFlagsGRESBINDINGENFORCED      V0042JobDescMsgFlags = "GRES_BINDING_ENFORCED"
	V0042JobDescMsgFlagsHASSTATEDIRECTORY        V0042JobDescMsgFlags = "HAS_STATE_DIRECTORY"
	V0042JobDescMsgFlagsHETEROGENEOUSJOB         V0042JobDescMsgFlags = "HETEROGENEOUS_JOB"
	V0042JobDescMsgFlagsJOBACCRUETIMERESET       V0042JobDescMsgFlags = "JOB_ACCRUE_TIME_RESET"
	V0042JobDescMsgFlagsJOBKILLHURRY             V0042JobDescMsgFlags = "JOB_KILL_HURRY"
	V0042JobDescMsgFlagsJOBWASRUNNING            V0042JobDescMsgFlags = "JOB_WAS_RUNNING"
	V0042JobDescMsgFlagsKILLINVALIDDEPENDENCY    V0042JobDescMsgFlags = "KILL_INVALID_DEPENDENCY"
	V0042JobDescMsgFlagsMAGNETIC                 V0042JobDescMsgFlags = "MAGNETIC"
	V0042JobDescMsgFlagsNOKILLINVALIDDEPENDENCY  V0042JobDescMsgFlags = "NO_KILL_INVALID_DEPENDENCY"
	V0042JobDescMsgFlagsPARTITIONASSIGNED        V0042JobDescMsgFlags = "PARTITION_ASSIGNED"
	V0042JobDescMsgFlagsPREFERMINIMUMNODECOUNT   V0042JobDescMsgFlags = "PREFER_MINIMUM_NODE_COUNT"
	V0042JobDescMsgFlagsSCHEDULINGATTEMPTED      V0042JobDescMsgFlags = "SCHEDULING_ATTEMPTED"
	V0042JobDescMsgFlagsSENDJOBENVIRONMENT       V0042JobDescMsgFlags = "SEND_JOB_ENVIRONMENT"
	V0042JobDescMsgFlagsSIBLINGCLUSTERUPDATEONLY V0042JobDescMsgFlags = "SIBLING_CLUSTER_UPDATE_ONLY"
	V0042JobDescMsgFlagsSKIPTRESSTRINGACCOUNTING V0042JobDescMsgFlags = "SKIP_TRES_STRING_ACCOUNTING"
	V0042JobDescMsgFlagsSPREADJOB                V0042JobDescMsgFlags = "SPREAD_JOB"
	V0042JobDescMsgFlagsSTEPMGRENABLED           V0042JobDescMsgFlags = "STEPMGR_ENABLED"
	V0042JobDescMsgFlagsTESTINGBACKFILL          V0042JobDescMsgFlags = "TESTING_BACKFILL"
	V0042JobDescMsgFlagsTESTINGWHOLENODEBACKFILL V0042JobDescMsgFlags = "TESTING_WHOLE_NODE_BACKFILL"
	V0042JobDescMsgFlagsTESTNOWONLY              V0042JobDescMsgFlags = "TEST_NOW_ONLY"
	V0042JobDescMsgFlagsTOPPRIORITYJOB           V0042JobDescMsgFlags = "TOP_PRIORITY_JOB"
	V0042JobDescMsgFlagsUSINGDEFAULTACCOUNT      V0042JobDescMsgFlags = "USING_DEFAULT_ACCOUNT"
	V0042JobDescMsgFlagsUSINGDEFAULTPARTITION    V0042JobDescMsgFlags = "USING_DEFAULT_PARTITION"
	V0042JobDescMsgFlagsUSINGDEFAULTQOS          V0042JobDescMsgFlags = "USING_DEFAULT_QOS"
	V0042JobDescMsgFlagsUSINGDEFAULTWCKEY        V0042JobDescMsgFlags = "USING_DEFAULT_WCKEY"
)

// Defines values for V0042JobDescMsgKillWarningFlags.
const (
	V0042JobDescMsgKillWarningFlagsARRAYTASK         V0042JobDescMsgKillWarningFlags = "ARRAY_TASK"
	V0042JobDescMsgKillWarningFlagsBATCHJOB          V0042JobDescMsgKillWarningFlags = "BATCH_JOB"
	V0042JobDescMsgKillWarningFlagsCRONJOBS          V0042JobDescMsgKillWarningFlags = "CRON_JOBS"
	V0042JobDescMsgKillWarningFlagsFEDERATIONREQUEUE V0042JobDescMsgKillWarningFlags = "FEDERATION_REQUEUE"
	V0042JobDescMsgKillWarningFlagsFULLJOB           V0042JobDescMsgKillWarningFlags = "FULL_JOB"
	V0042JobDescMsgKillWarningFlagsFULLSTEPSONLY     V0042JobDescMsgKillWarningFlags = "FULL_STEPS_ONLY"
	V0042JobDescMsgKillWarningFlagsHURRY             V0042JobDescMsgKillWarningFlags = "HURRY"
	V0042JobDescMsgKillWarningFlagsNOSIBLINGJOBS     V0042JobDescMsgKillWarningFlags = "NO_SIBLING_JOBS"
	V0042JobDescMsgKillWarningFlagsOUTOFMEMORY       V0042JobDescMsgKillWarningFlags = "OUT_OF_MEMORY"
	V0042JobDescMsgKillWarningFlagsRESERVATIONJOB    V0042JobDescMsgKillWarningFlags = "RESERVATION_JOB"
	V0042JobDescMsgKillWarningFlagsVERBOSE           V0042JobDescMsgKillWarningFlags = "VERBOSE"
	V0042JobDescMsgKillWarningFlagsWARNINGSENT       V0042JobDescMsgKillWarningFlags = "WARNING_SENT"
)

// Defines values for V0042JobDescMsgMailType.
const (
	V0042JobDescMsgMailTypeARRAYTASKS        V0042JobDescMsgMailType = "ARRAY_TASKS"
	V0042JobDescMsgMailTypeBEGIN             V0042JobDescMsgMailType = "BEGIN"
	V0042JobDescMsgMailTypeEND               V0042JobDescMsgMailType = "END"
	V0042JobDescMsgMailTypeFAIL              V0042JobDescMsgMailType = "FAIL"
	V0042JobDescMsgMailTypeINVALIDDEPENDENCY V0042JobDescMsgMailType = "INVALID_DEPENDENCY"
	V0042JobDescMsgMailTypeREQUEUE           V0042JobDescMsgMailType = "REQUEUE"
	V0042JobDescMsgMailTypeSTAGEOUT          V0042JobDescMsgMailType = "STAGE_OUT"
	V0042JobDescMsgMailTypeTIME100           V0042JobDescMsgMailType = "TIME=100%"
	V0042JobDescMsgMailTypeTIME50            V0042JobDescMsgMailType = "TIME=50%"
	V0042JobDescMsgMailTypeTIME80            V0042JobDescMsgMailType = "TIME=80%"
	V0042JobDescMsgMailTypeTIME90            V0042JobDescMsgMailType = "TIME=90%"
)

// Defines values for V0042JobDescMsgMemoryBindingType.
const (
	V0042JobDescMsgMemoryBindingTypeLOCAL   V0042JobDescMsgMemoryBindingType = "LOCAL"
	V0042JobDescMsgMemoryBindingTypeMAP     V0042JobDescMsgMemoryBindingType = "MAP"
	V0042JobDescMsgMemoryBindingTypeMASK    V0042JobDescMsgMemoryBindingType = "MASK"
	V0042JobDescMsgMemoryBindingTypeNONE    V0042JobDescMsgMemoryBindingType = "NONE"
	V0042JobDescMsgMemoryBindingTypePREFER  V0042JobDescMsgMemoryBindingType = "PREFER"
	V0042JobDescMsgMemoryBindingTypeRANK    V0042JobDescMsgMemoryBindingType = "RANK"
	V0042JobDescMsgMemoryBindingTypeSORT    V0042JobDescMsgMemoryBindingType = "SORT"
	V0042JobDescMsgMemoryBindingTypeVERBOSE V0042JobDescMsgMemoryBindingType = "VERBOSE"
)

// Defines values for V0042JobDescMsgOpenMode.
const (
	APPEND   V0042JobDescMsgOpenMode = "APPEND"
	TRUNCATE V0042JobDescMsgOpenMode = "TRUNCATE"
)

// Defines values for V0042JobDescMsgProfile.
const (
	V0042JobDescMsgProfileENERGY  V0042JobDescMsgProfile = "ENERGY"
	V0042JobDescMsgProfileLUSTRE  V0042JobDescMsgProfile = "LUSTRE"
	V0042JobDescMsgProfileNETWORK V0042JobDescMsgProfile = "NETWORK"
	V0042JobDescMsgProfileNONE    V0042JobDescMsgProfile = "NONE"
	V0042JobDescMsgProfileNOTSET  V0042JobDescMsgProfile = "NOT_SET"
	V0042JobDescMsgProfileTASK    V0042JobDescMsgProfile = "TASK"
)

// Defines values for V0042JobDescMsgShared.
const (
	V0042JobDescMsgSharedMcs           V0042JobDescMsgShared = "mcs"
	V0042JobDescMsgSharedNone          V0042JobDescMsgShared = "none"
	V0042JobDescMsgSharedOversubscribe V0042JobDescMsgShared = "oversubscribe"
	V0042JobDescMsgSharedTopo          V0042JobDescMsgShared = "topo"
	V0042JobDescMsgSharedUser          V0042JobDescMsgShared = "user"
)

// Defines values for V0042JobDescMsgX11.
const (
	BATCHNODE       V0042JobDescMsgX11 = "BATCH_NODE"
	FIRSTNODE       V0042JobDescMsgX11 = "FIRST_NODE"
	FORWARDALLNODES V0042JobDescMsgX11 = "FORWARD_ALL_NODES"
	LASTNODE        V0042JobDescMsgX11 = "LAST_NODE"
)

// Defines values for V0042JobInfoFlags.
const (
	V0042JobInfoFlagsACCRUECOUNTCLEARED       V0042JobInfoFlags = "ACCRUE_COUNT_CLEARED"
	V0042JobInfoFlagsBACKFILLATTEMPTED        V0042JobInfoFlags = "BACKFILL_ATTEMPTED"
	V0042JobInfoFlagsCRONJOB                  V0042JobInfoFlags = "CRON_JOB"
	V0042JobInfoFlagsDEPENDENT                V0042JobInfoFlags = "DEPENDENT"
	V0042JobInfoFlagsEXACTCPUCOUNTREQUESTED   V0042JobInfoFlags = "EXACT_CPU_COUNT_REQUESTED"
	V0042JobInfoFlagsEXACTMEMORYREQUESTED     V0042JobInfoFlags = "EXACT_MEMORY_REQUESTED"
	V0042JobInfoFlagsEXACTTASKCOUNTREQUESTED  V0042JobInfoFlags = "EXACT_TASK_COUNT_REQUESTED"
	V0042JobInfoFlagsGRESBINDINGDISABLED      V0042JobInfoFlags = "GRES_BINDING_DISABLED"
	V0042JobInfoFlagsGRESBINDINGENFORCED      V0042JobInfoFlags = "GRES_BINDING_ENFORCED"
	V0042JobInfoFlagsHASSTATEDIRECTORY        V0042JobInfoFlags = "HAS_STATE_DIRECTORY"
	V0042JobInfoFlagsHETEROGENEOUSJOB         V0042JobInfoFlags = "HETEROGENEOUS_JOB"
	V0042JobInfoFlagsJOBACCRUETIMERESET       V0042JobInfoFlags = "JOB_ACCRUE_TIME_RESET"
	V0042JobInfoFlagsJOBKILLHURRY             V0042JobInfoFlags = "JOB_KILL_HURRY"
	V0042JobInfoFlagsJOBWASRUNNING            V0042JobInfoFlags = "JOB_WAS_RUNNING"
	V0042JobInfoFlagsKILLINVALIDDEPENDENCY    V0042JobInfoFlags = "KILL_INVALID_DEPENDENCY"
	V0042JobInfoFlagsMAGNETIC                 V0042JobInfoFlags = "MAGNETIC"
	V0042JobInfoFlagsNOKILLINVALIDDEPENDENCY  V0042JobInfoFlags = "NO_KILL_INVALID_DEPENDENCY"
	V0042JobInfoFlagsPARTITIONASSIGNED        V0042JobInfoFlags = "PARTITION_ASSIGNED"
	V0042JobInfoFlagsPREFERMINIMUMNODECOUNT   V0042JobInfoFlags = "PREFER_MINIMUM_NODE_COUNT"
	V0042JobInfoFlagsSCHEDULINGATTEMPTED      V0042JobInfoFlags = "SCHEDULING_ATTEMPTED"
	V0042JobInfoFlagsSENDJOBENVIRONMENT       V0042JobInfoFlags = "SEND_JOB_ENVIRONMENT"
	V0042JobInfoFlagsSIBLINGCLUSTERUPDATEONLY V0042JobInfoFlags = "SIBLING_CLUSTER_UPDATE_ONLY"
	V0042JobInfoFlagsSKIPTRESSTRINGACCOUNTING V0042JobInfoFlags = "SKIP_TRES_STRING_ACCOUNTING"
	V0042JobInfoFlagsSPREADJOB                V0042JobInfoFlags = "SPREAD_JOB"
	V0042JobInfoFlagsSTEPMGRENABLED           V0042JobInfoFlags = "STEPMGR_ENABLED"
	V0042JobInfoFlagsTESTINGBACKFILL          V0042JobInfoFlags = "TESTING_BACKFILL"
	V0042JobInfoFlagsTESTINGWHOLENODEBACKFILL V0042JobInfoFlags = "TESTING_WHOLE_NODE_BACKFILL"
	V0042JobInfoFlagsTESTNOWONLY              V0042JobInfoFlags = "TEST_NOW_ONLY"
	V0042JobInfoFlagsTOPPRIORITYJOB           V0042JobInfoFlags = "TOP_PRIORITY_JOB"
	V0042JobInfoFlagsUSINGDEFAULTACCOUNT      V0042JobInfoFlags = "USING_DEFAULT_ACCOUNT"
	V0042JobInfoFlagsUSINGDEFAULTPARTITION    V0042JobInfoFlags = "USING_DEFAULT_PARTITION"
	V0042JobInfoFlagsUSINGDEFAULTQOS          V0042JobInfoFlags = "USING_DEFAULT_QOS"
	V0042JobInfoFlagsUSINGDEFAULTWCKEY        V0042JobInfoFlags = "USING_DEFAULT_WCKEY"
)

// Defines values for V0042JobInfoJobState.
const (
	V0042JobInfoJobStateBOOTFAIL     V0042JobInfoJobState = "BOOT_FAIL"
	V0042JobInfoJobStateCANCELLED    V0042JobInfoJobState = "CANCELLED"
	V0042JobInfoJobStateCOMPLETED    V0042JobInfoJobState = "COMPLETED"
	V0042JobInfoJobStateCOMPLETING   V0042JobInfoJobState = "COMPLETING"
	V0042JobInfoJobStateCONFIGURING  V0042JobInfoJobState = "CONFIGURING"
	V0042JobInfoJobStateDEADLINE     V0042JobInfoJobState = "DEADLINE"
	V0042JobInfoJobStateFAILED       V0042JobInfoJobState = "FAILED"
	V0042JobInfoJobStateLAUNCHFAILED V0042JobInfoJobState = "LAUNCH_FAILED"
	V0042JobInfoJobStateNODEFAIL     V0042JobInfoJobState = "NODE_FAIL"
	V0042JobInfoJobStateOUTOFMEMORY  V0042JobInfoJobState = "OUT_OF_MEMORY"
	V0042JobInfoJobStatePENDING      V0042JobInfoJobState = "PENDING"
	V0042JobInfoJobStatePOWERUPNODE  V0042JobInfoJobState = "POWER_UP_NODE"
	V0042JobInfoJobStatePREEMPTED    V0042JobInfoJobState = "PREEMPTED"
	V0042JobInfoJobStateRECONFIGFAIL V0042JobInfoJobState = "RECONFIG_FAIL"
	V0042JobInfoJobStateREQUEUED     V0042JobInfoJobState = "REQUEUED"
	V0042JobInfoJobStateREQUEUEFED   V0042JobInfoJobState = "REQUEUE_FED"
	V0042JobInfoJobStateREQUEUEHOLD  V0042JobInfoJobState = "REQUEUE_HOLD"
	V0042JobInfoJobStateRESIZING     V0042JobInfoJobState = "RESIZING"
	V0042JobInfoJobStateRESVDELHOLD  V0042JobInfoJobState = "RESV_DEL_HOLD"
	V0042JobInfoJobStateREVOKED      V0042JobInfoJobState = "REVOKED"
	V0042JobInfoJobStateRUNNING      V0042JobInfoJobState = "RUNNING"
	V0042JobInfoJobStateSIGNALING    V0042JobInfoJobState = "SIGNALING"
	V0042JobInfoJobStateSPECIALEXIT  V0042JobInfoJobState = "SPECIAL_EXIT"
	V0042JobInfoJobStateSTAGEOUT     V0042JobInfoJobState = "STAGE_OUT"
	V0042JobInfoJobStateSTOPPED      V0042JobInfoJobState = "STOPPED"
	V0042JobInfoJobStateSUSPENDED    V0042JobInfoJobState = "SUSPENDED"
	V0042JobInfoJobStateTIMEOUT      V0042JobInfoJobState = "TIMEOUT"
)

// Defines values for V0042JobInfoMailType.
const (
	V0042JobInfoMailTypeARRAYTASKS        V0042JobInfoMailType = "ARRAY_TASKS"
	V0042JobInfoMailTypeBEGIN             V0042JobInfoMailType = "BEGIN"
	V0042JobInfoMailTypeEND               V0042JobInfoMailType = "END"
	V0042JobInfoMailTypeFAIL              V0042JobInfoMailType = "FAIL"
	V0042JobInfoMailTypeINVALIDDEPENDENCY V0042JobInfoMailType = "INVALID_DEPENDENCY"
	V0042JobInfoMailTypeREQUEUE           V0042JobInfoMailType = "REQUEUE"
	V0042JobInfoMailTypeSTAGEOUT          V0042JobInfoMailType = "STAGE_OUT"
	V0042JobInfoMailTypeTIME100           V0042JobInfoMailType = "TIME=100%"
	V0042JobInfoMailTypeTIME50            V0042JobInfoMailType = "TIME=50%"
	V0042JobInfoMailTypeTIME80            V0042JobInfoMailType = "TIME=80%"
	V0042JobInfoMailTypeTIME90            V0042JobInfoMailType = "TIME=90%"
)

// Defines values for V0042JobInfoProfile.
const (
	V0042JobInfoProfileENERGY  V0042JobInfoProfile = "ENERGY"
	V0042JobInfoProfileLUSTRE  V0042JobInfoProfile = "LUSTRE"
	V0042JobInfoProfileNETWORK V0042JobInfoProfile = "NETWORK"
	V0042JobInfoProfileNONE    V0042JobInfoProfile = "NONE"
	V0042JobInfoProfileNOTSET  V0042JobInfoProfile = "NOT_SET"
	V0042JobInfoProfileTASK    V0042JobInfoProfile = "TASK"
)

// Defines values for V0042JobInfoShared.
const (
	V0042JobInfoSharedMcs           V0042JobInfoShared = "mcs"
	V0042JobInfoSharedNone          V0042JobInfoShared = "none"
	V0042JobInfoSharedOversubscribe V0042JobInfoShared = "oversubscribe"
	V0042JobInfoSharedTopo          V0042JobInfoShared = "topo"
	V0042JobInfoSharedUser          V0042JobInfoShared = "user"
)

// Defines values for V0042JobResNodesSelectType.
const (
	V0042JobResNodesSelectTypeAVAILABLE V0042JobResNodesSelectType = "AVAILABLE"
	V0042JobResNodesSelectTypeONEROW    V0042JobResNodesSelectType = "ONE_ROW"
	V0042JobResNodesSelectTypeRESERVED  V0042JobResNodesSelectType = "RESERVED"
)

// Defines values for V0042JobResSelectType.
const (
	V0042JobResSelectTypeBOARD                V0042JobResSelectType = "BOARD"
	V0042JobResSelectTypeCORE                 V0042JobResSelectType = "CORE"
	V0042JobResSelectTypeCOREDEFAULTDISTBLOCK V0042JobResSelectType = "CORE_DEFAULT_DIST_BLOCK"
	V0042JobResSelectTypeCPU                  V0042JobResSelectType = "CPU"
	V0042JobResSelectTypeLINEAR               V0042JobResSelectType = "LINEAR"
	V0042JobResSelectTypeLLN                  V0042JobResSelectType = "LLN"
	V0042JobResSelectTypeMEMORY               V0042JobResSelectType = "MEMORY"
	V0042JobResSelectTypeONETASKPERCORE       V0042JobResSelectType = "ONE_TASK_PER_CORE"
	V0042JobResSelectTypePACKNODES            V0042JobResSelectType = "PACK_NODES"
	V0042JobResSelectTypeSOCKET               V0042JobResSelectType = "SOCKET"
)

// Defines values for V0042JobResCoreStatus.
const (
	V0042JobResCoreStatusALLOCATED   V0042JobResCoreStatus = "ALLOCATED"
	V0042JobResCoreStatusINUSE       V0042JobResCoreStatus = "IN_USE"
	V0042JobResCoreStatusINVALID     V0042JobResCoreStatus = "INVALID"
	V0042JobResCoreStatusUNALLOCATED V0042JobResCoreStatus = "UNALLOCATED"
)

// Defines values for V0042KillJobsMsgFlags.
const (
	V0042KillJobsMsgFlagsARRAYTASK         V0042KillJobsMsgFlags = "ARRAY_TASK"
	V0042KillJobsMsgFlagsBATCHJOB          V0042KillJobsMsgFlags = "BATCH_JOB"
	V0042KillJobsMsgFlagsCRONJOBS          V0042KillJobsMsgFlags = "CRON_JOBS"
	V0042KillJobsMsgFlagsFEDERATIONREQUEUE V0042KillJobsMsgFlags = "FEDERATION_REQUEUE"
	V0042KillJobsMsgFlagsFULLJOB           V0042KillJobsMsgFlags = "FULL_JOB"
	V0042KillJobsMsgFlagsFULLSTEPSONLY     V0042KillJobsMsgFlags = "FULL_STEPS_ONLY"
	V0042KillJobsMsgFlagsHURRY             V0042KillJobsMsgFlags = "HURRY"
	V0042KillJobsMsgFlagsNOSIBLINGJOBS     V0042KillJobsMsgFlags = "NO_SIBLING_JOBS"
	V0042KillJobsMsgFlagsOUTOFMEMORY       V0042KillJobsMsgFlags = "OUT_OF_MEMORY"
	V0042KillJobsMsgFlagsRESERVATIONJOB    V0042KillJobsMsgFlags = "RESERVATION_JOB"
	V0042KillJobsMsgFlagsVERBOSE           V0042KillJobsMsgFlags = "VERBOSE"
	V0042KillJobsMsgFlagsWARNINGSENT       V0042KillJobsMsgFlags = "WARNING_SENT"
)

// Defines values for V0042KillJobsMsgJobState.
const (
	V0042KillJobsMsgJobStateBOOTFAIL     V0042KillJobsMsgJobState = "BOOT_FAIL"
	V0042KillJobsMsgJobStateCANCELLED    V0042KillJobsMsgJobState = "CANCELLED"
	V0042KillJobsMsgJobStateCOMPLETED    V0042KillJobsMsgJobState = "COMPLETED"
	V0042KillJobsMsgJobStateCOMPLETING   V0042KillJobsMsgJobState = "COMPLETING"
	V0042KillJobsMsgJobStateCONFIGURING  V0042KillJobsMsgJobState = "CONFIGURING"
	V0042KillJobsMsgJobStateDEADLINE     V0042KillJobsMsgJobState = "DEADLINE"
	V0042KillJobsMsgJobStateFAILED       V0042KillJobsMsgJobState = "FAILED"
	V0042KillJobsMsgJobStateLAUNCHFAILED V0042KillJobsMsgJobState = "LAUNCH_FAILED"
	V0042KillJobsMsgJobStateNODEFAIL     V0042KillJobsMsgJobState = "NODE_FAIL"
	V0042KillJobsMsgJobStateOUTOFMEMORY  V0042KillJobsMsgJobState = "OUT_OF_MEMORY"
	V0042KillJobsMsgJobStatePENDING      V0042KillJobsMsgJobState = "PENDING"
	V0042KillJobsMsgJobStatePOWERUPNODE  V0042KillJobsMsgJobState = "POWER_UP_NODE"
	V0042KillJobsMsgJobStatePREEMPTED    V0042KillJobsMsgJobState = "PREEMPTED"
	V0042KillJobsMsgJobStateRECONFIGFAIL V0042KillJobsMsgJobState = "RECONFIG_FAIL"
	V0042KillJobsMsgJobStateREQUEUED     V0042KillJobsMsgJobState = "REQUEUED"
	V0042KillJobsMsgJobStateREQUEUEFED   V0042KillJobsMsgJobState = "REQUEUE_FED"
	V0042KillJobsMsgJobStateREQUEUEHOLD  V0042KillJobsMsgJobState = "REQUEUE_HOLD"
	V0042KillJobsMsgJobStateRESIZING     V0042KillJobsMsgJobState = "RESIZING"
	V0042KillJobsMsgJobStateRESVDELHOLD  V0042KillJobsMsgJobState = "RESV_DEL_HOLD"
	V0042KillJobsMsgJobStateREVOKED      V0042KillJobsMsgJobState = "REVOKED"
	V0042KillJobsMsgJobStateRUNNING      V0042KillJobsMsgJobState = "RUNNING"
	V0042KillJobsMsgJobStateSIGNALING    V0042KillJobsMsgJobState = "SIGNALING"
	V0042KillJobsMsgJobStateSPECIALEXIT  V0042KillJobsMsgJobState = "SPECIAL_EXIT"
	V0042KillJobsMsgJobStateSTAGEOUT     V0042KillJobsMsgJobState = "STAGE_OUT"
	V0042KillJobsMsgJobStateSTOPPED      V0042KillJobsMsgJobState = "STOPPED"
	V0042KillJobsMsgJobStateSUSPENDED    V0042KillJobsMsgJobState = "SUSPENDED"
	V0042KillJobsMsgJobStateTIMEOUT      V0042KillJobsMsgJobState = "TIMEOUT"
)

// Defines values for V0042NodeNextStateAfterReboot.
const (
	V0042NodeNextStateAfterRebootALLOCATED       V0042NodeNextStateAfterReboot = "ALLOCATED"
	V0042NodeNextStateAfterRebootCLOUD           V0042NodeNextStateAfterReboot = "CLOUD"
	V0042NodeNextStateAfterRebootCOMPLETING      V0042NodeNextStateAfterReboot = "COMPLETING"
	V0042NodeNextStateAfterRebootDOWN            V0042NodeNextStateAfterReboot = "DOWN"
	V0042NodeNextStateAfterRebootDRAIN           V0042NodeNextStateAfterReboot = "DRAIN"
	V0042NodeNextStateAfterRebootDYNAMICFUTURE   V0042NodeNextStateAfterReboot = "DYNAMIC_FUTURE"
	V0042NodeNextStateAfterRebootDYNAMICNORM     V0042NodeNextStateAfterReboot = "DYNAMIC_NORM"
	V0042NodeNextStateAfterRebootERROR           V0042NodeNextStateAfterReboot = "ERROR"
	V0042NodeNextStateAfterRebootFAIL            V0042NodeNextStateAfterReboot = "FAIL"
	V0042NodeNextStateAfterRebootFUTURE          V0042NodeNextStateAfterReboot = "FUTURE"
	V0042NodeNextStateAfterRebootIDLE            V0042NodeNextStateAfterReboot = "IDLE"
	V0042NodeNextStateAfterRebootINVALID         V0042NodeNextStateAfterReboot = "INVALID"
	V0042NodeNextStateAfterRebootINVALIDREG      V0042NodeNextStateAfterReboot = "INVALID_REG"
	V0042NodeNextStateAfterRebootMAINTENANCE     V0042NodeNextStateAfterReboot = "MAINTENANCE"
	V0042NodeNextStateAfterRebootMIXED           V0042NodeNextStateAfterReboot = "MIXED"
	V0042NodeNextStateAfterRebootNOTRESPONDING   V0042NodeNextStateAfterReboot = "NOT_RESPONDING"
	V0042NodeNextStateAfterRebootPLANNED         V0042NodeNextStateAfterReboot = "PLANNED"
	V0042NodeNextStateAfterRebootPOWERDOWN       V0042NodeNextStateAfterReboot = "POWER_DOWN"
	V0042NodeNextStateAfterRebootPOWERDRAIN      V0042NodeNextStateAfterReboot = "POWER_DRAIN"
	V0042NodeNextStateAfterRebootPOWEREDDOWN     V0042NodeNextStateAfterReboot = "POWERED_DOWN"
	V0042NodeNextStateAfterRebootPOWERINGDOWN    V0042NodeNextStateAfterReboot = "POWERING_DOWN"
	V0042NodeNextStateAfterRebootPOWERINGUP      V0042NodeNextStateAfterReboot = "POWERING_UP"
	V0042NodeNextStateAfterRebootPOWERUP         V0042NodeNextStateAfterReboot = "POWER_UP"
	V0042NodeNextStateAfterRebootREBOOTCANCELED  V0042NodeNextStateAfterReboot = "REBOOT_CANCELED"
	V0042NodeNextStateAfterRebootREBOOTISSUED    V0042NodeNextStateAfterReboot = "REBOOT_ISSUED"
	V0042NodeNextStateAfterRebootREBOOTREQUESTED V0042NodeNextStateAfterReboot = "REBOOT_REQUESTED"
	V0042NodeNextStateAfterRebootRESERVED        V0042NodeNextStateAfterReboot = "RESERVED"
	V0042NodeNextStateAfterRebootRESUME          V0042NodeNextStateAfterReboot = "RESUME"
	V0042NodeNextStateAfterRebootUNDRAIN         V0042NodeNextStateAfterReboot = "UNDRAIN"
	V0042NodeNextStateAfterRebootUNKNOWN         V0042NodeNextStateAfterReboot = "UNKNOWN"
)

// Defines values for V0042NodeState.
const (
	V0042NodeStateALLOCATED       V0042NodeState = "ALLOCATED"
	V0042NodeStateCLOUD           V0042NodeState = "CLOUD"
	V0042NodeStateCOMPLETING      V0042NodeState = "COMPLETING"
	V0042NodeStateDOWN            V0042NodeState = "DOWN"
	V0042NodeStateDRAIN           V0042NodeState = "DRAIN"
	V0042NodeStateDYNAMICFUTURE   V0042NodeState = "DYNAMIC_FUTURE"
	V0042NodeStateDYNAMICNORM     V0042NodeState = "DYNAMIC_NORM"
	V0042NodeStateERROR           V0042NodeState = "ERROR"
	V0042NodeStateFAIL            V0042NodeState = "FAIL"
	V0042NodeStateFUTURE          V0042NodeState = "FUTURE"
	V0042NodeStateIDLE            V0042NodeState = "IDLE"
	V0042NodeStateINVALID         V0042NodeState = "INVALID"
	V0042NodeStateINVALIDREG      V0042NodeState = "INVALID_REG"
	V0042NodeStateMAINTENANCE     V0042NodeState = "MAINTENANCE"
	V0042NodeStateMIXED           V0042NodeState = "MIXED"
	V0042NodeStateNOTRESPONDING   V0042NodeState = "NOT_RESPONDING"
	V0042NodeStatePLANNED         V0042NodeState = "PLANNED"
	V0042NodeStatePOWERDOWN       V0042NodeState = "POWER_DOWN"
	V0042NodeStatePOWERDRAIN      V0042NodeState = "POWER_DRAIN"
	V0042NodeStatePOWEREDDOWN     V0042NodeState = "POWERED_DOWN"
	V0042NodeStatePOWERINGDOWN    V0042NodeState = "POWERING_DOWN"
	V0042NodeStatePOWERINGUP      V0042NodeState = "POWERING_UP"
	V0042NodeStatePOWERUP         V0042NodeState = "POWER_UP"
	V0042NodeStateREBOOTCANCELED  V0042NodeState = "REBOOT_CANCELED"
	V0042NodeStateREBOOTISSUED    V0042NodeState = "REBOOT_ISSUED"
	V0042NodeStateREBOOTREQUESTED V0042NodeState = "REBOOT_REQUESTED"
	V0042NodeStateRESERVED        V0042NodeState = "RESERVED"
	V0042NodeStateRESUME          V0042NodeState = "RESUME"
	V0042NodeStateUNDRAIN         V0042NodeState = "UNDRAIN"
	V0042NodeStateUNKNOWN         V0042NodeState = "UNKNOWN"
)

// Defines values for V0042PartitionInfoMaximumsOversubscribeFlags.
const (
	Force V0042PartitionInfoMaximumsOversubscribeFlags = "force"
)

// Defines values for V0042PartitionInfoPartitionState.
const (
	V0042PartitionInfoPartitionStateDOWN     V0042PartitionInfoPartitionState = "DOWN"
	V0042PartitionInfoPartitionStateDRAIN    V0042PartitionInfoPartitionState = "DRAIN"
	V0042PartitionInfoPartitionStateINACTIVE V0042PartitionInfoPartitionState = "INACTIVE"
	V0042PartitionInfoPartitionStateUNKNOWN  V0042PartitionInfoPartitionState = "UNKNOWN"
	V0042PartitionInfoPartitionStateUP       V0042PartitionInfoPartitionState = "UP"
)

// Defines values for V0042PartitionInfoSelectType.
const (
	V0042PartitionInfoSelectTypeBOARD                V0042PartitionInfoSelectType = "BOARD"
	V0042PartitionInfoSelectTypeCORE                 V0042PartitionInfoSelectType = "CORE"
	V0042PartitionInfoSelectTypeCOREDEFAULTDISTBLOCK V0042PartitionInfoSelectType = "CORE_DEFAULT_DIST_BLOCK"
	V0042PartitionInfoSelectTypeCPU                  V0042PartitionInfoSelectType = "CPU"
	V0042PartitionInfoSelectTypeLINEAR               V0042PartitionInfoSelectType = "LINEAR"
	V0042PartitionInfoSelectTypeLLN                  V0042PartitionInfoSelectType = "LLN"
	V0042PartitionInfoSelectTypeMEMORY               V0042PartitionInfoSelectType = "MEMORY"
	V0042PartitionInfoSelectTypeONETASKPERCORE       V0042PartitionInfoSelectType = "ONE_TASK_PER_CORE"
	V0042PartitionInfoSelectTypePACKNODES            V0042PartitionInfoSelectType = "PACK_NODES"
	V0042PartitionInfoSelectTypeSOCKET               V0042PartitionInfoSelectType = "SOCKET"
)

// Defines values for V0042ProcessExitCodeVerboseStatus.
const (
	V0042ProcessExitCodeVerboseStatusCOREDUMPED V0042ProcessExitCodeVerboseStatus = "CORE_DUMPED"
	V0042ProcessExitCodeVerboseStatusERROR      V0042ProcessExitCodeVerboseStatus = "ERROR"
	V0042ProcessExitCodeVerboseStatusINVALID    V0042ProcessExitCodeVerboseStatus = "INVALID"
	V0042ProcessExitCodeVerboseStatusPENDING    V0042ProcessExitCodeVerboseStatus = "PENDING"
	V0042ProcessExitCodeVerboseStatusSIGNALED   V0042ProcessExitCodeVerboseStatus = "SIGNALED"
	V0042ProcessExitCodeVerboseStatusSUCCESS    V0042ProcessExitCodeVerboseStatus = "SUCCESS"
)

// Defines values for V0042QosFlags.
const (
	ADD                   V0042QosFlags = "ADD"
	DENYLIMIT             V0042QosFlags = "DENY_LIMIT"
	ENFORCEUSAGETHRESHOLD V0042QosFlags = "ENFORCE_USAGE_THRESHOLD"
	NODECAY               V0042QosFlags = "NO_DECAY"
	NORESERVE             V0042QosFlags = "NO_RESERVE"
	NOTSET                V0042QosFlags = "NOT_SET"
	OVERRIDEPARTITIONQOS  V0042QosFlags = "OVERRIDE_PARTITION_QOS"
	PARTITIONMAXIMUMNODE  V0042QosFlags = "PARTITION_MAXIMUM_NODE"
	PARTITIONMINIMUMNODE  V0042QosFlags = "PARTITION_MINIMUM_NODE"
	PARTITIONTIMELIMIT    V0042QosFlags = "PARTITION_TIME_LIMIT"
	RELATIVE              V0042QosFlags = "RELATIVE"
	REMOVE                V0042QosFlags = "REMOVE"
	REQUIREDRESERVATION   V0042QosFlags = "REQUIRED_RESERVATION"
	USAGEFACTORSAFE       V0042QosFlags = "USAGE_FACTOR_SAFE"
)

// Defines values for V0042QosPreemptMode.
const (
	V0042QosPreemptModeCANCEL   V0042QosPreemptMode = "CANCEL"
	V0042QosPreemptModeDISABLED V0042QosPreemptMode = "DISABLED"
	V0042QosPreemptModeGANG     V0042QosPreemptMode = "GANG"
	V0042QosPreemptModeREQUEUE  V0042QosPreemptMode = "REQUEUE"
	V0042QosPreemptModeSUSPEND  V0042QosPreemptMode = "SUSPEND"
)

// Defines values for V0042ReservationInfoFlags.
const (
	ALLNODES           V0042ReservationInfoFlags = "ALL_NODES"
	ANYNODES           V0042ReservationInfoFlags = "ANY_NODES"
	DAILY              V0042ReservationInfoFlags = "DAILY"
	DURATIONMINUS      V0042ReservationInfoFlags = "DURATION_MINUS"
	DURATIONPLUS       V0042ReservationInfoFlags = "DURATION_PLUS"
	FLEX               V0042ReservationInfoFlags = "FLEX"
	HOURLY             V0042ReservationInfoFlags = "HOURLY"
	IGNOREJOBS         V0042ReservationInfoFlags = "IGNORE_JOBS"
	MAGNETIC           V0042ReservationInfoFlags = "MAGNETIC"
	MAINT              V0042ReservationInfoFlags = "MAINT"
	NODAILY            V0042ReservationInfoFlags = "NO_DAILY"
	NOFLEX             V0042ReservationInfoFlags = "NO_FLEX"
	NOHOLDJOBSAFTEREND V0042ReservationInfoFlags = "NO_HOLD_JOBS_AFTER_END"
	NOHOURLY           V0042ReservationInfoFlags = "NO_HOURLY"
	NOIGNOREJOBS       V0042ReservationInfoFlags = "NO_IGNORE_JOBS"
	NOMAINT            V0042ReservationInfoFlags = "NO_MAINT"
	NOPARTNODES        V0042ReservationInfoFlags = "NO_PART_NODES"
	NOPURGECOMP        V0042ReservationInfoFlags = "NO_PURGE_COMP"
	NOSTATIC           V0042ReservationInfoFlags = "NO_STATIC"
	NOUSERDELETE       V0042ReservationInfoFlags = "NO_USER_DELETE"
	NOWEEKDAY          V0042ReservationInfoFlags = "NO_WEEKDAY"
	NOWEEKEND          V0042ReservationInfoFlags = "NO_WEEKEND"
	NOWEEKLY           V0042ReservationInfoFlags = "NO_WEEKLY"
	OVERLAP            V0042ReservationInfoFlags = "OVERLAP"
	PARTNODES          V0042ReservationInfoFlags = "PART_NODES"
	PURGECOMP          V0042ReservationInfoFlags = "PURGE_COMP"
	REOCCURRING        V0042ReservationInfoFlags = "REOCCURRING"
	REPLACE            V0042ReservationInfoFlags = "REPLACE"
	SKIP               V0042ReservationInfoFlags = "SKIP"
	SPECNODES          V0042ReservationInfoFlags = "SPEC_NODES"
	STATIC             V0042ReservationInfoFlags = "STATIC"
	TIMEFLOAT          V0042ReservationInfoFlags = "TIME_FLOAT"
	USERDELETE         V0042ReservationInfoFlags = "USER_DELETE"
	WEEKDAY            V0042ReservationInfoFlags = "WEEKDAY"
	WEEKEND            V0042ReservationInfoFlags = "WEEKEND"
	WEEKLY             V0042ReservationInfoFlags = "WEEKLY"
)

// Defines values for V0042StepState.
const (
	V0042StepStateBOOTFAIL     V0042StepState = "BOOT_FAIL"
	V0042StepStateCANCELLED    V0042StepState = "CANCELLED"
	V0042StepStateCOMPLETED    V0042StepState = "COMPLETED"
	V0042StepStateCOMPLETING   V0042StepState = "COMPLETING"
	V0042StepStateCONFIGURING  V0042StepState = "CONFIGURING"
	V0042StepStateDEADLINE     V0042StepState = "DEADLINE"
	V0042StepStateFAILED       V0042StepState = "FAILED"
	V0042StepStateLAUNCHFAILED V0042StepState = "LAUNCH_FAILED"
	V0042StepStateNODEFAIL     V0042StepState = "NODE_FAIL"
	V0042StepStateOUTOFMEMORY  V0042StepState = "OUT_OF_MEMORY"
	V0042StepStatePENDING      V0042StepState = "PENDING"
	V0042StepStatePOWERUPNODE  V0042StepState = "POWER_UP_NODE"
	V0042StepStatePREEMPTED    V0042StepState = "PREEMPTED"
	V0042StepStateRECONFIGFAIL V0042StepState = "RECONFIG_FAIL"
	V0042StepStateREQUEUED     V0042StepState = "REQUEUED"
	V0042StepStateREQUEUEFED   V0042StepState = "REQUEUE_FED"
	V0042StepStateREQUEUEHOLD  V0042StepState = "REQUEUE_HOLD"
	V0042StepStateRESIZING     V0042StepState = "RESIZING"
	V0042StepStateRESVDELHOLD  V0042StepState = "RESV_DEL_HOLD"
	V0042StepStateREVOKED      V0042StepState = "REVOKED"
	V0042StepStateRUNNING      V0042StepState = "RUNNING"
	V0042StepStateSIGNALING    V0042StepState = "SIGNALING"
	V0042StepStateSPECIALEXIT  V0042StepState = "SPECIAL_EXIT"
	V0042StepStateSTAGEOUT     V0042StepState = "STAGE_OUT"
	V0042StepStateSTOPPED      V0042StepState = "STOPPED"
	V0042StepStateSUSPENDED    V0042StepState = "SUSPENDED"
	V0042StepStateTIMEOUT      V0042StepState = "TIMEOUT"
)

// Defines values for V0042UpdateNodeMsgState.
const (
	V0042UpdateNodeMsgStateALLOCATED       V0042UpdateNodeMsgState = "ALLOCATED"
	V0042UpdateNodeMsgStateCLOUD           V0042UpdateNodeMsgState = "CLOUD"
	V0042UpdateNodeMsgStateCOMPLETING      V0042UpdateNodeMsgState = "COMPLETING"
	V0042UpdateNodeMsgStateDOWN            V0042UpdateNodeMsgState = "DOWN"
	V0042UpdateNodeMsgStateDRAIN           V0042UpdateNodeMsgState = "DRAIN"
	V0042UpdateNodeMsgStateDYNAMICFUTURE   V0042UpdateNodeMsgState = "DYNAMIC_FUTURE"
	V0042UpdateNodeMsgStateDYNAMICNORM     V0042UpdateNodeMsgState = "DYNAMIC_NORM"
	V0042UpdateNodeMsgStateERROR           V0042UpdateNodeMsgState = "ERROR"
	V0042UpdateNodeMsgStateFAIL            V0042UpdateNodeMsgState = "FAIL"
	V0042UpdateNodeMsgStateFUTURE          V0042UpdateNodeMsgState = "FUTURE"
	V0042UpdateNodeMsgStateIDLE            V0042UpdateNodeMsgState = "IDLE"
	V0042UpdateNodeMsgStateINVALID         V0042UpdateNodeMsgState = "INVALID"
	V0042UpdateNodeMsgStateINVALIDREG      V0042UpdateNodeMsgState = "INVALID_REG"
	V0042UpdateNodeMsgStateMAINTENANCE     V0042UpdateNodeMsgState = "MAINTENANCE"
	V0042UpdateNodeMsgStateMIXED           V0042UpdateNodeMsgState = "MIXED"
	V0042UpdateNodeMsgStateNOTRESPONDING   V0042UpdateNodeMsgState = "NOT_RESPONDING"
	V0042UpdateNodeMsgStatePLANNED         V0042UpdateNodeMsgState = "PLANNED"
	V0042UpdateNodeMsgStatePOWERDOWN       V0042UpdateNodeMsgState = "POWER_DOWN"
	V0042UpdateNodeMsgStatePOWERDRAIN      V0042UpdateNodeMsgState = "POWER_DRAIN"
	V0042UpdateNodeMsgStatePOWEREDDOWN     V0042UpdateNodeMsgState = "POWERED_DOWN"
	V0042UpdateNodeMsgStatePOWERINGDOWN    V0042UpdateNodeMsgState = "POWERING_DOWN"
	V0042UpdateNodeMsgStatePOWERINGUP      V0042UpdateNodeMsgState = "POWERING_UP"
	V0042UpdateNodeMsgStatePOWERUP         V0042UpdateNodeMsgState = "POWER_UP"
	V0042UpdateNodeMsgStateREBOOTCANCELED  V0042UpdateNodeMsgState = "REBOOT_CANCELED"
	V0042UpdateNodeMsgStateREBOOTISSUED    V0042UpdateNodeMsgState = "REBOOT_ISSUED"
	V0042UpdateNodeMsgStateREBOOTREQUESTED V0042UpdateNodeMsgState = "REBOOT_REQUESTED"
	V0042UpdateNodeMsgStateRESERVED        V0042UpdateNodeMsgState = "RESERVED"
	V0042UpdateNodeMsgStateRESUME          V0042UpdateNodeMsgState = "RESUME"
	V0042UpdateNodeMsgStateUNDRAIN         V0042UpdateNodeMsgState = "UNDRAIN"
	V0042UpdateNodeMsgStateUNKNOWN         V0042UpdateNodeMsgState = "UNKNOWN"
)

// Defines values for V0042UserAdministratorLevel.
const (
	V0042UserAdministratorLevelAdministrator V0042UserAdministratorLevel = "Administrator"
	V0042UserAdministratorLevelNone          V0042UserAdministratorLevel = "None"
	V0042UserAdministratorLevelNotSet        V0042UserAdministratorLevel = "Not Set"
	V0042UserAdministratorLevelOperator      V0042UserAdministratorLevel = "Operator"
)

// Defines values for V0042UserFlags.
const (
	V0042UserFlagsDELETED V0042UserFlags = "DELETED"
	V0042UserFlagsNONE    V0042UserFlags = "NONE"
)

// Defines values for V0042UserShortAdminlevel.
const (
	V0042UserShortAdminlevelAdministrator V0042UserShortAdminlevel = "Administrator"
	V0042UserShortAdminlevelNone          V0042UserShortAdminlevel = "None"
	V0042UserShortAdminlevelNotSet        V0042UserShortAdminlevel = "Not Set"
	V0042UserShortAdminlevelOperator      V0042UserShortAdminlevel = "Operator"
)

// Defines values for V0042WckeyFlags.
const (
	V0042WckeyFlagsDELETED V0042WckeyFlags = "DELETED"
)

// Defines values for V0042WckeyTagStructFlags.
const (
	ASSIGNEDDEFAULT V0042WckeyTagStructFlags = "ASSIGNED_DEFAULT"
)

// Defines values for SlurmV0042DeleteJobParamsFlags.
const (
	ARRAYTASK         SlurmV0042DeleteJobParamsFlags = "ARRAY_TASK"
	BATCHJOB          SlurmV0042DeleteJobParamsFlags = "BATCH_JOB"
	CRONJOBS          SlurmV0042DeleteJobParamsFlags = "CRON_JOBS"
	FEDERATIONREQUEUE SlurmV0042DeleteJobParamsFlags = "FEDERATION_REQUEUE"
	FULLJOB           SlurmV0042DeleteJobParamsFlags = "FULL_JOB"
	FULLSTEPSONLY     SlurmV0042DeleteJobParamsFlags = "FULL_STEPS_ONLY"
	HURRY             SlurmV0042DeleteJobParamsFlags = "HURRY"
	NOSIBLINGJOBS     SlurmV0042DeleteJobParamsFlags = "NO_SIBLING_JOBS"
	OUTOFMEMORY       SlurmV0042DeleteJobParamsFlags = "OUT_OF_MEMORY"
	RESERVATIONJOB    SlurmV0042DeleteJobParamsFlags = "RESERVATION_JOB"
	VERBOSE           SlurmV0042DeleteJobParamsFlags = "VERBOSE"
	WARNINGSENT       SlurmV0042DeleteJobParamsFlags = "WARNING_SENT"
)

// Defines values for SlurmV0042GetJobParamsFlags.
const (
	SlurmV0042GetJobParamsFlagsALL        SlurmV0042GetJobParamsFlags = "ALL"
	SlurmV0042GetJobParamsFlagsDETAIL     SlurmV0042GetJobParamsFlags = "DETAIL"
	SlurmV0042GetJobParamsFlagsFEDERATION SlurmV0042GetJobParamsFlags = "FEDERATION"
	SlurmV0042GetJobParamsFlagsFUTURE     SlurmV0042GetJobParamsFlags = "FUTURE"
	SlurmV0042GetJobParamsFlagsLOCAL      SlurmV0042GetJobParamsFlags = "LOCAL"
	SlurmV0042GetJobParamsFlagsMIXED      SlurmV0042GetJobParamsFlags = "MIXED"
	SlurmV0042GetJobParamsFlagsSIBLING    SlurmV0042GetJobParamsFlags = "SIBLING"
)

// Defines values for SlurmV0042GetJobsParamsFlags.
const (
	SlurmV0042GetJobsParamsFlagsALL        SlurmV0042GetJobsParamsFlags = "ALL"
	SlurmV0042GetJobsParamsFlagsDETAIL     SlurmV0042GetJobsParamsFlags = "DETAIL"
	SlurmV0042GetJobsParamsFlagsFEDERATION SlurmV0042GetJobsParamsFlags = "FEDERATION"
	SlurmV0042GetJobsParamsFlagsFUTURE     SlurmV0042GetJobsParamsFlags = "FUTURE"
	SlurmV0042GetJobsParamsFlagsLOCAL      SlurmV0042GetJobsParamsFlags = "LOCAL"
	SlurmV0042GetJobsParamsFlagsMIXED      SlurmV0042GetJobsParamsFlags = "MIXED"
	SlurmV0042GetJobsParamsFlagsSIBLING    SlurmV0042GetJobsParamsFlags = "SIBLING"
)

// Defines values for SlurmV0042GetNodeParamsFlags.
const (
	SlurmV0042GetNodeParamsFlagsALL        SlurmV0042GetNodeParamsFlags = "ALL"
	SlurmV0042GetNodeParamsFlagsDETAIL     SlurmV0042GetNodeParamsFlags = "DETAIL"
	SlurmV0042GetNodeParamsFlagsFEDERATION SlurmV0042GetNodeParamsFlags = "FEDERATION"
	SlurmV0042GetNodeParamsFlagsFUTURE     SlurmV0042GetNodeParamsFlags = "FUTURE"
	SlurmV0042GetNodeParamsFlagsLOCAL      SlurmV0042GetNodeParamsFlags = "LOCAL"
	SlurmV0042GetNodeParamsFlagsMIXED      SlurmV0042GetNodeParamsFlags = "MIXED"
	SlurmV0042GetNodeParamsFlagsSIBLING    SlurmV0042GetNodeParamsFlags = "SIBLING"
)

// Defines values for SlurmV0042GetNodesParamsFlags.
const (
	SlurmV0042GetNodesParamsFlagsALL        SlurmV0042GetNodesParamsFlags = "ALL"
	SlurmV0042GetNodesParamsFlagsDETAIL     SlurmV0042GetNodesParamsFlags = "DETAIL"
	SlurmV0042GetNodesParamsFlagsFEDERATION SlurmV0042GetNodesParamsFlags = "FEDERATION"
	SlurmV0042GetNodesParamsFlagsFUTURE     SlurmV0042GetNodesParamsFlags = "FUTURE"
	SlurmV0042GetNodesParamsFlagsLOCAL      SlurmV0042GetNodesParamsFlags = "LOCAL"
	SlurmV0042GetNodesParamsFlagsMIXED      SlurmV0042GetNodesParamsFlags = "MIXED"
	SlurmV0042GetNodesParamsFlagsSIBLING    SlurmV0042GetNodesParamsFlags = "SIBLING"
)

// Defines values for SlurmV0042GetPartitionParamsFlags.
const (
	SlurmV0042GetPartitionParamsFlagsALL        SlurmV0042GetPartitionParamsFlags = "ALL"
	SlurmV0042GetPartitionParamsFlagsDETAIL     SlurmV0042GetPartitionParamsFlags = "DETAIL"
	SlurmV0042GetPartitionParamsFlagsFEDERATION SlurmV0042GetPartitionParamsFlags = "FEDERATION"
	SlurmV0042GetPartitionParamsFlagsFUTURE     SlurmV0042GetPartitionParamsFlags = "FUTURE"
	SlurmV0042GetPartitionParamsFlagsLOCAL      SlurmV0042GetPartitionParamsFlags = "LOCAL"
	SlurmV0042GetPartitionParamsFlagsMIXED      SlurmV0042GetPartitionParamsFlags = "MIXED"
	SlurmV0042GetPartitionParamsFlagsSIBLING    SlurmV0042GetPartitionParamsFlags = "SIBLING"
)

// Defines values for SlurmV0042GetPartitionsParamsFlags.
const (
	SlurmV0042GetPartitionsParamsFlagsALL        SlurmV0042GetPartitionsParamsFlags = "ALL"
	SlurmV0042GetPartitionsParamsFlagsDETAIL     SlurmV0042GetPartitionsParamsFlags = "DETAIL"
	SlurmV0042GetPartitionsParamsFlagsFEDERATION SlurmV0042GetPartitionsParamsFlags = "FEDERATION"
	SlurmV0042GetPartitionsParamsFlagsFUTURE     SlurmV0042GetPartitionsParamsFlags = "FUTURE"
	SlurmV0042GetPartitionsParamsFlagsLOCAL      SlurmV0042GetPartitionsParamsFlags = "LOCAL"
	SlurmV0042GetPartitionsParamsFlagsMIXED      SlurmV0042GetPartitionsParamsFlags = "MIXED"
	SlurmV0042GetPartitionsParamsFlagsSIBLING    SlurmV0042GetPartitionsParamsFlags = "SIBLING"
)

// Defines values for SlurmdbV0042DeleteClusterParamsClassification.
const (
	SlurmdbV0042DeleteClusterParamsClassificationCAPABILITY   SlurmdbV0042DeleteClusterParamsClassification = "CAPABILITY"
	SlurmdbV0042DeleteClusterParamsClassificationCAPACITY     SlurmdbV0042DeleteClusterParamsClassification = "CAPACITY"
	SlurmdbV0042DeleteClusterParamsClassificationCAPAPACITY   SlurmdbV0042DeleteClusterParamsClassification = "CAPAPACITY"
	SlurmdbV0042DeleteClusterParamsClassificationUNCLASSIFIED SlurmdbV0042DeleteClusterParamsClassification = "UNCLASSIFIED"
)

// Defines values for SlurmdbV0042DeleteClusterParamsFlags.
const (
	SlurmdbV0042DeleteClusterParamsFlagsEXTERNAL       SlurmdbV0042DeleteClusterParamsFlags = "EXTERNAL"
	SlurmdbV0042DeleteClusterParamsFlagsFEDERATION     SlurmdbV0042DeleteClusterParamsFlags = "FEDERATION"
	SlurmdbV0042DeleteClusterParamsFlagsFRONTEND       SlurmdbV0042DeleteClusterParamsFlags = "FRONT_END"
	SlurmdbV0042DeleteClusterParamsFlagsMULTIPLESLURMD SlurmdbV0042DeleteClusterParamsFlags = "MULTIPLE_SLURMD"
	SlurmdbV0042DeleteClusterParamsFlagsREGISTERING    SlurmdbV0042DeleteClusterParamsFlags = "REGISTERING"
)

// Defines values for SlurmdbV0042GetClusterParamsClassification.
const (
	SlurmdbV0042GetClusterParamsClassificationCAPABILITY   SlurmdbV0042GetClusterParamsClassification = "CAPABILITY"
	SlurmdbV0042GetClusterParamsClassificationCAPACITY     SlurmdbV0042GetClusterParamsClassification = "CAPACITY"
	SlurmdbV0042GetClusterParamsClassificationCAPAPACITY   SlurmdbV0042GetClusterParamsClassification = "CAPAPACITY"
	SlurmdbV0042GetClusterParamsClassificationUNCLASSIFIED SlurmdbV0042GetClusterParamsClassification = "UNCLASSIFIED"
)

// Defines values for SlurmdbV0042GetClusterParamsFlags.
const (
	SlurmdbV0042GetClusterParamsFlagsEXTERNAL       SlurmdbV0042GetClusterParamsFlags = "EXTERNAL"
	SlurmdbV0042GetClusterParamsFlagsFEDERATION     SlurmdbV0042GetClusterParamsFlags = "FEDERATION"
	SlurmdbV0042GetClusterParamsFlagsFRONTEND       SlurmdbV0042GetClusterParamsFlags = "FRONT_END"
	SlurmdbV0042GetClusterParamsFlagsMULTIPLESLURMD SlurmdbV0042GetClusterParamsFlags = "MULTIPLE_SLURMD"
	SlurmdbV0042GetClusterParamsFlagsREGISTERING    SlurmdbV0042GetClusterParamsFlags = "REGISTERING"
)

// Defines values for SlurmdbV0042GetQosParamsPreemptMode.
const (
	SlurmdbV0042GetQosParamsPreemptModeCANCEL   SlurmdbV0042GetQosParamsPreemptMode = "CANCEL"
	SlurmdbV0042GetQosParamsPreemptModeDISABLED SlurmdbV0042GetQosParamsPreemptMode = "DISABLED"
	SlurmdbV0042GetQosParamsPreemptModeGANG     SlurmdbV0042GetQosParamsPreemptMode = "GANG"
	SlurmdbV0042GetQosParamsPreemptModeREQUEUE  SlurmdbV0042GetQosParamsPreemptMode = "REQUEUE"
	SlurmdbV0042GetQosParamsPreemptModeSUSPEND  SlurmdbV0042GetQosParamsPreemptMode = "SUSPEND"
)

// Defines values for SlurmdbV0042PostQosParamsPreemptMode.
const (
	CANCEL   SlurmdbV0042PostQosParamsPreemptMode = "CANCEL"
	DISABLED SlurmdbV0042PostQosParamsPreemptMode = "DISABLED"
	GANG     SlurmdbV0042PostQosParamsPreemptMode = "GANG"
	REQUEUE  SlurmdbV0042PostQosParamsPreemptMode = "REQUEUE"
	SUSPEND  SlurmdbV0042PostQosParamsPreemptMode = "SUSPEND"
)

// Defines values for SlurmdbV0042GetUsersParamsAdminLevel.
const (
	Administrator SlurmdbV0042GetUsersParamsAdminLevel = "Administrator"
	None          SlurmdbV0042GetUsersParamsAdminLevel = "None"
	NotSet        SlurmdbV0042GetUsersParamsAdminLevel = "Not Set"
	Operator      SlurmdbV0042GetUsersParamsAdminLevel = "Operator"
)

// Defines values for SlurmdbV0042PostUsersAssociationParamsFlags.
const (
	SlurmdbV0042PostUsersAssociationParamsFlagsALL        SlurmdbV0042PostUsersAssociationParamsFlags = "ALL"
	SlurmdbV0042PostUsersAssociationParamsFlagsDETAIL     SlurmdbV0042PostUsersAssociationParamsFlags = "DETAIL"
	SlurmdbV0042PostUsersAssociationParamsFlagsFEDERATION SlurmdbV0042PostUsersAssociationParamsFlags = "FEDERATION"
	SlurmdbV0042PostUsersAssociationParamsFlagsFUTURE     SlurmdbV0042PostUsersAssociationParamsFlags = "FUTURE"
	SlurmdbV0042PostUsersAssociationParamsFlagsLOCAL      SlurmdbV0042PostUsersAssociationParamsFlags = "LOCAL"
	SlurmdbV0042PostUsersAssociationParamsFlagsMIXED      SlurmdbV0042PostUsersAssociationParamsFlags = "MIXED"
	SlurmdbV0042PostUsersAssociationParamsFlagsSIBLING    SlurmdbV0042PostUsersAssociationParamsFlags = "SIBLING"
)

// V0042Account defines model for v0.0.42_account.
type V0042Account struct {
	Associations *V0042AssocShortList `json:"associations,omitempty"`
	Coordinators *V0042CoordList      `json:"coordinators,omitempty"`

	// Description Arbitrary string describing the account
	Description string `json:"description"`

	// Flags Flags associated with this account
	Flags *[]V0042AccountFlags `json:"flags,omitempty"`

	// Name Account name
	Name string `json:"name"`

	// Organization Organization to which the account belongs
	Organization string `json:"organization"`
}

// V0042AccountFlags defines model for V0042Account.Flags.
type V0042AccountFlags string

// V0042AccountList defines model for v0.0.42_account_list.
type V0042AccountList = []V0042Account

// V0042AccountShort defines model for v0.0.42_account_short.
type V0042AccountShort struct {
	// Description Arbitrary string describing the account
	Description *string `json:"description,omitempty"`

	// Organization Organization to which the account belongs
	Organization *string `json:"organization,omitempty"`
}

// V0042Accounting defines model for v0.0.42_accounting.
type V0042Accounting struct {
	TRES      *V0042Tres `json:"TRES,omitempty"`
	Allocated *struct {
		// Seconds Number of seconds allocated
		Seconds *int64 `json:"seconds,omitempty"`
	} `json:"allocated,omitempty"`

	// Id Association ID or Workload characterization key ID
	Id *int32 `json:"id,omitempty"`

	// IdAlt Alternate ID (not currently used)
	IdAlt *int32 `json:"id_alt,omitempty"`

	// Start When the record was started (UNIX timestamp)
	Start *int64 `json:"start,omitempty"`
}

// V0042AccountingList defines model for v0.0.42_accounting_list.
type V0042AccountingList = []V0042Accounting

// V0042AccountsAddCond defines model for v0.0.42_accounts_add_cond.
type V0042AccountsAddCond struct {
	Accounts    V0042StringList   `json:"accounts"`
	Association *V0042AssocRecSet `json:"association,omitempty"`
	Clusters    *V0042StringList  `json:"clusters,omitempty"`
}

// V0042AcctGatherEnergy defines model for v0.0.42_acct_gather_energy.
type V0042AcctGatherEnergy struct {
	// AverageWatts Average power consumption, in watts
	AverageWatts *int32 `json:"average_watts,omitempty"`

	// BaseConsumedEnergy The energy consumed between when the node was powered on and the last time it was registered by slurmd, in joules
	BaseConsumedEnergy *int64 `json:"base_consumed_energy,omitempty"`

	// ConsumedEnergy The energy consumed between the last time the node was registered by the slurmd daemon and the last node energy accounting sample, in joules
	ConsumedEnergy *int64                  `json:"consumed_energy,omitempty"`
	CurrentWatts   *V0042Uint32NoValStruct `json:"current_watts,omitempty"`

	// LastCollected Time when energy data was last retrieved (UNIX timestamp)
	LastCollected *int64 `json:"last_collected,omitempty"`

	// PreviousConsumedEnergy Previous value of consumed_energy
	PreviousConsumedEnergy *int64 `json:"previous_consumed_energy,omitempty"`
}

// V0042Assoc defines model for v0.0.42_assoc.
type V0042Assoc struct {
	// Account Account name
	Account    *string              `json:"account,omitempty"`
	Accounting *V0042AccountingList `json:"accounting,omitempty"`

	// Cluster Cluster name
	Cluster *string `json:"cluster,omitempty"`

	// Comment Arbitrary comment
	Comment *string `json:"comment,omitempty"`
	Default *struct {
		// Qos Default QOS
		Qos *string `json:"qos,omitempty"`
	} `json:"default,omitempty"`

	// Flags Flags on the association
	Flags *[]V0042AssocFlags `json:"flags,omitempty"`

	// Id Unique ID
	Id *int32 `json:"id,omitempty"`

	// IsDefault Is default association for user
	IsDefault *bool `json:"is_default,omitempty"`

	// Lineage Complete path up the hierarchy to the root association
	Lineage *string `json:"lineage,omitempty"`
	Max     *struct {
		Jobs *struct {
			Accruing *V0042Uint32NoValStruct `json:"accruing,omitempty"`
			Active   *V0042Uint32NoValStruct `json:"active,omitempty"`
			Per      *struct {
				Accruing  *V0042Uint32NoValStruct `json:"accruing,omitempty"`
				Count     *V0042Uint32NoValStruct `json:"count,omitempty"`
				Submitted *V0042Uint32NoValStruct `json:"submitted,omitempty"`
				WallClock *V0042Uint32NoValStruct `json:"wall_clock,omitempty"`
			} `json:"per,omitempty"`
			Total *V0042Uint32NoValStruct `json:"total,omitempty"`
		} `json:"jobs,omitempty"`
		Per *struct {
			Account *struct {
				WallClock *V0042Uint32NoValStruct `json:"wall_clock,omitempty"`
			} `json:"account,omitempty"`
		} `json:"per,omitempty"`
		Tres *struct {
			Group *struct {
				Active  *V0042TresList `json:"active,omitempty"`
				Minutes *V0042TresList `json:"minutes,omitempty"`
			} `json:"group,omitempty"`
			Minutes *struct {
				Per *struct {
					Job *V0042TresList `json:"job,omitempty"`
				} `json:"per,omitempty"`
				Total *V0042TresList `json:"total,omitempty"`
			} `json:"minutes,omitempty"`
			Per *struct {
				Job  *V0042TresList `json:"job,omitempty"`
				Node *V0042TresList `json:"node,omitempty"`
			} `json:"per,omitempty"`
			Total *V0042TresList `json:"total,omitempty"`
		} `json:"tres,omitempty"`
	} `json:"max,omitempty"`
	Min *struct {
		PriorityThreshold *V0042Uint32NoValStruct `json:"priority_threshold,omitempty"`
	} `json:"min,omitempty"`

	// ParentAccount Name of parent account
	ParentAccount *string `json:"parent_account,omitempty"`

	// Partition Partition name
	Partition *string                 `json:"partition,omitempty"`
	Priority  *V0042Uint32NoValStruct `json:"priority,omitempty"`

	// Qos List of QOS names
	Qos *V0042QosStringIdList `json:"qos,omitempty"`

	// SharesRaw Allocated shares used for fairshare calculation
	SharesRaw *int32 `json:"shares_raw,omitempty"`

	// User User name
	User string `json:"user"`
}

// V0042AssocFlags defines model for V0042Assoc.Flags.
type V0042AssocFlags string

// V0042AssocList defines model for v0.0.42_assoc_list.
type V0042AssocList = []V0042Assoc

// V0042AssocRecSet defines model for v0.0.42_assoc_rec_set.
type V0042AssocRecSet struct {
	// Comment Arbitrary comment
	Comment *string `json:"comment,omitempty"`

	// Defaultqos Default QOS
	Defaultqos *string `json:"defaultqos,omitempty"`

	// Fairshare Allocated shares used for fairshare calculation
	Fairshare             *int32                  `json:"fairshare,omitempty"`
	Grpjobs               *V0042Uint32NoValStruct `json:"grpjobs,omitempty"`
	Grpjobsaccrue         *V0042Uint32NoValStruct `json:"grpjobsaccrue,omitempty"`
	Grpsubmitjobs         *V0042Uint32NoValStruct `json:"grpsubmitjobs,omitempty"`
	Grptres               *V0042TresList          `json:"grptres,omitempty"`
	Grptresmins           *V0042TresList          `json:"grptresmins,omitempty"`
	Grptresrunmins        *V0042TresList          `json:"grptresrunmins,omitempty"`
	Grpwall               *V0042Uint32NoValStruct `json:"grpwall,omitempty"`
	Maxjobs               *V0042Uint32NoValStruct `json:"maxjobs,omitempty"`
	Maxjobsaccrue         *V0042Uint32NoValStruct `json:"maxjobsaccrue,omitempty"`
	Maxsubmitjobs         *V0042Uint32NoValStruct `json:"maxsubmitjobs,omitempty"`
	Maxtresminsperjob     *V0042TresList          `json:"maxtresminsperjob,omitempty"`
	Maxtresperjob         *V0042TresList          `json:"maxtresperjob,omitempty"`
	Maxtrespernode        *V0042TresList          `json:"maxtrespernode,omitempty"`
	Maxtresrunmins        *V0042TresList          `json:"maxtresrunmins,omitempty"`
	Maxwalldurationperjob *V0042Uint32NoValStruct `json:"maxwalldurationperjob,omitempty"`
	Minpriothresh         *V0042Uint32NoValStruct `json:"minpriothresh,omitempty"`

	// Parent Name of parent account
	Parent   *string                 `json:"parent,omitempty"`
	Priority *V0042Uint32NoValStruct `json:"priority,omitempty"`

	// Qoslevel List of QOS names
	Qoslevel *V0042QosStringIdList `json:"qoslevel,omitempty"`
}

// V0042AssocSharesObjList defines model for v0.0.42_assoc_shares_obj_list.
type V0042AssocSharesObjList = []V0042AssocSharesObjWrap

// V0042AssocSharesObjWrap defines model for v0.0.42_assoc_shares_obj_wrap.
type V0042AssocSharesObjWrap struct {
	// Cluster Cluster name
	Cluster        *string                  `json:"cluster,omitempty"`
	EffectiveUsage *V0042Float64NoValStruct `json:"effective_usage,omitempty"`
	Fairshare      *struct {
		Factor *V0042Float64NoValStruct `json:"factor,omitempty"`
		Level  *V0042Float64NoValStruct `json:"level,omitempty"`
	} `json:"fairshare,omitempty"`

	// Id Association ID
	Id *int32 `json:"id,omitempty"`

	// Name Share name
	Name *string `json:"name,omitempty"`

	// Parent Parent name
	Parent *string `json:"parent,omitempty"`

	// Partition Partition name
	Partition        *string                  `json:"partition,omitempty"`
	Shares           *V0042Uint32NoValStruct  `json:"shares,omitempty"`
	SharesNormalized *V0042Float64NoValStruct `json:"shares_normalized,omitempty"`
	Tres             *struct {
		GroupMinutes *V0042SharesUint64TresList   `json:"group_minutes,omitempty"`
		RunSeconds   *V0042SharesUint64TresList   `json:"run_seconds,omitempty"`
		Usage        *V0042SharesFloat128TresList `json:"usage,omitempty"`
	} `json:"tres,omitempty"`

	// Type User or account association
	Type *[]V0042AssocSharesObjWrapType `json:"type,omitempty"`

	// Usage Measure of tresbillableunits usage
	Usage           *int64                   `json:"usage,omitempty"`
	UsageNormalized *V0042Float64NoValStruct `json:"usage_normalized,omitempty"`
}

// V0042AssocSharesObjWrapType defines model for V0042AssocSharesObjWrap.Type.
type V0042AssocSharesObjWrapType string

// V0042AssocShort defines model for v0.0.42_assoc_short.
type V0042AssocShort struct {
	// Account Account name
	Account *string `json:"account,omitempty"`

	// Cluster Cluster name
	Cluster *string `json:"cluster,omitempty"`

	// Id Numeric association ID
	Id *int32 `json:"id,omitempty"`

	// Partition Partition name
	Partition *string `json:"partition,omitempty"`

	// User User name
	User string `json:"user"`
}

// V0042AssocShortList defines model for v0.0.42_assoc_short_list.
type V0042AssocShortList = []V0042AssocShort

// V0042BfExitFields defines model for v0.0.42_bf_exit_fields.
type V0042BfExitFields struct {
	// BfMaxJobStart Reached number of jobs allowed to start
	BfMaxJobStart *int32 `json:"bf_max_job_start,omitempty"`

	// BfMaxJobTest Reached number of jobs allowed to be tested
	BfMaxJobTest *int32 `json:"bf_max_job_test,omitempty"`

	// BfMaxTime Reached maximum allowed scheduler time
	BfMaxTime *int32 `json:"bf_max_time,omitempty"`

	// BfNodeSpaceSize Reached table size limit
	BfNodeSpaceSize *int32 `json:"bf_node_space_size,omitempty"`

	// EndJobQueue Reached end of queue
	EndJobQueue *int32 `json:"end_job_queue,omitempty"`

	// StateChanged System state changed
	StateChanged *int32 `json:"state_changed,omitempty"`
}

// V0042ClusterRec defines model for v0.0.42_cluster_rec.
type V0042ClusterRec struct {
	Associations *struct {
		Root *V0042AssocShort `json:"root,omitempty"`
	} `json:"associations,omitempty"`
	Controller *struct {
		// Host ControlHost
		Host *string `json:"host,omitempty"`

		// Port ControlPort
		Port *int32 `json:"port,omitempty"`
	} `json:"controller,omitempty"`

	// Flags Flags
	Flags *[]V0042ClusterRecFlags `json:"flags,omitempty"`

	// Name ClusterName
	Name *string `json:"name,omitempty"`

	// Nodes Node names
	Nodes *string `json:"nodes,omitempty"`

	// RpcVersion RPC version used in the cluster
	RpcVersion *int32 `json:"rpc_version,omitempty"`
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	SelectPlugin *string        `json:"select_plugin,omitempty"`
	Tres         *V0042TresList `json:"tres,omitempty"`
}

// V0042ClusterRecFlags defines model for V0042ClusterRec.Flags.
type V0042ClusterRecFlags string

// V0042ClusterRecList defines model for v0.0.42_cluster_rec_list.
type V0042ClusterRecList = []V0042ClusterRec

// V0042ControllerPing defines model for v0.0.42_controller_ping.
type V0042ControllerPing struct {
	// Hostname Target for ping
	Hostname *string `json:"hostname,omitempty"`

	// Latency Number of microseconds it took to successfully ping or timeout
	Latency *int64 `json:"latency,omitempty"`

	// Mode The operating mode of the responding slurmctld
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	Mode *string `json:"mode,omitempty"`

	// Pinged Ping result
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	Pinged *string `json:"pinged,omitempty"`

	// Primary Is responding slurmctld the primary controller
	Primary bool `json:"primary"`

	// Responding If ping RPC responded with pong from controller
	Responding bool `json:"responding"`
}

// V0042ControllerPingArray defines model for v0.0.42_controller_ping_array.
type V0042ControllerPingArray = []V0042ControllerPing

// V0042Coord defines model for v0.0.42_coord.
type V0042Coord struct {
	// Direct Indicates whether the coordinator was directly assigned to this account
	Direct *bool `json:"direct,omitempty"`

	// Name User name
	Name string `json:"name"`
}

// V0042CoordList defines model for v0.0.42_coord_list.
type V0042CoordList = []V0042Coord

// V0042CronEntry defines model for v0.0.42_cron_entry.
type V0042CronEntry struct {
	// Command Command to run
	Command *string `json:"command,omitempty"`

	// DayOfMonth Ranged string specifying eligible day of month values (e.g. 0-10,29)
	DayOfMonth *string `json:"day_of_month,omitempty"`

	// DayOfWeek Ranged string specifying eligible day of week values (e.g.0-3,7)
	DayOfWeek *string `json:"day_of_week,omitempty"`

	// Flags Flags
	Flags *[]V0042CronEntryFlags `json:"flags,omitempty"`

	// Hour Ranged string specifying eligible hour values (e.g. 0-5,23)
	Hour *string `json:"hour,omitempty"`
	Line *struct {
		// End End of this entry in file
		End *int32 `json:"end,omitempty"`

		// Start Start of this entry in file
		Start *int32 `json:"start,omitempty"`
	} `json:"line,omitempty"`

	// Minute Ranged string specifying eligible minute values (e.g. 0-10,50)
	Minute *string `json:"minute,omitempty"`

	// Month Ranged string specifying eligible month values (e.g. 0-5,12)
	Month *string `json:"month,omitempty"`

	// Specification Complete time specification (* means valid for all allowed values) - minute hour day_of_month month day_of_week
	Specification *string `json:"specification,omitempty"`
}

// V0042CronEntryFlags defines model for V0042CronEntry.Flags.
type V0042CronEntryFlags string

// V0042CsvString defines model for v0.0.42_csv_string.
type V0042CsvString = []string

// V0042Float64NoValStruct defines model for v0.0.42_float64_no_val_struct.
type V0042Float64NoValStruct struct {
	// Infinite True if number has been set to infinite; "set" and "number" will be ignored
	Infinite *bool `json:"infinite,omitempty"`

	// Number If "set" is True the number will be set with value; otherwise ignore number contents
	Number *float64 `json:"number,omitempty"`

	// Set True if number has been set; False if number is unset
	Set *bool `json:"set,omitempty"`
}

// V0042Hostlist defines model for v0.0.42_hostlist.
type V0042Hostlist = []string

// V0042HostlistString defines model for v0.0.42_hostlist_string.
type V0042HostlistString = []string

// V0042Instance defines model for v0.0.42_instance.
type V0042Instance struct {
	// Cluster Cluster name
	Cluster *string `json:"cluster,omitempty"`

	// Extra Arbitrary string used for node filtering if extra constraints are enabled
	Extra *string `json:"extra,omitempty"`

	// InstanceId Cloud instance ID
	InstanceId *string `json:"instance_id,omitempty"`

	// InstanceType Cloud instance type
	InstanceType *string `json:"instance_type,omitempty"`

	// NodeName NodeName
	NodeName *string `json:"node_name,omitempty"`
	Time     *struct {
		// TimeEnd When the instance will end (UNIX timestamp)
		TimeEnd *int64 `json:"time_end,omitempty"`

		// TimeStart When the instance will start (UNIX timestamp)
		TimeStart *int64 `json:"time_start,omitempty"`
	} `json:"time,omitempty"`
}

// V0042InstanceList defines model for v0.0.42_instance_list.
type V0042InstanceList = []V0042Instance

// V0042Job defines model for v0.0.42_job.
type V0042Job struct {
	// Account Account the job ran under
	Account *string `json:"account,omitempty"`

	// AllocationNodes List of nodes allocated to the job
	AllocationNodes *int32 `json:"allocation_nodes,omitempty"`
	Array           *struct {
		// JobId Job ID of job array, or 0 if N/A
		JobId  *int32 `json:"job_id,omitempty"`
		Limits *struct {
			Max *struct {
				Running *struct {
					// Tasks Maximum number of simultaneously running tasks, 0 if no limit
					Tasks *int32 `json:"tasks,omitempty"`
				} `json:"running,omitempty"`
			} `json:"max,omitempty"`
		} `json:"limits,omitempty"`

		// Task String expression of task IDs in this record
		Task   *string                 `json:"task,omitempty"`
		TaskId *V0042Uint32NoValStruct `json:"task_id,omitempty"`
	} `json:"array,omitempty"`
	Association *V0042AssocShort `json:"association,omitempty"`

	// Block The name of the block to be used (used with Blue Gene systems)
	Block *string `json:"block,omitempty"`

	// Cluster Cluster name
	Cluster *string `json:"cluster,omitempty"`
	Comment *struct {
		// Administrator Arbitrary comment made by administrator
		Administrator *string `json:"administrator,omitempty"`

		// Job Arbitrary comment made by user
		Job *string `json:"job,omitempty"`

		// System Arbitrary comment from slurmctld
		System *string `json:"system,omitempty"`
	} `json:"comment,omitempty"`

	// Constraints Feature(s) the job requested as a constraint
	Constraints *string `json:"constraints,omitempty"`

	// Container Absolute path to OCI container bundle
	Container       *string                      `json:"container,omitempty"`
	DerivedExitCode *V0042ProcessExitCodeVerbose `json:"derived_exit_code,omitempty"`
	ExitCode        *V0042ProcessExitCodeVerbose `json:"exit_code,omitempty"`

	// Extra Arbitrary string used for node filtering if extra constraints are enabled
	Extra *string `json:"extra,omitempty"`

	// FailedNode Name of node that caused job failure
	FailedNode *string `json:"failed_node,omitempty"`

	// Flags Flags associated with this job
	Flags *[]V0042JobFlags `json:"flags,omitempty"`

	// Group Group ID of the user that owns the job
	Group *string `json:"group,omitempty"`
	Het   *struct {
		// JobId Heterogeneous job ID, if applicable
		JobId     *int32                  `json:"job_id,omitempty"`
		JobOffset *V0042Uint32NoValStruct `json:"job_offset,omitempty"`
	} `json:"het,omitempty"`

	// Hold Hold (true) or release (false) job
	Hold *bool `json:"hold,omitempty"`

	// JobId Job ID
	JobId *int32 `json:"job_id,omitempty"`

	// KillRequestUser User ID that requested termination of the job
	KillRequestUser *string `json:"kill_request_user,omitempty"`

	// Licenses License(s) required by the job
	Licenses *string `json:"licenses,omitempty"`
	Mcs      *struct {
		// Label Multi-Category Security label on the job
		Label *string `json:"label,omitempty"`
	} `json:"mcs,omitempty"`

	// Name Job name
	Name *string `json:"name,omitempty"`

	// Nodes Node(s) allocated to the job
	Nodes *string `json:"nodes,omitempty"`

	// Partition Partition assigned to the job
	Partition *string                 `json:"partition,omitempty"`
	Priority  *V0042Uint32NoValStruct `json:"priority,omitempty"`

	// Qos Quality of Service assigned to the job
	Qos *string `json:"qos,omitempty"`

	// Qosreq Requested QOS
	Qosreq   *string `json:"qosreq,omitempty"`
	Required *struct {
		// CPUs Minimum number of CPUs required
		CPUs          *int32                  `json:"CPUs,omitempty"`
		MemoryPerCpu  *V0042Uint64NoValStruct `json:"memory_per_cpu,omitempty"`
		MemoryPerNode *V0042Uint64NoValStruct `json:"memory_per_node,omitempty"`
	} `json:"required,omitempty"`
	Reservation *struct {
		// Id Unique identifier of requested reservation
		Id *int32 `json:"id,omitempty"`

		// Name Name of reservation to use
		Name *string `json:"name,omitempty"`
	} `json:"reservation,omitempty"`

	// RestartCnt How many times this job has been requeued/restarted
	RestartCnt *int32 `json:"restart_cnt,omitempty"`

	// Script Job batch script; only the first component in a HetJob is populated or honored
	Script *string `json:"script,omitempty"`
	State  *struct {
		// Current Current state
		Current *[]V0042JobStateCurrent `json:"current,omitempty"`

		// Reason Reason for previous Pending or Failed state
		Reason *string `json:"reason,omitempty"`
	} `json:"state,omitempty"`

	// Stderr Path to stderr file
	Stderr *string `json:"stderr,omitempty"`

	// StderrExpanded Job stderr with expanded fields
	StderrExpanded *string `json:"stderr_expanded,omitempty"`

	// Stdin Path to stdin file
	Stdin *string `json:"stdin,omitempty"`

	// StdinExpanded Job stdin with expanded fields
	StdinExpanded *string `json:"stdin_expanded,omitempty"`

	// Stdout Path to stdout file
	Stdout *string `json:"stdout,omitempty"`

	// StdoutExpanded Job stdout with expanded fields
	StdoutExpanded *string        `json:"stdout_expanded,omitempty"`
	Steps          *V0042StepList `json:"steps,omitempty"`

	// SubmitLine Command used to submit the job
	SubmitLine *string `json:"submit_line,omitempty"`
	Time       *struct {
		// Elapsed Elapsed time in seconds
		Elapsed *int32 `json:"elapsed,omitempty"`

		// Eligible Time when the job became eligible to run (UNIX timestamp)
		Eligible *int64 `json:"eligible,omitempty"`

		// End End time (UNIX timestamp)
		End     *int64                  `json:"end,omitempty"`
		Limit   *V0042Uint32NoValStruct `json:"limit,omitempty"`
		Planned *V0042Uint64NoValStruct `json:"planned,omitempty"`

		// Start Time execution began (UNIX timestamp)
		Start *int64 `json:"start,omitempty"`

		// Submission Time when the job was submitted (UNIX timestamp)
		Submission *int64 `json:"submission,omitempty"`

		// Suspended Total time in suspended state in seconds
		Suspended *int32 `json:"suspended,omitempty"`
		System    *struct {
			// Microseconds System CPU time used by the job in microseconds
			Microseconds *int64 `json:"microseconds,omitempty"`

			// Seconds System CPU time used by the job in seconds
			Seconds *int64 `json:"seconds,omitempty"`
		} `json:"system,omitempty"`
		Total *struct {
			// Microseconds Sum of System and User CPU time used by the job in microseconds
			Microseconds *int64 `json:"microseconds,omitempty"`

			// Seconds Sum of System and User CPU time used by the job in seconds
			Seconds *int64 `json:"seconds,omitempty"`
		} `json:"total,omitempty"`
		User *struct {
			// Microseconds User CPU time used by the job in microseconds
			Microseconds *int64 `json:"microseconds,omitempty"`

			// Seconds User CPU time used by the job in seconds
			Seconds *int64 `json:"seconds,omitempty"`
		} `json:"user,omitempty"`
	} `json:"time,omitempty"`
	Tres *struct {
		Allocated *V0042TresList `json:"allocated,omitempty"`
		Requested *V0042TresList `json:"requested,omitempty"`
	} `json:"tres,omitempty"`

	// UsedGres Generic resources used by job
	UsedGres *string `json:"used_gres,omitempty"`

	// User User that owns the job
	User  *string              `json:"user,omitempty"`
	Wckey *V0042WckeyTagStruct `json:"wckey,omitempty"`

	// WorkingDirectory Path to current working directory
	WorkingDirectory *string `json:"working_directory,omitempty"`
}

// V0042JobFlags defines model for V0042Job.Flags.
type V0042JobFlags string

// V0042JobStateCurrent defines model for V0042Job.State.Current.
type V0042JobStateCurrent string

// V0042JobAllocReq defines model for v0.0.42_job_alloc_req.
type V0042JobAllocReq struct {
	Hetjob *V0042JobDescMsgList `json:"hetjob,omitempty"`
	Job    *V0042JobDescMsg     `json:"job,omitempty"`
}

// V0042JobArrayResponseArray defines model for v0.0.42_job_array_response_array.
type V0042JobArrayResponseArray = []V0042JobArrayResponseMsgEntry

// V0042JobArrayResponseMsgEntry defines model for v0.0.42_job_array_response_msg_entry.
type V0042JobArrayResponseMsgEntry struct {
	// Error Verbose update status or error
	Error *string `json:"error,omitempty"`

	// ErrorCode Verbose update status or error
	ErrorCode *int32 `json:"error_code,omitempty"`

	// JobId Job ID for updated job
	JobId *int32 `json:"job_id,omitempty"`

	// StepId Step ID for updated job
	StepId *string `json:"step_id,omitempty"`

	// Why Update response message
	Why *string `json:"why,omitempty"`
}

// V0042JobDescMsg defines model for v0.0.42_job_desc_msg.
type V0042JobDescMsg struct {
	// Account Account associated with the job
	Account *string `json:"account,omitempty"`

	// AccountGatherFrequency Job accounting and profiling sampling intervals in seconds
	AccountGatherFrequency *string `json:"account_gather_frequency,omitempty"`

	// AdminComment Arbitrary comment made by administrator
	AdminComment *string `json:"admin_comment,omitempty"`

	// AllocationNodeList Local node making the resource allocation
	AllocationNodeList *string `json:"allocation_node_list,omitempty"`

	// AllocationNodePort Port to send allocation confirmation to
	AllocationNodePort *int32            `json:"allocation_node_port,omitempty"`
	Argv               *V0042StringArray `json:"argv,omitempty"`

	// Array Job array index value specification
	Array *string `json:"array,omitempty"`

	// BatchFeatures Features required for batch script's node
	BatchFeatures *string                 `json:"batch_features,omitempty"`
	BeginTime     *V0042Uint64NoValStruct `json:"begin_time,omitempty"`

	// BurstBuffer Burst buffer specifications
	BurstBuffer *string `json:"burst_buffer,omitempty"`

	// ClusterConstraint Required features that a federated cluster must have to have a sibling job submitted to it
	ClusterConstraint *string `json:"cluster_constraint,omitempty"`

	// Clusters Clusters that a federated job can run on
	Clusters *string `json:"clusters,omitempty"`

	// Comment Arbitrary comment made by user
	Comment *string `json:"comment,omitempty"`

	// Constraints Comma separated list of features that are required
	Constraints *string `json:"constraints,omitempty"`

	// Container Absolute path to OCI container bundle
	Container *string `json:"container,omitempty"`

	// ContainerId OCI container ID
	ContainerId *string `json:"container_id,omitempty"`

	// Contiguous True if job requires contiguous nodes
	Contiguous *bool `json:"contiguous,omitempty"`

	// CoreSpecification Specialized core count
	CoreSpecification *int32 `json:"core_specification,omitempty"`

	// CpuBinding Method for binding tasks to allocated CPUs
	CpuBinding *string `json:"cpu_binding,omitempty"`

	// CpuBindingFlags Flags for CPU binding
	CpuBindingFlags *[]V0042JobDescMsgCpuBindingFlags `json:"cpu_binding_flags,omitempty"`

	// CpuFrequency Requested CPU frequency range <p1>[-p2][:p3]
	CpuFrequency *string `json:"cpu_frequency,omitempty"`

	// CpusPerTask Number of CPUs required by each task
	CpusPerTask *int32 `json:"cpus_per_task,omitempty"`

	// CpusPerTres Semicolon delimited list of TRES=# values values indicating how many CPUs should be allocated for each specified TRES (currently only used for gres/gpu)
	CpusPerTres *string         `json:"cpus_per_tres,omitempty"`
	Crontab     *V0042CronEntry `json:"crontab,omitempty"`

	// CurrentWorkingDirectory Working directory to use for the job
	CurrentWorkingDirectory *string `json:"current_working_directory,omitempty"`

	// Deadline Latest time that the job may start (UNIX timestamp)
	Deadline *int64 `json:"deadline,omitempty"`

	// DelayBoot Number of seconds after job eligible start that nodes will be rebooted to satisfy feature specification
	DelayBoot *int32 `json:"delay_boot,omitempty"`

	// Dependency Other jobs that must meet certain criteria before this job can start
	Dependency *string `json:"dependency,omitempty"`

	// Distribution Layout
	Distribution          *string                 `json:"distribution,omitempty"`
	DistributionPlaneSize *V0042Uint16NoValStruct `json:"distribution_plane_size,omitempty"`

	// EndTime Expected end time (UNIX timestamp)
	EndTime       *int64            `json:"end_time,omitempty"`
	Environment   *V0042StringArray `json:"environment,omitempty"`
	ExcludedNodes *V0042CsvString   `json:"excluded_nodes,omitempty"`

	// Extra Arbitrary string used for node filtering if extra constraints are enabled
	Extra *string `json:"extra,omitempty"`

	// Flags Job flags
	Flags *[]V0042JobDescMsgFlags `json:"flags,omitempty"`

	// GroupId Group ID of the user that owns the job
	GroupId *string `json:"group_id,omitempty"`

	// HetjobGroup Unique sequence number applied to this component of the heterogeneous job
	HetjobGroup *int32 `json:"hetjob_group,omitempty"`

	// Hold Hold (true) or release (false) job
	Hold *bool `json:"hold,omitempty"`

	// Immediate If true, exit if resources are not available within the time period specified
	Immediate *bool `json:"immediate,omitempty"`

	// JobId Job ID
	JobId *int32 `json:"job_id,omitempty"`

	// KillOnNodeFail If true, kill job on node failure
	KillOnNodeFail   *bool                   `json:"kill_on_node_fail,omitempty"`
	KillWarningDelay *V0042Uint16NoValStruct `json:"kill_warning_delay,omitempty"`

	// KillWarningFlags Flags related to job signals
	KillWarningFlags *[]V0042JobDescMsgKillWarningFlags `json:"kill_warning_flags,omitempty"`

	// KillWarningSignal Signal to send when approaching end time (e.g. "10" or "USR1")
	KillWarningSignal *string `json:"kill_warning_signal,omitempty"`

	// Licenses License(s) required by the job
	Licenses *string `json:"licenses,omitempty"`

	// MailType Mail event type(s)
	MailType *[]V0042JobDescMsgMailType `json:"mail_type,omitempty"`

	// MailUser User to receive email notifications
	MailUser *string `json:"mail_user,omitempty"`

	// MaximumCpus Maximum number of CPUs required
	MaximumCpus *int32 `json:"maximum_cpus,omitempty"`

	// MaximumNodes Maximum node count
	MaximumNodes *int32 `json:"maximum_nodes,omitempty"`

	// McsLabel Multi-Category Security label on the job
	McsLabel *string `json:"mcs_label,omitempty"`

	// MemoryBinding Binding map for map/mask_cpu
	MemoryBinding *string `json:"memory_binding,omitempty"`

	// MemoryBindingType Method for binding tasks to memory
	MemoryBindingType *[]V0042JobDescMsgMemoryBindingType `json:"memory_binding_type,omitempty"`
	MemoryPerCpu      *V0042Uint64NoValStruct             `json:"memory_per_cpu,omitempty"`
	MemoryPerNode     *V0042Uint64NoValStruct             `json:"memory_per_node,omitempty"`

	// MemoryPerTres Semicolon delimited list of TRES=# values indicating how much memory in megabytes should be allocated for each specified TRES (currently only used for gres/gpu)
	MemoryPerTres *string `json:"memory_per_tres,omitempty"`

	// MinimumBoardsPerNode Boards per node required
	MinimumBoardsPerNode *int32 `json:"minimum_boards_per_node,omitempty"`

	// MinimumCpus Minimum number of CPUs required
	MinimumCpus *int32 `json:"minimum_cpus,omitempty"`

	// MinimumCpusPerNode Minimum number of CPUs per node
	MinimumCpusPerNode *int32 `json:"minimum_cpus_per_node,omitempty"`

	// MinimumNodes Minimum node count
	MinimumNodes *int32 `json:"minimum_nodes,omitempty"`

	// MinimumSocketsPerBoard Sockets per board required
	MinimumSocketsPerBoard *int32 `json:"minimum_sockets_per_board,omitempty"`

	// Name Job name
	Name *string `json:"name,omitempty"`

	// Network Network specs for job step
	Network *string `json:"network,omitempty"`

	// Nice Requested job priority change
	Nice *int32 `json:"nice,omitempty"`

	// Nodes Node count range specification (e.g. 1-15:4)
	Nodes *string `json:"nodes,omitempty"`

	// NtasksPerTres Number of tasks that can access each GPU
	NtasksPerTres *int32 `json:"ntasks_per_tres,omitempty"`

	// OomKillStep Kill whole step in case of OOM in one of the tasks
	OomKillStep *int32 `json:"oom_kill_step,omitempty"`

	// OpenMode Open mode used for stdout and stderr files
	OpenMode *[]V0042JobDescMsgOpenMode `json:"open_mode,omitempty"`

	// Overcommit Overcommit resources
	Overcommit *bool `json:"overcommit,omitempty"`

	// Partition Partition assigned to the job
	Partition *string `json:"partition,omitempty"`
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	PowerFlags *[]interface{} `json:"power_flags,omitempty"`

	// Prefer Comma separated list of features that are preferred but not required
	Prefer   *string                 `json:"prefer,omitempty"`
	Priority *V0042Uint32NoValStruct `json:"priority,omitempty"`

	// Profile Profile used by the acct_gather_profile plugin
	Profile *[]V0042JobDescMsgProfile `json:"profile,omitempty"`

	// Qos Quality of Service assigned to the job
	Qos *string `json:"qos,omitempty"`

	// Reboot Node reboot requested before start
	Reboot *bool `json:"reboot,omitempty"`

	// Requeue Determines whether the job may be requeued
	Requeue          *bool                   `json:"requeue,omitempty"`
	RequiredNodes    *V0042CsvString         `json:"required_nodes,omitempty"`
	RequiredSwitches *V0042Uint32NoValStruct `json:"required_switches,omitempty"`

	// Reservation Name of reservation to use
	Reservation *string `json:"reservation,omitempty"`

	// ReservePorts Port to send various notification msg to
	ReservePorts *int32 `json:"reserve_ports,omitempty"`
	Rlimits      *struct {
		As      *V0042Uint64NoValStruct `json:"as,omitempty"`
		Core    *V0042Uint64NoValStruct `json:"core,omitempty"`
		Cpu     *V0042Uint64NoValStruct `json:"cpu,omitempty"`
		Data    *V0042Uint64NoValStruct `json:"data,omitempty"`
		Fsize   *V0042Uint64NoValStruct `json:"fsize,omitempty"`
		Memlock *V0042Uint64NoValStruct `json:"memlock,omitempty"`
		Nofile  *V0042Uint64NoValStruct `json:"nofile,omitempty"`
		Nproc   *V0042Uint64NoValStruct `json:"nproc,omitempty"`
		Rss     *V0042Uint64NoValStruct `json:"rss,omitempty"`
		Stack   *V0042Uint64NoValStruct `json:"stack,omitempty"`
	} `json:"rlimits,omitempty"`

	// Script Job batch script; only the first component in a HetJob is populated or honored
	Script      *string                 `json:"script,omitempty"`
	SegmentSize *V0042Uint16NoValStruct `json:"segment_size,omitempty"`

	// SelinuxContext SELinux context
	SelinuxContext *string `json:"selinux_context,omitempty"`

	// Shared How the job can share resources with other jobs, if at all
	Shared *[]V0042JobDescMsgShared `json:"shared,omitempty"`

	// SiteFactor Site-specific priority factor
	SiteFactor *int32 `json:"site_factor,omitempty"`

	// SocketsPerNode Sockets per node required
	SocketsPerNode   *int32            `json:"sockets_per_node,omitempty"`
	SpankEnvironment *V0042StringArray `json:"spank_environment,omitempty"`

	// StandardError Path to stderr file
	StandardError *string `json:"standard_error,omitempty"`

	// StandardInput Path to stdin file
	StandardInput *string `json:"standard_input,omitempty"`

	// StandardOutput Path to stdout file
	StandardOutput *string `json:"standard_output,omitempty"`

	// Tasks Number of tasks
	Tasks *int32 `json:"tasks,omitempty"`

	// TasksPerBoard Number of tasks to invoke on each board
	TasksPerBoard *int32 `json:"tasks_per_board,omitempty"`

	// TasksPerCore Number of tasks to invoke on each core
	TasksPerCore *int32 `json:"tasks_per_core,omitempty"`

	// TasksPerNode Number of tasks to invoke on each node
	TasksPerNode *int32 `json:"tasks_per_node,omitempty"`

	// TasksPerSocket Number of tasks to invoke on each socket
	TasksPerSocket *int32 `json:"tasks_per_socket,omitempty"`

	// TemporaryDiskPerNode Minimum tmp disk space required per node
	TemporaryDiskPerNode *int32 `json:"temporary_disk_per_node,omitempty"`

	// ThreadSpecification Specialized thread count
	ThreadSpecification *int32 `json:"thread_specification,omitempty"`

	// ThreadsPerCore Threads per core required
	ThreadsPerCore *int32                  `json:"threads_per_core,omitempty"`
	TimeLimit      *V0042Uint32NoValStruct `json:"time_limit,omitempty"`
	TimeMinimum    *V0042Uint32NoValStruct `json:"time_minimum,omitempty"`

	// TresBind Task to TRES binding directives
	TresBind *string `json:"tres_bind,omitempty"`

	// TresFreq TRES frequency directives
	TresFreq *string `json:"tres_freq,omitempty"`

	// TresPerJob Comma separated list of TRES=# values to be allocated for every job
	TresPerJob *string `json:"tres_per_job,omitempty"`

	// TresPerNode Comma separated list of TRES=# values to be allocated for every node
	TresPerNode *string `json:"tres_per_node,omitempty"`

	// TresPerSocket Comma separated list of TRES=# values to be allocated for every socket
	TresPerSocket *string `json:"tres_per_socket,omitempty"`

	// TresPerTask Comma separated list of TRES=# values to be allocated for every task
	TresPerTask *string `json:"tres_per_task,omitempty"`

	// UserId User ID that owns the job
	UserId *string `json:"user_id,omitempty"`

	// WaitAllNodes If true, wait to start until after all nodes have booted
	WaitAllNodes *bool `json:"wait_all_nodes,omitempty"`

	// WaitForSwitch Maximum time to wait for switches in seconds
	WaitForSwitch *int32 `json:"wait_for_switch,omitempty"`

	// Wckey Workload characterization key
	Wckey *string `json:"wckey,omitempty"`

	// X11 X11 forwarding options
	X11 *[]V0042JobDescMsgX11 `json:"x11,omitempty"`

	// X11MagicCookie Magic cookie for X11 forwarding
	X11MagicCookie *string `json:"x11_magic_cookie,omitempty"`

	// X11TargetHost Hostname or UNIX socket if x11_target_port=0
	X11TargetHost *string `json:"x11_target_host,omitempty"`

	// X11TargetPort TCP port
	X11TargetPort *int32 `json:"x11_target_port,omitempty"`
}

// V0042JobDescMsgCpuBindingFlags defines model for V0042JobDescMsg.CpuBindingFlags.
type V0042JobDescMsgCpuBindingFlags string

// V0042JobDescMsgFlags defines model for V0042JobDescMsg.Flags.
type V0042JobDescMsgFlags string

// V0042JobDescMsgKillWarningFlags defines model for V0042JobDescMsg.KillWarningFlags.
type V0042JobDescMsgKillWarningFlags string

// V0042JobDescMsgMailType defines model for V0042JobDescMsg.MailType.
type V0042JobDescMsgMailType string

// V0042JobDescMsgMemoryBindingType defines model for V0042JobDescMsg.MemoryBindingType.
type V0042JobDescMsgMemoryBindingType string

// V0042JobDescMsgOpenMode defines model for V0042JobDescMsg.OpenMode.
type V0042JobDescMsgOpenMode string

// V0042JobDescMsgProfile defines model for V0042JobDescMsg.Profile.
type V0042JobDescMsgProfile string

// V0042JobDescMsgShared defines model for V0042JobDescMsg.Shared.
type V0042JobDescMsgShared string

// V0042JobDescMsgX11 defines model for V0042JobDescMsg.X11.
type V0042JobDescMsgX11 string

// V0042JobDescMsgList defines model for v0.0.42_job_desc_msg_list.
type V0042JobDescMsgList = []V0042JobDescMsg

// V0042JobInfo defines model for v0.0.42_job_info.
type V0042JobInfo struct {
	// Account Account associated with the job
	Account    *string                 `json:"account,omitempty"`
	AccrueTime *V0042Uint64NoValStruct `json:"accrue_time,omitempty"`

	// AdminComment Arbitrary comment made by administrator
	AdminComment *string `json:"admin_comment,omitempty"`

	// AllocatingNode Local node making the resource allocation
	AllocatingNode *string                 `json:"allocating_node,omitempty"`
	ArrayJobId     *V0042Uint32NoValStruct `json:"array_job_id,omitempty"`
	ArrayMaxTasks  *V0042Uint32NoValStruct `json:"array_max_tasks,omitempty"`
	ArrayTaskId    *V0042Uint32NoValStruct `json:"array_task_id,omitempty"`

	// ArrayTaskString String expression of task IDs in this record
	ArrayTaskString *string `json:"array_task_string,omitempty"`

	// AssociationId Unique identifier for the association
	AssociationId *int32 `json:"association_id,omitempty"`

	// BatchFeatures Features required for batch script's node
	BatchFeatures *string `json:"batch_features,omitempty"`

	// BatchFlag True if batch job
	BatchFlag *bool `json:"batch_flag,omitempty"`

	// BatchHost Name of host running batch script
	BatchHost    *string                  `json:"batch_host,omitempty"`
	BillableTres *V0042Float64NoValStruct `json:"billable_tres,omitempty"`

	// BurstBuffer Burst buffer specifications
	BurstBuffer *string `json:"burst_buffer,omitempty"`

	// BurstBufferState Burst buffer state details
	BurstBufferState *string `json:"burst_buffer_state,omitempty"`

	// Cluster Cluster name
	Cluster *string `json:"cluster,omitempty"`

	// ClusterFeatures List of required cluster features
	ClusterFeatures *string `json:"cluster_features,omitempty"`

	// Command Executed command
	Command *string `json:"command,omitempty"`

	// Comment Arbitrary comment
	Comment *string `json:"comment,omitempty"`

	// Container Absolute path to OCI container bundle
	Container *string `json:"container,omitempty"`

	// ContainerId OCI container ID
	ContainerId *string `json:"container_id,omitempty"`

	// Contiguous True if job requires contiguous nodes
	Contiguous *bool `json:"contiguous,omitempty"`

	// CoreSpec Specialized core count
	CoreSpec             *int32                  `json:"core_spec,omitempty"`
	CoresPerSocket       *V0042Uint16NoValStruct `json:"cores_per_socket,omitempty"`
	CpuFrequencyGovernor *V0042Uint32NoValStruct `json:"cpu_frequency_governor,omitempty"`
	CpuFrequencyMaximum  *V0042Uint32NoValStruct `json:"cpu_frequency_maximum,omitempty"`
	CpuFrequencyMinimum  *V0042Uint32NoValStruct `json:"cpu_frequency_minimum,omitempty"`
	Cpus                 *V0042Uint32NoValStruct `json:"cpus,omitempty"`
	CpusPerTask          *V0042Uint16NoValStruct `json:"cpus_per_task,omitempty"`

	// CpusPerTres Semicolon delimited list of TRES=# values indicating how many CPUs should be allocated for each specified TRES (currently only used for gres/gpu)
	CpusPerTres *string `json:"cpus_per_tres,omitempty"`

	// Cron Time specification for scrontab job
	Cron *string `json:"cron,omitempty"`

	// CurrentWorkingDirectory Working directory to use for the job
	CurrentWorkingDirectory *string                 `json:"current_working_directory,omitempty"`
	Deadline                *V0042Uint64NoValStruct `json:"deadline,omitempty"`
	DelayBoot               *V0042Uint32NoValStruct `json:"delay_boot,omitempty"`

	// Dependency Other jobs that must meet certain criteria before this job can start
	Dependency      *string                      `json:"dependency,omitempty"`
	DerivedExitCode *V0042ProcessExitCodeVerbose `json:"derived_exit_code,omitempty"`
	EligibleTime    *V0042Uint64NoValStruct      `json:"eligible_time,omitempty"`
	EndTime         *V0042Uint64NoValStruct      `json:"end_time,omitempty"`

	// ExcludedNodes Comma separated list of nodes that may not be used
	ExcludedNodes *string                      `json:"excluded_nodes,omitempty"`
	ExitCode      *V0042ProcessExitCodeVerbose `json:"exit_code,omitempty"`

	// Extra Arbitrary string used for node filtering if extra constraints are enabled
	Extra *string `json:"extra,omitempty"`

	// FailedNode Name of node that caused job failure
	FailedNode *string `json:"failed_node,omitempty"`

	// Features Comma separated list of features that are required
	Features *string `json:"features,omitempty"`

	// FederationOrigin Origin cluster's name (when using federation)
	FederationOrigin *string `json:"federation_origin,omitempty"`

	// FederationSiblingsActive Active sibling job names
	FederationSiblingsActive *string `json:"federation_siblings_active,omitempty"`

	// FederationSiblingsViable Viable sibling job names
	FederationSiblingsViable *string `json:"federation_siblings_viable,omitempty"`

	// Flags Job flags
	Flags      *[]V0042JobInfoFlags    `json:"flags,omitempty"`
	GresDetail *V0042JobInfoGresDetail `json:"gres_detail,omitempty"`

	// GroupId Group ID of the user that owns the job
	GroupId *int32 `json:"group_id,omitempty"`

	// GroupName Group name of the user that owns the job
	GroupName *string                 `json:"group_name,omitempty"`
	HetJobId  *V0042Uint32NoValStruct `json:"het_job_id,omitempty"`

	// HetJobIdSet Job ID range for all heterogeneous job components
	HetJobIdSet  *string                 `json:"het_job_id_set,omitempty"`
	HetJobOffset *V0042Uint32NoValStruct `json:"het_job_offset,omitempty"`

	// Hold Hold (true) or release (false) job
	Hold *bool `json:"hold,omitempty"`

	// JobId Job ID
	JobId        *int32          `json:"job_id,omitempty"`
	JobResources *V0042JobRes    `json:"job_resources,omitempty"`
	JobSizeStr   *V0042CsvString `json:"job_size_str,omitempty"`

	// JobState Current state
	JobState            *[]V0042JobInfoJobState `json:"job_state,omitempty"`
	LastSchedEvaluation *V0042Uint64NoValStruct `json:"last_sched_evaluation,omitempty"`

	// Licenses License(s) required by the job
	Licenses *string `json:"licenses,omitempty"`

	// MailType Mail event type(s)
	MailType *[]V0042JobInfoMailType `json:"mail_type,omitempty"`

	// MailUser User to receive email notifications
	MailUser *string                 `json:"mail_user,omitempty"`
	MaxCpus  *V0042Uint32NoValStruct `json:"max_cpus,omitempty"`
	MaxNodes *V0042Uint32NoValStruct `json:"max_nodes,omitempty"`

	// MaximumSwitchWaitTime Maximum time to wait for switches in seconds
	MaximumSwitchWaitTime *int32 `json:"maximum_switch_wait_time,omitempty"`

	// McsLabel Multi-Category Security label on the job
	McsLabel      *string                 `json:"mcs_label,omitempty"`
	MemoryPerCpu  *V0042Uint64NoValStruct `json:"memory_per_cpu,omitempty"`
	MemoryPerNode *V0042Uint64NoValStruct `json:"memory_per_node,omitempty"`

	// MemoryPerTres Semicolon delimited list of TRES=# values indicating how much memory in megabytes should be allocated for each specified TRES (currently only used for gres/gpu)
	MemoryPerTres         *string                 `json:"memory_per_tres,omitempty"`
	MinimumCpusPerNode    *V0042Uint16NoValStruct `json:"minimum_cpus_per_node,omitempty"`
	MinimumTmpDiskPerNode *V0042Uint32NoValStruct `json:"minimum_tmp_disk_per_node,omitempty"`

	// Name Job name
	Name *string `json:"name,omitempty"`

	// Network Network specs for the job
	Network *string `json:"network,omitempty"`

	// Nice Requested job priority change
	Nice      *int32                  `json:"nice,omitempty"`
	NodeCount *V0042Uint32NoValStruct `json:"node_count,omitempty"`

	// Nodes Node(s) allocated to the job
	Nodes *string `json:"nodes,omitempty"`

	// Partition Partition assigned to the job
	Partition *string `json:"partition,omitempty"`
	Power     *struct {
		// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
		Flags *[]interface{} `json:"flags,omitempty"`
	} `json:"power,omitempty"`
	PreSusTime      *V0042Uint64NoValStruct `json:"pre_sus_time,omitempty"`
	PreemptTime     *V0042Uint64NoValStruct `json:"preempt_time,omitempty"`
	PreemptableTime *V0042Uint64NoValStruct `json:"preemptable_time,omitempty"`

	// Prefer Feature(s) the job requested but that are not required
	Prefer              *string                   `json:"prefer,omitempty"`
	Priority            *V0042Uint32NoValStruct   `json:"priority,omitempty"`
	PriorityByPartition *V0042PriorityByPartition `json:"priority_by_partition,omitempty"`

	// Profile Profile used by the acct_gather_profile plugin
	Profile *[]V0042JobInfoProfile `json:"profile,omitempty"`

	// Qos Quality of Service assigned to the job, if pending the QOS requested
	Qos *string `json:"qos,omitempty"`

	// Reboot Node reboot requested before start
	Reboot *bool `json:"reboot,omitempty"`

	// Requeue Determines whether the job may be requeued
	Requeue *bool `json:"requeue,omitempty"`

	// RequiredNodes Comma separated list of required nodes
	RequiredNodes *string `json:"required_nodes,omitempty"`

	// RequiredSwitches Maximum number of switches
	RequiredSwitches *int32                  `json:"required_switches,omitempty"`
	ResizeTime       *V0042Uint64NoValStruct `json:"resize_time,omitempty"`

	// RestartCnt Number of job restarts
	RestartCnt *int32 `json:"restart_cnt,omitempty"`

	// ResvName Name of reservation to use
	ResvName *string `json:"resv_name,omitempty"`

	// ScheduledNodes List of nodes scheduled to be used for the job
	ScheduledNodes *string `json:"scheduled_nodes,omitempty"`

	// SelinuxContext SELinux context
	SelinuxContext *string `json:"selinux_context,omitempty"`

	// Shared How the job can share resources with other jobs, if at all
	Shared *[]V0042JobInfoShared `json:"shared,omitempty"`

	// SocketsPerBoard Number of sockets per board required
	SocketsPerBoard *int32                  `json:"sockets_per_board,omitempty"`
	SocketsPerNode  *V0042Uint16NoValStruct `json:"sockets_per_node,omitempty"`

	// StandardError Path to stderr file
	StandardError *string `json:"standard_error,omitempty"`

	// StandardInput Path to stdin file
	StandardInput *string `json:"standard_input,omitempty"`

	// StandardOutput Path to stdout file
	StandardOutput *string                 `json:"standard_output,omitempty"`
	StartTime      *V0042Uint64NoValStruct `json:"start_time,omitempty"`

	// StateDescription Optional details for state_reason
	StateDescription *string `json:"state_description,omitempty"`

	// StateReason Reason for current Pending or Failed state
	StateReason *string                 `json:"state_reason,omitempty"`
	SubmitTime  *V0042Uint64NoValStruct `json:"submit_time,omitempty"`
	SuspendTime *V0042Uint64NoValStruct `json:"suspend_time,omitempty"`

	// SystemComment Arbitrary comment from slurmctld
	SystemComment  *string                 `json:"system_comment,omitempty"`
	Tasks          *V0042Uint32NoValStruct `json:"tasks,omitempty"`
	TasksPerBoard  *V0042Uint16NoValStruct `json:"tasks_per_board,omitempty"`
	TasksPerCore   *V0042Uint16NoValStruct `json:"tasks_per_core,omitempty"`
	TasksPerNode   *V0042Uint16NoValStruct `json:"tasks_per_node,omitempty"`
	TasksPerSocket *V0042Uint16NoValStruct `json:"tasks_per_socket,omitempty"`
	TasksPerTres   *V0042Uint16NoValStruct `json:"tasks_per_tres,omitempty"`

	// ThreadSpec Specialized thread count
	ThreadSpec     *int32                  `json:"thread_spec,omitempty"`
	ThreadsPerCore *V0042Uint16NoValStruct `json:"threads_per_core,omitempty"`
	TimeLimit      *V0042Uint32NoValStruct `json:"time_limit,omitempty"`
	TimeMinimum    *V0042Uint32NoValStruct `json:"time_minimum,omitempty"`

	// TresAllocStr TRES used by the job
	TresAllocStr *string `json:"tres_alloc_str,omitempty"`

	// TresBind Task to TRES binding directives
	TresBind *string `json:"tres_bind,omitempty"`

	// TresFreq TRES frequency directives
	TresFreq *string `json:"tres_freq,omitempty"`

	// TresPerJob Comma separated list of TRES=# values to be allocated per job
	TresPerJob *string `json:"tres_per_job,omitempty"`

	// TresPerNode Comma separated list of TRES=# values to be allocated per node
	TresPerNode *string `json:"tres_per_node,omitempty"`

	// TresPerSocket Comma separated list of TRES=# values to be allocated per socket
	TresPerSocket *string `json:"tres_per_socket,omitempty"`

	// TresPerTask Comma separated list of TRES=# values to be allocated per task
	TresPerTask *string `json:"tres_per_task,omitempty"`

	// TresReqStr TRES requested by the job
	TresReqStr *string `json:"tres_req_str,omitempty"`

	// UserId User ID that owns the job
	UserId *int32 `json:"user_id,omitempty"`

	// UserName User name that owns the job
	UserName *string `json:"user_name,omitempty"`

	// Wckey Workload characterization key
	Wckey *string `json:"wckey,omitempty"`
}

// V0042JobInfoFlags defines model for V0042JobInfo.Flags.
type V0042JobInfoFlags string

// V0042JobInfoJobState defines model for V0042JobInfo.JobState.
type V0042JobInfoJobState string

// V0042JobInfoMailType defines model for V0042JobInfo.MailType.
type V0042JobInfoMailType string

// V0042JobInfoProfile defines model for V0042JobInfo.Profile.
type V0042JobInfoProfile string

// V0042JobInfoShared defines model for V0042JobInfo.Shared.
type V0042JobInfoShared string

// V0042JobInfoGresDetail defines model for v0.0.42_job_info_gres_detail.
type V0042JobInfoGresDetail = []string

// V0042JobInfoMsg defines model for v0.0.42_job_info_msg.
type V0042JobInfoMsg = []V0042JobInfo

// V0042JobList defines model for v0.0.42_job_list.
type V0042JobList = []V0042Job

// V0042JobRes defines model for v0.0.42_job_res.
type V0042JobRes struct {
	// Cpus Number of allocated CPUs
	Cpus  int32 `json:"cpus"`
	Nodes *struct {
		// Allocation Job resources for a node
		Allocation *V0042JobResNodes `json:"allocation,omitempty"`

		// Count Number of allocated nodes
		Count *int32 `json:"count,omitempty"`

		// List Node(s) allocated to the job
		List *string `json:"list,omitempty"`

		// SelectType Node scheduling selection method
		SelectType *[]V0042JobResNodesSelectType `json:"select_type,omitempty"`

		// Whole Whether whole nodes were allocated
		Whole *bool `json:"whole,omitempty"`
	} `json:"nodes,omitempty"`

	// SelectType Scheduler consumable resource selection type
	SelectType     []V0042JobResSelectType `json:"select_type"`
	ThreadsPerCore V0042Uint16NoValStruct  `json:"threads_per_core"`
}

// V0042JobResNodesSelectType defines model for V0042JobRes.Nodes.SelectType.
type V0042JobResNodesSelectType string

// V0042JobResSelectType defines model for V0042JobRes.SelectType.
type V0042JobResSelectType string

// V0042JobResCore defines model for v0.0.42_job_res_core.
type V0042JobResCore struct {
	// Index Core index
	Index int32 `json:"index"`

	// Status Core status
	Status []V0042JobResCoreStatus `json:"status"`
}

// V0042JobResCoreStatus defines model for V0042JobResCore.Status.
type V0042JobResCoreStatus string

// V0042JobResCoreArray defines model for v0.0.42_job_res_core_array.
type V0042JobResCoreArray = []V0042JobResCore

// V0042JobResNode defines model for v0.0.42_job_res_node.
type V0042JobResNode struct {
	Cpus *struct {
		// Count Total number of CPUs assigned to job
		Count *int32 `json:"count,omitempty"`

		// Used Total number of CPUs used by job
		Used *int32 `json:"used,omitempty"`
	} `json:"cpus,omitempty"`

	// Index Node index
	Index  int32 `json:"index"`
	Memory *struct {
		// Allocated Total memory (MiB) allocated to job
		Allocated *int64 `json:"allocated,omitempty"`

		// Used Total memory (MiB) used by job
		Used *int64 `json:"used,omitempty"`
	} `json:"memory,omitempty"`

	// Name Node name
	Name    string                 `json:"name"`
	Sockets V0042JobResSocketArray `json:"sockets"`
}

// V0042JobResNodes Job resources for a node
type V0042JobResNodes = []V0042JobResNode

// V0042JobResSocket defines model for v0.0.42_job_res_socket.
type V0042JobResSocket struct {
	Cores V0042JobResCoreArray `json:"cores"`

	// Index Core index
	Index int32 `json:"index"`
}

// V0042JobResSocketArray defines model for v0.0.42_job_res_socket_array.
type V0042JobResSocketArray = []V0042JobResSocket

// V0042JobSubmitReq defines model for v0.0.42_job_submit_req.
type V0042JobSubmitReq struct {
	Job  *V0042JobDescMsg     `json:"job,omitempty"`
	Jobs *V0042JobDescMsgList `json:"jobs,omitempty"`

	// Script Deprecated; Populate script field in jobs[0] or job
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	Script *string `json:"script,omitempty"`
}

// V0042KillJobsMsg defines model for v0.0.42_kill_jobs_msg.
type V0042KillJobsMsg struct {
	// Account Filter jobs to a specific account
	Account *string `json:"account,omitempty"`

	// Flags Filter jobs according to flags
	Flags *[]V0042KillJobsMsgFlags `json:"flags,omitempty"`

	// JobName Filter jobs to a specific name
	JobName *string `json:"job_name,omitempty"`

	// JobState Filter jobs to a specific state
	JobState *[]V0042KillJobsMsgJobState `json:"job_state,omitempty"`
	Jobs     *V0042KillJobsMsgJobsArray  `json:"jobs,omitempty"`
	Nodes    *V0042HostlistString        `json:"nodes,omitempty"`

	// Partition Filter jobs to a specific partition
	Partition *string `json:"partition,omitempty"`

	// Qos Filter jobs to a specific QOS
	Qos *string `json:"qos,omitempty"`

	// Reservation Filter jobs to a specific reservation
	Reservation *string `json:"reservation,omitempty"`

	// Signal Signal to send to jobs
	Signal *string `json:"signal,omitempty"`

	// UserId Filter jobs to a specific numeric user id
	UserId *string `json:"user_id,omitempty"`

	// UserName Filter jobs to a specific user name
	UserName *string `json:"user_name,omitempty"`

	// Wckey Filter jobs to a specific wckey
	Wckey *string `json:"wckey,omitempty"`
}

// V0042KillJobsMsgFlags defines model for V0042KillJobsMsg.Flags.
type V0042KillJobsMsgFlags string

// V0042KillJobsMsgJobState defines model for V0042KillJobsMsg.JobState.
type V0042KillJobsMsgJobState string

// V0042KillJobsMsgJobsArray defines model for v0.0.42_kill_jobs_msg_jobs_array.
type V0042KillJobsMsgJobsArray = []string

// V0042KillJobsRespJob defines model for v0.0.42_kill_jobs_resp_job.
type V0042KillJobsRespJob struct {
	Error *struct {
		// Code Numeric error encountered signaling job
		Code *int32 `json:"code,omitempty"`

		// Message Error message why signaling job failed
		Message *string `json:"message,omitempty"`

		// String String error encountered signaling job
		String *string `json:"string,omitempty"`
	} `json:"error,omitempty"`
	Federation *struct {
		// Sibling Name of federation sibling (may be empty for non-federation)
		Sibling *string `json:"sibling,omitempty"`
	} `json:"federation,omitempty"`
	JobId V0042Uint32NoValStruct `json:"job_id"`

	// StepId Job or Step ID that signaling failed
	StepId string `json:"step_id"`
}

// V0042KillJobsRespMsg List of jobs signal responses
type V0042KillJobsRespMsg = []V0042KillJobsRespJob

// V0042License defines model for v0.0.42_license.
type V0042License struct {
	// Free Number of licenses currently available
	Free *int32 `json:"Free,omitempty"`

	// LastConsumed Last known number of licenses that were consumed in the license manager (Remote Only)
	LastConsumed *int32 `json:"LastConsumed,omitempty"`

	// LastDeficit Number of "missing licenses" from the cluster's perspective
	LastDeficit *int32 `json:"LastDeficit,omitempty"`

	// LastUpdate When the license information was last updated (UNIX Timestamp)
	LastUpdate *int64 `json:"LastUpdate,omitempty"`

	// LicenseName Name of the license
	LicenseName *string `json:"LicenseName,omitempty"`

	// Remote Indicates whether licenses are served by the database
	Remote *bool `json:"Remote,omitempty"`

	// Reserved Number of licenses reserved
	Reserved *int32 `json:"Reserved,omitempty"`

	// Total Total number of licenses present
	Total *int32 `json:"Total,omitempty"`

	// Used Number of licenses in use
	Used *int32 `json:"Used,omitempty"`
}

// V0042Licenses defines model for v0.0.42_licenses.
type V0042Licenses = []V0042License

// V0042Node defines model for v0.0.42_node.
type V0042Node struct {
	ActiveFeatures *V0042CsvString `json:"active_features,omitempty"`

	// Address NodeAddr, used to establish a communication path
	Address *string `json:"address,omitempty"`

	// AllocCpus Total number of CPUs currently allocated for jobs
	AllocCpus *int32 `json:"alloc_cpus,omitempty"`

	// AllocIdleCpus Total number of idle CPUs
	AllocIdleCpus *int32 `json:"alloc_idle_cpus,omitempty"`

	// AllocMemory Total memory in MB currently allocated for jobs
	AllocMemory *int64 `json:"alloc_memory,omitempty"`

	// Architecture Computer architecture
	Architecture *string `json:"architecture,omitempty"`

	// Boards Number of Baseboards in nodes with a baseboard controller
	Boards   *int32                  `json:"boards,omitempty"`
	BootTime *V0042Uint64NoValStruct `json:"boot_time,omitempty"`

	// BurstbufferNetworkAddress Alternate network path to be used for sbcast network traffic
	BurstbufferNetworkAddress *string `json:"burstbuffer_network_address,omitempty"`

	// ClusterName Cluster name (only set in federated environments)
	ClusterName *string `json:"cluster_name,omitempty"`

	// Comment Arbitrary comment
	Comment *string `json:"comment,omitempty"`

	// Cores Number of cores in a single physical processor socket
	Cores *int32 `json:"cores,omitempty"`

	// CpuBinding Default method for binding tasks to allocated CPUs
	CpuBinding *int32 `json:"cpu_binding,omitempty"`

	// CpuLoad CPU load as reported by the OS
	CpuLoad *int32 `json:"cpu_load,omitempty"`

	// Cpus Total CPUs, including cores and threads
	Cpus *int32 `json:"cpus,omitempty"`

	// EffectiveCpus Number of effective CPUs (excluding specialized CPUs)
	EffectiveCpus *int32                 `json:"effective_cpus,omitempty"`
	Energy        *V0042AcctGatherEnergy `json:"energy,omitempty"`
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	ExternalSensors *map[string]interface{} `json:"external_sensors,omitempty"`

	// Extra Arbitrary string used for node filtering if extra constraints are enabled
	Extra    *string                 `json:"extra,omitempty"`
	Features *V0042CsvString         `json:"features,omitempty"`
	FreeMem  *V0042Uint64NoValStruct `json:"free_mem,omitempty"`

	// GpuSpec CPU cores reserved for jobs that also use a GPU
	GpuSpec *string `json:"gpu_spec,omitempty"`

	// Gres Generic resources
	Gres *string `json:"gres,omitempty"`

	// GresDrained Drained generic resources
	GresDrained *string `json:"gres_drained,omitempty"`

	// GresUsed Generic resources currently in use
	GresUsed *string `json:"gres_used,omitempty"`

	// Hostname NodeHostname
	Hostname *string `json:"hostname,omitempty"`

	// InstanceId Cloud instance ID
	InstanceId *string `json:"instance_id,omitempty"`

	// InstanceType Cloud instance type
	InstanceType *string                 `json:"instance_type,omitempty"`
	LastBusy     *V0042Uint64NoValStruct `json:"last_busy,omitempty"`

	// McsLabel Multi-Category Security label
	McsLabel *string `json:"mcs_label,omitempty"`

	// Name NodeName
	Name *string `json:"name,omitempty"`

	// NextStateAfterReboot The state the node will be assigned after rebooting
	NextStateAfterReboot *[]V0042NodeNextStateAfterReboot `json:"next_state_after_reboot,omitempty"`

	// OperatingSystem Operating system reported by the node
	OperatingSystem *string `json:"operating_system,omitempty"`

	// Owner User allowed to run jobs on this node (unset if no restriction)
	Owner      *string         `json:"owner,omitempty"`
	Partitions *V0042CsvString `json:"partitions,omitempty"`

	// Port TCP port number of the slurmd
	Port *int32 `json:"port,omitempty"`
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	Power *map[string]interface{} `json:"power,omitempty"`

	// RealMemory Total memory in MB on the node
	RealMemory *int64 `json:"real_memory,omitempty"`

	// Reason Describes why the node is in a "DOWN", "DRAINED", "DRAINING", "FAILING" or "FAIL" state
	Reason          *string                 `json:"reason,omitempty"`
	ReasonChangedAt *V0042Uint64NoValStruct `json:"reason_changed_at,omitempty"`

	// ReasonSetByUser User who set the reason
	ReasonSetByUser *string `json:"reason_set_by_user,omitempty"`

	// ResCoresPerGpu Number of CPU cores per GPU restricted to GPU jobs
	ResCoresPerGpu *int32 `json:"res_cores_per_gpu,omitempty"`

	// Reservation Name of reservation containing this node
	Reservation     *string                 `json:"reservation,omitempty"`
	ResumeAfter     *V0042Uint64NoValStruct `json:"resume_after,omitempty"`
	SlurmdStartTime *V0042Uint64NoValStruct `json:"slurmd_start_time,omitempty"`

	// Sockets Number of physical processor sockets/chips on the node
	Sockets *int32 `json:"sockets,omitempty"`

	// SpecializedCores Number of cores reserved for system use
	SpecializedCores *int32 `json:"specialized_cores,omitempty"`

	// SpecializedCpus Abstract CPU IDs on this node reserved for exclusive use by slurmd and slurmstepd
	SpecializedCpus *string `json:"specialized_cpus,omitempty"`

	// SpecializedMemory Combined memory limit, in MB, for Slurm compute node daemons
	SpecializedMemory *int64 `json:"specialized_memory,omitempty"`

	// State Node state(s) applicable to this node
	State *[]V0042NodeState `json:"state,omitempty"`

	// TemporaryDisk Total size in MB of temporary disk storage in TmpFS
	TemporaryDisk *int32 `json:"temporary_disk,omitempty"`

	// Threads Number of logical threads in a single physical core
	Threads *int32 `json:"threads,omitempty"`

	// Tres Configured trackable resources
	Tres *string `json:"tres,omitempty"`

	// TresUsed Trackable resources currently allocated for jobs
	TresUsed *string `json:"tres_used,omitempty"`

	// TresWeighted Weighted number of billable trackable resources allocated
	TresWeighted *float64 `json:"tres_weighted,omitempty"`

	// Version Slurmd version
	Version *string `json:"version,omitempty"`

	// Weight Weight of the node for scheduling purposes
	Weight *int32 `json:"weight,omitempty"`
}

// V0042NodeNextStateAfterReboot defines model for V0042Node.NextStateAfterReboot.
type V0042NodeNextStateAfterReboot string

// V0042NodeState defines model for V0042Node.State.
type V0042NodeState string

// V0042Nodes defines model for v0.0.42_nodes.
type V0042Nodes = []V0042Node

// V0042OpenapiAccountsAddCondResp defines model for v0.0.42_openapi_accounts_add_cond_resp.
type V0042OpenapiAccountsAddCondResp struct {
	Account              *V0042AccountShort    `json:"account,omitempty"`
	AssociationCondition *V0042AccountsAddCond `json:"association_condition,omitempty"`
	Errors               *V0042OpenapiErrors   `json:"errors,omitempty"`
	Meta                 *V0042OpenapiMeta     `json:"meta,omitempty"`
	Warnings             *V0042OpenapiWarnings `json:"warnings,omitempty"`
}

// V0042OpenapiAccountsAddCondRespStr defines model for v0.0.42_openapi_accounts_add_cond_resp_str.
type V0042OpenapiAccountsAddCondRespStr struct {
	// AddedAccounts added_accounts
	AddedAccounts string                `json:"added_accounts"`
	Errors        *V0042OpenapiErrors   `json:"errors,omitempty"`
	Meta          *V0042OpenapiMeta     `json:"meta,omitempty"`
	Warnings      *V0042OpenapiWarnings `json:"warnings,omitempty"`
}

// V0042OpenapiAccountsRemovedResp defines model for v0.0.42_openapi_accounts_removed_resp.
type V0042OpenapiAccountsRemovedResp struct {
	Errors          *V0042OpenapiErrors   `json:"errors,omitempty"`
	Meta            *V0042OpenapiMeta     `json:"meta,omitempty"`
	RemovedAccounts V0042StringList       `json:"removed_accounts"`
	Warnings        *V0042OpenapiWarnings `json:"warnings,omitempty"`
}

// V0042OpenapiAccountsResp defines model for v0.0.42_openapi_accounts_resp.
type V0042OpenapiAccountsResp struct {
	Accounts V0042AccountList      `json:"accounts"`
	Errors   *V0042OpenapiErrors   `json:"errors,omitempty"`
	Meta     *V0042OpenapiMeta     `json:"meta,omitempty"`
	Warnings *V0042OpenapiWarnings `json:"warnings,omitempty"`
}

// V0042OpenapiAssocsRemovedResp defines model for v0.0.42_openapi_assocs_removed_resp.
type V0042OpenapiAssocsRemovedResp struct {
	Errors              *V0042OpenapiErrors   `json:"errors,omitempty"`
	Meta                *V0042OpenapiMeta     `json:"meta,omitempty"`
	RemovedAssociations V0042StringList       `json:"removed_associations"`
	Warnings            *V0042OpenapiWarnings `json:"warnings,omitempty"`
}

// V0042OpenapiAssocsResp defines model for v0.0.42_openapi_assocs_resp.
type V0042OpenapiAssocsResp struct {
	Associations V0042AssocList        `json:"associations"`
	Errors       *V0042OpenapiErrors   `json:"errors,omitempty"`
	Meta         *V0042OpenapiMeta     `json:"meta,omitempty"`
	Warnings     *V0042OpenapiWarnings `json:"warnings,omitempty"`
}

// V0042OpenapiClustersRemovedResp defines model for v0.0.42_openapi_clusters_removed_resp.
type V0042OpenapiClustersRemovedResp struct {
	DeletedClusters V0042StringList       `json:"deleted_clusters"`
	Errors          *V0042OpenapiErrors   `json:"errors,omitempty"`
	Meta            *V0042OpenapiMeta     `json:"meta,omitempty"`
	Warnings        *V0042OpenapiWarnings `json:"warnings,omitempty"`
}

// V0042OpenapiClustersResp defines model for v0.0.42_openapi_clusters_resp.
type V0042OpenapiClustersResp struct {
	Clusters V0042ClusterRecList   `json:"clusters"`
	Errors   *V0042OpenapiErrors   `json:"errors,omitempty"`
	Meta     *V0042OpenapiMeta     `json:"meta,omitempty"`
	Warnings *V0042OpenapiWarnings `json:"warnings,omitempty"`
}

// V0042OpenapiDiagResp defines model for v0.0.42_openapi_diag_resp.
type V0042OpenapiDiagResp struct {
	Errors     *V0042OpenapiErrors   `json:"errors,omitempty"`
	Meta       *V0042OpenapiMeta     `json:"meta,omitempty"`
	Statistics V0042StatsMsg         `json:"statistics"`
	Warnings   *V0042OpenapiWarnings `json:"warnings,omitempty"`
}

// V0042OpenapiError defines model for v0.0.42_openapi_error.
type V0042OpenapiError struct {
	// Description Long form error description
	Description *string `json:"description,omitempty"`

	// Error Short form error description
	Error *string `json:"error,omitempty"`

	// ErrorNumber Slurm numeric error identifier
	ErrorNumber *int32 `json:"error_number,omitempty"`

	// Source Source of error or where error was first detected
	Source *string `json:"source,omitempty"`
}

// V0042OpenapiErrors defines model for v0.0.42_openapi_errors.
type V0042OpenapiErrors = []V0042OpenapiError

// V0042OpenapiInstancesResp defines model for v0.0.42_openapi_instances_resp.
type V0042OpenapiInstancesResp struct {
	Errors    *V0042OpenapiErrors   `json:"errors,omitempty"`
	Instances V0042InstanceList     `json:"instances"`
	Meta      *V0042OpenapiMeta     `json:"meta,omitempty"`
	Warnings  *V0042OpenapiWarnings `json:"warnings,omitempty"`
}

// V0042OpenapiJobAllocResp defines model for v0.0.42_openapi_job_alloc_resp.
type V0042OpenapiJobAllocResp struct {
	Errors *V0042OpenapiErrors `json:"errors,omitempty"`

	// JobId Submitted Job ID
	JobId *int32 `json:"job_id,omitempty"`

	// JobSubmitUserMsg Job submission user message
	JobSubmitUserMsg *string               `json:"job_submit_user_msg,omitempty"`
	Meta             *V0042OpenapiMeta     `json:"meta,omitempty"`
	Warnings         *V0042OpenapiWarnings `json:"warnings,omitempty"`
}

// V0042OpenapiJobInfoResp defines model for v0.0.42_openapi_job_info_resp.
type V0042OpenapiJobInfoResp struct {
	Errors       *V0042OpenapiErrors    `json:"errors,omitempty"`
	Jobs         V0042JobInfoMsg        `json:"jobs"`
	LastBackfill V0042Uint64NoValStruct `json:"last_backfill"`
	LastUpdate   V0042Uint64NoValStruct `json:"last_update"`
	Meta         *V0042OpenapiMeta      `json:"meta,omitempty"`
	Warnings     *V0042OpenapiWarnings  `json:"warnings,omitempty"`
}

// V0042OpenapiJobPostResponse defines model for v0.0.42_openapi_job_post_response.
type V0042OpenapiJobPostResponse struct {
	Errors   *V0042OpenapiErrors         `json:"errors,omitempty"`
	Meta     *V0042OpenapiMeta           `json:"meta,omitempty"`
	Results  *V0042JobArrayResponseArray `json:"results,omitempty"`
	Warnings *V0042OpenapiWarnings       `json:"warnings,omitempty"`
}

// V0042OpenapiJobSubmitResponse defines model for v0.0.42_openapi_job_submit_response.
type V0042OpenapiJobSubmitResponse struct {
	Errors *V0042OpenapiErrors `json:"errors,omitempty"`

	// JobId submitted Job ID
	JobId *int32 `json:"job_id,omitempty"`

	// JobSubmitUserMsg Job submission user message
	JobSubmitUserMsg *string           `json:"job_submit_user_msg,omitempty"`
	Meta             *V0042OpenapiMeta `json:"meta,omitempty"`

	// StepId submitted Step ID
	StepId   *string               `json:"step_id,omitempty"`
	Warnings *V0042OpenapiWarnings `json:"warnings,omitempty"`
}

// V0042OpenapiKillJobResp defines model for v0.0.42_openapi_kill_job_resp.
type V0042OpenapiKillJobResp struct {
	Errors *V0042OpenapiErrors `json:"errors,omitempty"`
	Meta   *V0042OpenapiMeta   `json:"meta,omitempty"`

	// Status List of jobs signal responses
	Status   V0042KillJobsRespMsg  `json:"status"`
	Warnings *V0042OpenapiWarnings `json:"warnings,omitempty"`
}

// V0042OpenapiKillJobsResp defines model for v0.0.42_openapi_kill_jobs_resp.
type V0042OpenapiKillJobsResp struct {
	Errors *V0042OpenapiErrors `json:"errors,omitempty"`
	Meta   *V0042OpenapiMeta   `json:"meta,omitempty"`

	// Status List of jobs signal responses
	Status   V0042KillJobsRespMsg  `json:"status"`
	Warnings *V0042OpenapiWarnings `json:"warnings,omitempty"`
}

// V0042OpenapiLicensesResp defines model for v0.0.42_openapi_licenses_resp.
type V0042OpenapiLicensesResp struct {
	Errors     *V0042OpenapiErrors    `json:"errors,omitempty"`
	LastUpdate V0042Uint64NoValStruct `json:"last_update"`
	Licenses   V0042Licenses          `json:"licenses"`
	Meta       *V0042OpenapiMeta      `json:"meta,omitempty"`
	Warnings   *V0042OpenapiWarnings  `json:"warnings,omitempty"`
}

// V0042OpenapiMeta defines model for v0.0.42_openapi_meta.
type V0042OpenapiMeta struct {
	Client *struct {
		// Group Client group (if known)
		Group *string `json:"group,omitempty"`

		// Source Client source description
		Source *string `json:"source,omitempty"`

		// User Client user (if known)
		User *string `json:"user,omitempty"`
	} `json:"client,omitempty"`
	Command *V0042StringArray `json:"command,omitempty"`
	Plugin  *struct {
		// AccountingStorage Slurm accounting plugin
		AccountingStorage *string `json:"accounting_storage,omitempty"`

		// DataParser Slurm data_parser plugin
		DataParser *string `json:"data_parser,omitempty"`

		// Name Slurm plugin name (if applicable)
		Name *string `json:"name,omitempty"`

		// Type Slurm plugin type (if applicable)
		Type *string `json:"type,omitempty"`
	} `json:"plugin,omitempty"`
	Slurm *struct {
		// Cluster Slurm cluster name
		Cluster *string `json:"cluster,omitempty"`

		// Release Slurm release string
		Release *string `json:"release,omitempty"`
		Version *struct {
			// Major Slurm release major version
			Major *string `json:"major,omitempty"`

			// Micro Slurm release micro version
			Micro *string `json:"micro,omitempty"`

			// Minor Slurm release minor version
			Minor *string `json:"minor,omitempty"`
		} `json:"version,omitempty"`
	} `json:"slurm,omitempty"`
}

// V0042OpenapiNodesResp defines model for v0.0.42_openapi_nodes_resp.
type V0042OpenapiNodesResp struct {
	Errors     *V0042OpenapiErrors    `json:"errors,omitempty"`
	LastUpdate V0042Uint64NoValStruct `json:"last_update"`
	Meta       *V0042OpenapiMeta      `json:"meta,omitempty"`
	Nodes      V0042Nodes             `json:"nodes"`
	Warnings   *V0042OpenapiWarnings  `json:"warnings,omitempty"`
}

// V0042OpenapiPartitionResp defines model for v0.0.42_openapi_partition_resp.
type V0042OpenapiPartitionResp struct {
	Errors     *V0042OpenapiErrors    `json:"errors,omitempty"`
	LastUpdate V0042Uint64NoValStruct `json:"last_update"`
	Meta       *V0042OpenapiMeta      `json:"meta,omitempty"`
	Partitions V0042PartitionInfoMsg  `json:"partitions"`
	Warnings   *V0042OpenapiWarnings  `json:"warnings,omitempty"`
}

// V0042OpenapiPingArrayResp defines model for v0.0.42_openapi_ping_array_resp.
type V0042OpenapiPingArrayResp struct {
	Errors   *V0042OpenapiErrors      `json:"errors,omitempty"`
	Meta     *V0042OpenapiMeta        `json:"meta,omitempty"`
	Pings    V0042ControllerPingArray `json:"pings"`
	Warnings *V0042OpenapiWarnings    `json:"warnings,omitempty"`
}

// V0042OpenapiReservationResp defines model for v0.0.42_openapi_reservation_resp.
type V0042OpenapiReservationResp struct {
	Errors       *V0042OpenapiErrors     `json:"errors,omitempty"`
	LastUpdate   V0042Uint64NoValStruct  `json:"last_update"`
	Meta         *V0042OpenapiMeta       `json:"meta,omitempty"`
	Reservations V0042ReservationInfoMsg `json:"reservations"`
	Warnings     *V0042OpenapiWarnings   `json:"warnings,omitempty"`
}

// V0042OpenapiResp defines model for v0.0.42_openapi_resp.
type V0042OpenapiResp struct {
	Errors   *V0042OpenapiErrors   `json:"errors,omitempty"`
	Meta     *V0042OpenapiMeta     `json:"meta,omitempty"`
	Warnings *V0042OpenapiWarnings `json:"warnings,omitempty"`
}

// V0042OpenapiSharesResp defines model for v0.0.42_openapi_shares_resp.
type V0042OpenapiSharesResp struct {
	Errors   *V0042OpenapiErrors   `json:"errors,omitempty"`
	Meta     *V0042OpenapiMeta     `json:"meta,omitempty"`
	Shares   V0042SharesRespMsg    `json:"shares"`
	Warnings *V0042OpenapiWarnings `json:"warnings,omitempty"`
}

// V0042OpenapiSlurmdbdConfigResp defines model for v0.0.42_openapi_slurmdbd_config_resp.
type V0042OpenapiSlurmdbdConfigResp struct {
	Accounts     *V0042AccountList     `json:"accounts,omitempty"`
	Associations *V0042AssocList       `json:"associations,omitempty"`
	Clusters     *V0042ClusterRecList  `json:"clusters,omitempty"`
	Errors       *V0042OpenapiErrors   `json:"errors,omitempty"`
	Instances    *V0042InstanceList    `json:"instances,omitempty"`
	Meta         *V0042OpenapiMeta     `json:"meta,omitempty"`
	Qos          *V0042QosList         `json:"qos,omitempty"`
	Tres         *V0042TresList        `json:"tres,omitempty"`
	Users        *V0042UserList        `json:"users,omitempty"`
	Warnings     *V0042OpenapiWarnings `json:"warnings,omitempty"`
	Wckeys       *V0042WckeyList       `json:"wckeys,omitempty"`
}

// V0042OpenapiSlurmdbdJobsResp defines model for v0.0.42_openapi_slurmdbd_jobs_resp.
type V0042OpenapiSlurmdbdJobsResp struct {
	Errors   *V0042OpenapiErrors   `json:"errors,omitempty"`
	Jobs     V0042JobList          `json:"jobs"`
	Meta     *V0042OpenapiMeta     `json:"meta,omitempty"`
	Warnings *V0042OpenapiWarnings `json:"warnings,omitempty"`
}

// V0042OpenapiSlurmdbdPingResp defines model for v0.0.42_openapi_slurmdbd_ping_resp.
type V0042OpenapiSlurmdbdPingResp struct {
	Errors   *V0042OpenapiErrors    `json:"errors,omitempty"`
	Meta     *V0042OpenapiMeta      `json:"meta,omitempty"`
	Pings    V0042SlurmdbdPingArray `json:"pings"`
	Warnings *V0042OpenapiWarnings  `json:"warnings,omitempty"`
}

// V0042OpenapiSlurmdbdQosRemovedResp defines model for v0.0.42_openapi_slurmdbd_qos_removed_resp.
type V0042OpenapiSlurmdbdQosRemovedResp struct {
	Errors     *V0042OpenapiErrors   `json:"errors,omitempty"`
	Meta       *V0042OpenapiMeta     `json:"meta,omitempty"`
	RemovedQos V0042StringList       `json:"removed_qos"`
	Warnings   *V0042OpenapiWarnings `json:"warnings,omitempty"`
}

// V0042OpenapiSlurmdbdQosResp defines model for v0.0.42_openapi_slurmdbd_qos_resp.
type V0042OpenapiSlurmdbdQosResp struct {
	Errors   *V0042OpenapiErrors   `json:"errors,omitempty"`
	Meta     *V0042OpenapiMeta     `json:"meta,omitempty"`
	Qos      V0042QosList          `json:"qos"`
	Warnings *V0042OpenapiWarnings `json:"warnings,omitempty"`
}

// V0042OpenapiSlurmdbdStatsResp defines model for v0.0.42_openapi_slurmdbd_stats_resp.
type V0042OpenapiSlurmdbdStatsResp struct {
	Errors     *V0042OpenapiErrors   `json:"errors,omitempty"`
	Meta       *V0042OpenapiMeta     `json:"meta,omitempty"`
	Statistics V0042StatsRec         `json:"statistics"`
	Warnings   *V0042OpenapiWarnings `json:"warnings,omitempty"`
}

// V0042OpenapiTresResp defines model for v0.0.42_openapi_tres_resp.
type V0042OpenapiTresResp struct {
	TRES     V0042TresList         `json:"TRES"`
	Errors   *V0042OpenapiErrors   `json:"errors,omitempty"`
	Meta     *V0042OpenapiMeta     `json:"meta,omitempty"`
	Warnings *V0042OpenapiWarnings `json:"warnings,omitempty"`
}

// V0042OpenapiUsersAddCondResp defines model for v0.0.42_openapi_users_add_cond_resp.
type V0042OpenapiUsersAddCondResp struct {
	AssociationCondition V0042UsersAddCond     `json:"association_condition"`
	Errors               *V0042OpenapiErrors   `json:"errors,omitempty"`
	Meta                 *V0042OpenapiMeta     `json:"meta,omitempty"`
	User                 V0042UserShort        `json:"user"`
	Warnings             *V0042OpenapiWarnings `json:"warnings,omitempty"`
}

// V0042OpenapiUsersAddCondRespStr defines model for v0.0.42_openapi_users_add_cond_resp_str.
type V0042OpenapiUsersAddCondRespStr struct {
	// AddedUsers added_users
	AddedUsers string                `json:"added_users"`
	Errors     *V0042OpenapiErrors   `json:"errors,omitempty"`
	Meta       *V0042OpenapiMeta     `json:"meta,omitempty"`
	Warnings   *V0042OpenapiWarnings `json:"warnings,omitempty"`
}

// V0042OpenapiUsersResp defines model for v0.0.42_openapi_users_resp.
type V0042OpenapiUsersResp struct {
	Errors   *V0042OpenapiErrors   `json:"errors,omitempty"`
	Meta     *V0042OpenapiMeta     `json:"meta,omitempty"`
	Users    V0042UserList         `json:"users"`
	Warnings *V0042OpenapiWarnings `json:"warnings,omitempty"`
}

// V0042OpenapiWarning defines model for v0.0.42_openapi_warning.
type V0042OpenapiWarning struct {
	// Description Long form warning description
	Description *string `json:"description,omitempty"`

	// Source Source of warning or where warning was first detected
	Source *string `json:"source,omitempty"`
}

// V0042OpenapiWarnings defines model for v0.0.42_openapi_warnings.
type V0042OpenapiWarnings = []V0042OpenapiWarning

// V0042OpenapiWckeyRemovedResp defines model for v0.0.42_openapi_wckey_removed_resp.
type V0042OpenapiWckeyRemovedResp struct {
	DeletedWckeys V0042StringList       `json:"deleted_wckeys"`
	Errors        *V0042OpenapiErrors   `json:"errors,omitempty"`
	Meta          *V0042OpenapiMeta     `json:"meta,omitempty"`
	Warnings      *V0042OpenapiWarnings `json:"warnings,omitempty"`
}

// V0042OpenapiWckeyResp defines model for v0.0.42_openapi_wckey_resp.
type V0042OpenapiWckeyResp struct {
	Errors   *V0042OpenapiErrors   `json:"errors,omitempty"`
	Meta     *V0042OpenapiMeta     `json:"meta,omitempty"`
	Warnings *V0042OpenapiWarnings `json:"warnings,omitempty"`
	Wckeys   V0042WckeyList        `json:"wckeys"`
}

// V0042PartPrio defines model for v0.0.42_part_prio.
type V0042PartPrio struct {
	// Partition Partition name
	Partition *string `json:"partition,omitempty"`

	// Priority Prospective job priority if it runs in this partition
	Priority *int32 `json:"priority,omitempty"`
}

// V0042PartitionInfo defines model for v0.0.42_partition_info.
type V0042PartitionInfo struct {
	Accounts *struct {
		// Allowed AllowAccounts
		Allowed *string `json:"allowed,omitempty"`

		// Deny DenyAccounts
		Deny *string `json:"deny,omitempty"`
	} `json:"accounts,omitempty"`

	// Alternate Alternate
	Alternate *string `json:"alternate,omitempty"`

	// Cluster Cluster name
	Cluster *string `json:"cluster,omitempty"`
	Cpus    *struct {
		// TaskBinding CpuBind
		TaskBinding *int32 `json:"task_binding,omitempty"`

		// Total TotalCPUs
		Total *int32 `json:"total,omitempty"`
	} `json:"cpus,omitempty"`
	Defaults *struct {
		// Job JobDefaults
		Job *string `json:"job,omitempty"`

		// MemoryPerCpu DefMemPerCPU or DefMemPerNode
		MemoryPerCpu           *int64                  `json:"memory_per_cpu,omitempty"`
		PartitionMemoryPerCpu  *V0042Uint64NoValStruct `json:"partition_memory_per_cpu,omitempty"`
		PartitionMemoryPerNode *V0042Uint64NoValStruct `json:"partition_memory_per_node,omitempty"`
		Time                   *V0042Uint32NoValStruct `json:"time,omitempty"`
	} `json:"defaults,omitempty"`

	// GraceTime GraceTime
	GraceTime *int32 `json:"grace_time,omitempty"`
	Groups    *struct {
		// Allowed AllowGroups
		Allowed *string `json:"allowed,omitempty"`
	} `json:"groups,omitempty"`
	Maximums *struct {
		CpusPerNode   *V0042Uint32NoValStruct `json:"cpus_per_node,omitempty"`
		CpusPerSocket *V0042Uint32NoValStruct `json:"cpus_per_socket,omitempty"`

		// MemoryPerCpu MaxMemPerCPU or MaxMemPerNode
		MemoryPerCpu  *int64                  `json:"memory_per_cpu,omitempty"`
		Nodes         *V0042Uint32NoValStruct `json:"nodes,omitempty"`
		OverTimeLimit *V0042Uint16NoValStruct `json:"over_time_limit,omitempty"`
		Oversubscribe *struct {
			// Flags Flags applicable to the OverSubscribe setting
			Flags *[]V0042PartitionInfoMaximumsOversubscribeFlags `json:"flags,omitempty"`

			// Jobs Maximum number of jobs allowed to oversubscribe resources
			Jobs *int32 `json:"jobs,omitempty"`
		} `json:"oversubscribe,omitempty"`
		PartitionMemoryPerCpu  *V0042Uint64NoValStruct `json:"partition_memory_per_cpu,omitempty"`
		PartitionMemoryPerNode *V0042Uint64NoValStruct `json:"partition_memory_per_node,omitempty"`

		// Shares OverSubscribe
		Shares *int32                  `json:"shares,omitempty"`
		Time   *V0042Uint32NoValStruct `json:"time,omitempty"`
	} `json:"maximums,omitempty"`
	Minimums *struct {
		// Nodes MinNodes
		Nodes *int32 `json:"nodes,omitempty"`
	} `json:"minimums,omitempty"`

	// Name PartitionName
	Name *string `json:"name,omitempty"`

	// NodeSets NodeSets
	NodeSets *string `json:"node_sets,omitempty"`
	Nodes    *struct {
		// AllowedAllocation AllocNodes
		AllowedAllocation *string `json:"allowed_allocation,omitempty"`

		// Configured Nodes
		Configured *string `json:"configured,omitempty"`

		// Total TotalNodes
		Total *int32 `json:"total,omitempty"`
	} `json:"nodes,omitempty"`
	Partition *struct {
		// State Current state(s)
		State *[]V0042PartitionInfoPartitionState `json:"state,omitempty"`
	} `json:"partition,omitempty"`
	Priority *struct {
		// JobFactor PriorityJobFactor
		JobFactor *int32 `json:"job_factor,omitempty"`

		// Tier PriorityTier
		Tier *int32 `json:"tier,omitempty"`
	} `json:"priority,omitempty"`
	Qos *struct {
		// Allowed AllowQOS
		Allowed *string `json:"allowed,omitempty"`

		// Assigned QOS
		Assigned *string `json:"assigned,omitempty"`

		// Deny DenyQOS
		Deny *string `json:"deny,omitempty"`
	} `json:"qos,omitempty"`

	// SelectType Scheduler consumable resource selection type
	SelectType  *[]V0042PartitionInfoSelectType `json:"select_type,omitempty"`
	SuspendTime *V0042Uint32NoValStruct         `json:"suspend_time,omitempty"`
	Timeouts    *struct {
		Resume  *V0042Uint16NoValStruct `json:"resume,omitempty"`
		Suspend *V0042Uint16NoValStruct `json:"suspend,omitempty"`
	} `json:"timeouts,omitempty"`
	Tres *struct {
		// BillingWeights TRESBillingWeights
		BillingWeights *string `json:"billing_weights,omitempty"`

		// Configured TRES
		Configured *string `json:"configured,omitempty"`
	} `json:"tres,omitempty"`
}

// V0042PartitionInfoMaximumsOversubscribeFlags defines model for V0042PartitionInfo.Maximums.Oversubscribe.Flags.
type V0042PartitionInfoMaximumsOversubscribeFlags string

// V0042PartitionInfoPartitionState defines model for V0042PartitionInfo.Partition.State.
type V0042PartitionInfoPartitionState string

// V0042PartitionInfoSelectType defines model for V0042PartitionInfo.SelectType.
type V0042PartitionInfoSelectType string

// V0042PartitionInfoMsg defines model for v0.0.42_partition_info_msg.
type V0042PartitionInfoMsg = []V0042PartitionInfo

// V0042PriorityByPartition defines model for v0.0.42_priority_by_partition.
type V0042PriorityByPartition = []V0042PartPrio

// V0042ProcessExitCodeVerbose defines model for v0.0.42_process_exit_code_verbose.
type V0042ProcessExitCodeVerbose struct {
	ReturnCode *V0042Uint32NoValStruct `json:"return_code,omitempty"`
	Signal     *struct {
		Id *V0042Uint16NoValStruct `json:"id,omitempty"`

		// Name Signal sent to process (name)
		Name *string `json:"name,omitempty"`
	} `json:"signal,omitempty"`

	// Status Status given by return code
	Status *[]V0042ProcessExitCodeVerboseStatus `json:"status,omitempty"`
}

// V0042ProcessExitCodeVerboseStatus defines model for V0042ProcessExitCodeVerbose.Status.
type V0042ProcessExitCodeVerboseStatus string

// V0042Qos defines model for v0.0.42_qos.
type V0042Qos struct {
	// Description Arbitrary description
	Description *string `json:"description,omitempty"`

	// Flags Flags, to avoid modifying current values specify NOT_SET
	Flags *[]V0042QosFlags `json:"flags,omitempty"`

	// Id Unique ID
	Id     *int32 `json:"id,omitempty"`
	Limits *struct {
		Factor *V0042Float64NoValStruct `json:"factor,omitempty"`

		// GraceTime GraceTime
		GraceTime *int32 `json:"grace_time,omitempty"`
		Max       *struct {
			Accruing *struct {
				Per *struct {
					Account *V0042Uint32NoValStruct `json:"account,omitempty"`
					User    *V0042Uint32NoValStruct `json:"user,omitempty"`
				} `json:"per,omitempty"`
			} `json:"accruing,omitempty"`
			ActiveJobs *struct {
				Accruing *V0042Uint32NoValStruct `json:"accruing,omitempty"`
				Count    *V0042Uint32NoValStruct `json:"count,omitempty"`
			} `json:"active_jobs,omitempty"`
			Jobs *struct {
				ActiveJobs *struct {
					Per *struct {
						Account *V0042Uint32NoValStruct `json:"account,omitempty"`
						User    *V0042Uint32NoValStruct `json:"user,omitempty"`
					} `json:"per,omitempty"`
				} `json:"active_jobs,omitempty"`
				Count *V0042Uint32NoValStruct `json:"count,omitempty"`
				Per   *struct {
					Account *V0042Uint32NoValStruct `json:"account,omitempty"`
					User    *V0042Uint32NoValStruct `json:"user,omitempty"`
				} `json:"per,omitempty"`
			} `json:"jobs,omitempty"`
			Tres *struct {
				Minutes *struct {
					Per *struct {
						Account *V0042TresList `json:"account,omitempty"`
						Job     *V0042TresList `json:"job,omitempty"`
						Qos     *V0042TresList `json:"qos,omitempty"`
						User    *V0042TresList `json:"user,omitempty"`
					} `json:"per,omitempty"`
					Total *V0042TresList `json:"total,omitempty"`
				} `json:"minutes,omitempty"`
				Per *struct {
					Account *V0042TresList `json:"account,omitempty"`
					Job     *V0042TresList `json:"job,omitempty"`
					Node    *V0042TresList `json:"node,omitempty"`
					User    *V0042TresList `json:"user,omitempty"`
				} `json:"per,omitempty"`
				Total *V0042TresList `json:"total,omitempty"`
			} `json:"tres,omitempty"`
			WallClock *struct {
				Per *struct {
					Job *V0042Uint32NoValStruct `json:"job,omitempty"`
					Qos *V0042Uint32NoValStruct `json:"qos,omitempty"`
				} `json:"per,omitempty"`
			} `json:"wall_clock,omitempty"`
		} `json:"max,omitempty"`
		Min *struct {
			PriorityThreshold *V0042Uint32NoValStruct `json:"priority_threshold,omitempty"`
			Tres              *struct {
				Per *struct {
					Job *V0042TresList `json:"job,omitempty"`
				} `json:"per,omitempty"`
			} `json:"tres,omitempty"`
		} `json:"min,omitempty"`
	} `json:"limits,omitempty"`

	// Name Name
	Name    *string `json:"name,omitempty"`
	Preempt *struct {
		ExemptTime *V0042Uint32NoValStruct `json:"exempt_time,omitempty"`
		List       *V0042QosPreemptList    `json:"list,omitempty"`

		// Mode PreemptMode
		Mode *[]V0042QosPreemptMode `json:"mode,omitempty"`
	} `json:"preempt,omitempty"`
	Priority       *V0042Uint32NoValStruct  `json:"priority,omitempty"`
	UsageFactor    *V0042Float64NoValStruct `json:"usage_factor,omitempty"`
	UsageThreshold *V0042Float64NoValStruct `json:"usage_threshold,omitempty"`
}

// V0042QosFlags defines model for V0042Qos.Flags.
type V0042QosFlags string

// V0042QosPreemptMode defines model for V0042Qos.Preempt.Mode.
type V0042QosPreemptMode string

// V0042QosList defines model for v0.0.42_qos_list.
type V0042QosList = []V0042Qos

// V0042QosPreemptList defines model for v0.0.42_qos_preempt_list.
type V0042QosPreemptList = []string

// V0042QosStringIdList List of QOS names
type V0042QosStringIdList = []string

// V0042ReservationCoreSpec defines model for v0.0.42_reservation_core_spec.
type V0042ReservationCoreSpec struct {
	// Core IDs of reserved cores
	Core *string `json:"core,omitempty"`

	// Node Name of reserved node
	Node *string `json:"node,omitempty"`
}

// V0042ReservationInfo defines model for v0.0.42_reservation_info.
type V0042ReservationInfo struct {
	// Accounts Comma separated list of permitted accounts
	Accounts *string `json:"accounts,omitempty"`

	// BurstBuffer BurstBuffer
	BurstBuffer *string `json:"burst_buffer,omitempty"`

	// CoreCount CoreCnt
	CoreCount           *int32                        `json:"core_count,omitempty"`
	CoreSpecializations *V0042ReservationInfoCoreSpec `json:"core_specializations,omitempty"`
	EndTime             *V0042Uint64NoValStruct       `json:"end_time,omitempty"`

	// Features Features
	Features *string `json:"features,omitempty"`

	// Flags Flags associated with this reservation
	Flags *[]V0042ReservationInfoFlags `json:"flags,omitempty"`

	// Groups Groups
	Groups *string `json:"groups,omitempty"`

	// Licenses Licenses
	Licenses *string `json:"licenses,omitempty"`

	// MaxStartDelay MaxStartDelay in seconds
	MaxStartDelay *int32 `json:"max_start_delay,omitempty"`

	// Name ReservationName
	Name *string `json:"name,omitempty"`

	// NodeCount NodeCnt
	NodeCount *int32 `json:"node_count,omitempty"`

	// NodeList Nodes
	NodeList *string `json:"node_list,omitempty"`

	// Partition PartitionName
	Partition      *string `json:"partition,omitempty"`
	PurgeCompleted *struct {
		Time *V0042Uint32NoValStruct `json:"time,omitempty"`
	} `json:"purge_completed,omitempty"`
	StartTime *V0042Uint64NoValStruct `json:"start_time,omitempty"`

	// Tres Comma separated list of required TRES
	Tres *string `json:"tres,omitempty"`

	// Users Comma separated list of permitted users
	Users *string                 `json:"users,omitempty"`
	Watts *V0042Uint32NoValStruct `json:"watts,omitempty"`
}

// V0042ReservationInfoFlags defines model for V0042ReservationInfo.Flags.
type V0042ReservationInfoFlags string

// V0042ReservationInfoCoreSpec defines model for v0.0.42_reservation_info_core_spec.
type V0042ReservationInfoCoreSpec = []V0042ReservationCoreSpec

// V0042ReservationInfoMsg defines model for v0.0.42_reservation_info_msg.
type V0042ReservationInfoMsg = []V0042ReservationInfo

// V0042RollupStats defines model for v0.0.42_rollup_stats.
type V0042RollupStats struct {
	Daily *struct {
		// Count Number of daily rollups since last_run
		Count    *int32 `json:"count,omitempty"`
		Duration *struct {
			// Last Total time spent doing daily daily rollup (seconds)
			Last *int64 `json:"last,omitempty"`

			// Max Longest daily rollup time (seconds)
			Max *int64 `json:"max,omitempty"`

			// Time Total time spent doing daily rollups (seconds)
			Time *int64 `json:"time,omitempty"`
		} `json:"duration,omitempty"`

		// LastRun Last time daily rollup ran (UNIX timestamp)
		LastRun *int64 `json:"last_run,omitempty"`
	} `json:"daily,omitempty"`
	Hourly *struct {
		// Count Number of hourly rollups since last_run
		Count    *int32 `json:"count,omitempty"`
		Duration *struct {
			// Last Total time spent doing last daily rollup (seconds)
			Last *int64 `json:"last,omitempty"`

			// Max Longest hourly rollup time (seconds)
			Max *int64 `json:"max,omitempty"`

			// Time Total time spent doing hourly rollups (seconds)
			Time *int64 `json:"time,omitempty"`
		} `json:"duration,omitempty"`

		// LastRun Last time hourly rollup ran (UNIX timestamp)
		LastRun *int64 `json:"last_run,omitempty"`
	} `json:"hourly,omitempty"`
	Monthly *struct {
		// Count Number of monthly rollups since last_run
		Count    *int32 `json:"count,omitempty"`
		Duration *struct {
			// Last Total time spent doing monthly daily rollup (seconds)
			Last *int64 `json:"last,omitempty"`

			// Max Longest monthly rollup time (seconds)
			Max *int64 `json:"max,omitempty"`

			// Time Total time spent doing monthly rollups (seconds)
			Time *int64 `json:"time,omitempty"`
		} `json:"duration,omitempty"`

		// LastRun Last time monthly rollup ran (UNIX timestamp)
		LastRun *int64 `json:"last_run,omitempty"`
	} `json:"monthly,omitempty"`
}

// V0042ScheduleExitFields defines model for v0.0.42_schedule_exit_fields.
type V0042ScheduleExitFields struct {
	// DefaultQueueDepth Reached number of jobs allowed to be tested
	DefaultQueueDepth *int32 `json:"default_queue_depth,omitempty"`

	// EndJobQueue Reached end of queue
	EndJobQueue *int32 `json:"end_job_queue,omitempty"`

	// Licenses Blocked on licenses
	Licenses *int32 `json:"licenses,omitempty"`

	// MaxJobStart Reached number of jobs allowed to start
	MaxJobStart *int32 `json:"max_job_start,omitempty"`

	// MaxRpcCnt Reached RPC limit
	MaxRpcCnt *int32 `json:"max_rpc_cnt,omitempty"`

	// MaxSchedTime Reached maximum allowed scheduler time
	MaxSchedTime *int32 `json:"max_sched_time,omitempty"`
}

// V0042SharesFloat128Tres defines model for v0.0.42_shares_float128_tres.
type V0042SharesFloat128Tres struct {
	// Name TRES name
	Name *string `json:"name,omitempty"`

	// Value TRES value
	Value *float32 `json:"value,omitempty"`
}

// V0042SharesFloat128TresList defines model for v0.0.42_shares_float128_tres_list.
type V0042SharesFloat128TresList = []V0042SharesFloat128Tres

// V0042SharesRespMsg defines model for v0.0.42_shares_resp_msg.
type V0042SharesRespMsg struct {
	Shares *V0042AssocSharesObjList `json:"shares,omitempty"`

	// TotalShares Total number of shares
	TotalShares *int64 `json:"total_shares,omitempty"`
}

// V0042SharesUint64Tres defines model for v0.0.42_shares_uint64_tres.
type V0042SharesUint64Tres struct {
	// Name TRES name
	Name  *string                 `json:"name,omitempty"`
	Value *V0042Uint64NoValStruct `json:"value,omitempty"`
}

// V0042SharesUint64TresList defines model for v0.0.42_shares_uint64_tres_list.
type V0042SharesUint64TresList = []V0042SharesUint64Tres

// V0042SlurmdbdPing defines model for v0.0.42_slurmdbd_ping.
type V0042SlurmdbdPing struct {
	// Hostname Target for ping
	Hostname string `json:"hostname"`

	// Latency Number of microseconds it took to successfully ping or timeout
	Latency int64 `json:"latency"`

	// Primary Is responding slurmdbd the primary controller
	Primary bool `json:"primary"`

	// Responding If ping RPC responded with pong from slurmdbd
	Responding bool `json:"responding"`
}

// V0042SlurmdbdPingArray defines model for v0.0.42_slurmdbd_ping_array.
type V0042SlurmdbdPingArray = []V0042SlurmdbdPing

// V0042StatsMsg defines model for v0.0.42_stats_msg.
type V0042StatsMsg struct {
	// AgentCount Number of agent threads
	AgentCount *int32 `json:"agent_count,omitempty"`

	// AgentQueueSize Number of enqueued outgoing RPC requests in an internal retry list
	AgentQueueSize *int32 `json:"agent_queue_size,omitempty"`

	// AgentThreadCount Total number of active threads created by all agent threads
	AgentThreadCount *int32 `json:"agent_thread_count,omitempty"`

	// BfActive Backfill scheduler currently running
	BfActive *bool `json:"bf_active,omitempty"`

	// BfBackfilledHetJobs Number of heterogeneous job components started through backfilling since last Slurm start
	BfBackfilledHetJobs *int32 `json:"bf_backfilled_het_jobs,omitempty"`

	// BfBackfilledJobs Number of jobs started through backfilling since last slurm start
	BfBackfilledJobs *int32 `json:"bf_backfilled_jobs,omitempty"`

	// BfCycleCounter Number of backfill scheduling cycles since last reset
	BfCycleCounter *int32 `json:"bf_cycle_counter,omitempty"`

	// BfCycleLast Execution time in microseconds of last backfill scheduling cycle
	BfCycleLast *int32 `json:"bf_cycle_last,omitempty"`

	// BfCycleMax Execution time in microseconds of longest backfill scheduling cycle
	BfCycleMax *int32 `json:"bf_cycle_max,omitempty"`

	// BfCycleMean Mean time in microseconds of backfilling scheduling cycles since last reset
	BfCycleMean *int64 `json:"bf_cycle_mean,omitempty"`

	// BfCycleSum Total time in microseconds of backfilling scheduling cycles since last reset
	BfCycleSum *int64 `json:"bf_cycle_sum,omitempty"`

	// BfDepthMean Mean number of eligible to run jobs processed during all backfilling scheduling cycles since last reset
	BfDepthMean *int64 `json:"bf_depth_mean,omitempty"`

	// BfDepthMeanTry The subset of Depth Mean that the backfill scheduler attempted to schedule
	BfDepthMeanTry *int64 `json:"bf_depth_mean_try,omitempty"`

	// BfDepthSum Total number of jobs processed during all backfilling scheduling cycles since last reset
	BfDepthSum *int32 `json:"bf_depth_sum,omitempty"`

	// BfDepthTrySum Subset of bf_depth_sum that the backfill scheduler attempted to schedule
	BfDepthTrySum *int32             `json:"bf_depth_try_sum,omitempty"`
	BfExit        *V0042BfExitFields `json:"bf_exit,omitempty"`

	// BfLastBackfilledJobs Number of jobs started through backfilling since last reset
	BfLastBackfilledJobs *int32 `json:"bf_last_backfilled_jobs,omitempty"`

	// BfLastDepth Number of processed jobs during last backfilling scheduling cycle
	BfLastDepth *int32 `json:"bf_last_depth,omitempty"`

	// BfLastDepthTry Number of processed jobs during last backfilling scheduling cycle that had a chance to start using available resources
	BfLastDepthTry *int32 `json:"bf_last_depth_try,omitempty"`

	// BfQueueLen Number of jobs pending to be processed by backfilling algorithm
	BfQueueLen *int32 `json:"bf_queue_len,omitempty"`

	// BfQueueLenMean Mean number of jobs pending to be processed by backfilling algorithm
	BfQueueLenMean *int64 `json:"bf_queue_len_mean,omitempty"`

	// BfQueueLenSum Total number of jobs pending to be processed by backfilling algorithm since last reset
	BfQueueLenSum *int32 `json:"bf_queue_len_sum,omitempty"`

	// BfTableSize Number of different time slots tested by the backfill scheduler in its last iteration
	BfTableSize *int32 `json:"bf_table_size,omitempty"`

	// BfTableSizeMean Mean number of different time slots tested by the backfill scheduler
	BfTableSizeMean *int64 `json:"bf_table_size_mean,omitempty"`

	// BfTableSizeSum Total number of different time slots tested by the backfill scheduler
	BfTableSizeSum  *int32                  `json:"bf_table_size_sum,omitempty"`
	BfWhenLastCycle *V0042Uint64NoValStruct `json:"bf_when_last_cycle,omitempty"`

	// DbdAgentQueueSize Number of messages for SlurmDBD that are queued
	DbdAgentQueueSize *int32 `json:"dbd_agent_queue_size,omitempty"`

	// GettimeofdayLatency Latency of 1000 calls to the gettimeofday() syscall in microseconds, as measured at controller startup
	GettimeofdayLatency *int32                  `json:"gettimeofday_latency,omitempty"`
	JobStatesTs         *V0042Uint64NoValStruct `json:"job_states_ts,omitempty"`

	// JobsCanceled Number of jobs canceled since the last reset
	JobsCanceled *int32 `json:"jobs_canceled,omitempty"`

	// JobsCompleted Number of jobs completed since last reset
	JobsCompleted *int32 `json:"jobs_completed,omitempty"`

	// JobsFailed Number of jobs failed due to slurmd or other internal issues since last reset
	JobsFailed *int32 `json:"jobs_failed,omitempty"`

	// JobsPending Number of jobs pending at the time of listed in job_state_ts
	JobsPending *int32 `json:"jobs_pending,omitempty"`

	// JobsRunning Number of jobs running at the time of listed in job_state_ts
	JobsRunning *int32 `json:"jobs_running,omitempty"`

	// JobsStarted Number of jobs started since last reset
	JobsStarted *int32 `json:"jobs_started,omitempty"`

	// JobsSubmitted Number of jobs submitted since last reset
	JobsSubmitted *int32 `json:"jobs_submitted,omitempty"`

	// PartsPacked Zero if only RPC statistic included
	PartsPacked *int32 `json:"parts_packed,omitempty"`

	// PendingRpcs Pending RPCs
	PendingRpcs *V0042StatsMsgRpcsQueue `json:"pending_rpcs,omitempty"`

	// PendingRpcsByHostlist Pending RPCs by hostlist
	PendingRpcsByHostlist *V0042StatsMsgRpcsDump  `json:"pending_rpcs_by_hostlist,omitempty"`
	ReqTime               *V0042Uint64NoValStruct `json:"req_time,omitempty"`
	ReqTimeStart          *V0042Uint64NoValStruct `json:"req_time_start,omitempty"`

	// RpcsByMessageType RPCs by type
	RpcsByMessageType *V0042StatsMsgRpcsByType `json:"rpcs_by_message_type,omitempty"`

	// RpcsByUser RPCs by user
	RpcsByUser *V0042StatsMsgRpcsByUser `json:"rpcs_by_user,omitempty"`

	// ScheduleCycleDepth Total number of jobs processed in scheduling cycles
	ScheduleCycleDepth *int32 `json:"schedule_cycle_depth,omitempty"`

	// ScheduleCycleLast Time in microseconds for last scheduling cycle
	ScheduleCycleLast *int32 `json:"schedule_cycle_last,omitempty"`

	// ScheduleCycleMax Max time of any scheduling cycle in microseconds since last reset
	ScheduleCycleMax *int32 `json:"schedule_cycle_max,omitempty"`

	// ScheduleCycleMean Mean time in microseconds for all scheduling cycles since last reset
	ScheduleCycleMean *int64 `json:"schedule_cycle_mean,omitempty"`

	// ScheduleCycleMeanDepth Mean of the number of jobs processed in a scheduling cycle
	ScheduleCycleMeanDepth *int64 `json:"schedule_cycle_mean_depth,omitempty"`

	// ScheduleCyclePerMinute Number of scheduling executions per minute
	ScheduleCyclePerMinute *int64 `json:"schedule_cycle_per_minute,omitempty"`

	// ScheduleCycleSum Total run time in microseconds for all scheduling cycles since last reset
	ScheduleCycleSum *int32 `json:"schedule_cycle_sum,omitempty"`

	// ScheduleCycleTotal Number of scheduling cycles since last reset
	ScheduleCycleTotal *int32                   `json:"schedule_cycle_total,omitempty"`
	ScheduleExit       *V0042ScheduleExitFields `json:"schedule_exit,omitempty"`

	// ScheduleQueueLength Number of jobs pending in queue
	ScheduleQueueLength *int32 `json:"schedule_queue_length,omitempty"`

	// ServerThreadCount Number of current active slurmctld threads
	ServerThreadCount *int32 `json:"server_thread_count,omitempty"`
}

// V0042StatsMsgRpcDump defines model for v0.0.42_stats_msg_rpc_dump.
type V0042StatsMsgRpcDump struct {
	Count V0042HostlistString `json:"count"`

	// MessageType Message type as string
	MessageType string `json:"message_type"`

	// TypeId Message type as integer
	TypeId int32 `json:"type_id"`
}

// V0042StatsMsgRpcQueue defines model for v0.0.42_stats_msg_rpc_queue.
type V0042StatsMsgRpcQueue struct {
	// Count Number of pending RPCs queued
	Count int32 `json:"count"`

	// MessageType Message type as string
	MessageType string `json:"message_type"`

	// TypeId Message type as integer
	TypeId int32 `json:"type_id"`
}

// V0042StatsMsgRpcType defines model for v0.0.42_stats_msg_rpc_type.
type V0042StatsMsgRpcType struct {
	AverageTime V0042Uint64NoValStruct `json:"average_time"`

	// Count Number of RPCs received
	Count int32 `json:"count"`

	// CycleLast Number of RPCs processed within the last RPC queue cycle
	CycleLast int32 `json:"cycle_last"`

	// CycleMax Maximum number of RPCs processed within a RPC queue cycle since start
	CycleMax int32 `json:"cycle_max"`

	// Dropped Number of RPCs dropped
	Dropped int64 `json:"dropped"`

	// MessageType Message type as string
	MessageType string `json:"message_type"`

	// Queued Number of RPCs queued
	Queued int32 `json:"queued"`

	// TotalTime Total time spent processing RPC in seconds
	TotalTime int64 `json:"total_time"`

	// TypeId Message type as integer
	TypeId int32 `json:"type_id"`
}

// V0042StatsMsgRpcUser defines model for v0.0.42_stats_msg_rpc_user.
type V0042StatsMsgRpcUser struct {
	AverageTime V0042Uint64NoValStruct `json:"average_time"`

	// Count Number of RPCs received
	Count int32 `json:"count"`

	// TotalTime Total time spent processing RPC in seconds
	TotalTime int64 `json:"total_time"`

	// User User name
	User string `json:"user"`

	// UserId User ID (numeric)
	UserId int32 `json:"user_id"`
}

// V0042StatsMsgRpcsByType RPCs by type
type V0042StatsMsgRpcsByType = []V0042StatsMsgRpcType

// V0042StatsMsgRpcsByUser RPCs by user
type V0042StatsMsgRpcsByUser = []V0042StatsMsgRpcUser

// V0042StatsMsgRpcsDump Pending RPCs by hostlist
type V0042StatsMsgRpcsDump = []V0042StatsMsgRpcDump

// V0042StatsMsgRpcsQueue Pending RPCs
type V0042StatsMsgRpcsQueue = []V0042StatsMsgRpcQueue

// V0042StatsRec defines model for v0.0.42_stats_rec.
type V0042StatsRec struct {
	RPCs    *V0042StatsRpcList `json:"RPCs,omitempty"`
	Rollups *V0042RollupStats  `json:"rollups,omitempty"`

	// TimeStart When data collection started (UNIX timestamp)
	TimeStart *int64              `json:"time_start,omitempty"`
	Users     *V0042StatsUserList `json:"users,omitempty"`
}

// V0042StatsRpc defines model for v0.0.42_stats_rpc.
type V0042StatsRpc struct {
	// Count Number of RPCs processed
	Count *int32 `json:"count,omitempty"`

	// Rpc RPC type
	Rpc  *string `json:"rpc,omitempty"`
	Time *struct {
		// Average Average RPC processing time in microseconds
		Average *int64 `json:"average,omitempty"`

		// Total Total RPC processing time in microseconds
		Total *int64 `json:"total,omitempty"`
	} `json:"time,omitempty"`
}

// V0042StatsRpcList defines model for v0.0.42_stats_rpc_list.
type V0042StatsRpcList = []V0042StatsRpc

// V0042StatsUser defines model for v0.0.42_stats_user.
type V0042StatsUser struct {
	// Count Number of RPCs processed
	Count *int32 `json:"count,omitempty"`
	Time  *struct {
		// Average Average RPC processing time in microseconds
		Average *int64 `json:"average,omitempty"`

		// Total Total RPC processing time in microseconds
		Total *int64 `json:"total,omitempty"`
	} `json:"time,omitempty"`

	// User User ID
	User *string `json:"user,omitempty"`
}

// V0042StatsUserList defines model for v0.0.42_stats_user_list.
type V0042StatsUserList = []V0042StatsUser

// V0042Step defines model for v0.0.42_step.
type V0042Step struct {
	CPU *struct {
		// Governor Requested CPU frequency governor in kHz
		Governor           *string `json:"governor,omitempty"`
		RequestedFrequency *struct {
			Max *V0042Uint32NoValStruct `json:"max,omitempty"`
			Min *V0042Uint32NoValStruct `json:"min,omitempty"`
		} `json:"requested_frequency,omitempty"`
	} `json:"CPU,omitempty"`
	ExitCode *V0042ProcessExitCodeVerbose `json:"exit_code,omitempty"`

	// KillRequestUser User ID that requested termination of the step
	KillRequestUser *string `json:"kill_request_user,omitempty"`
	Nodes           *struct {
		// Count Number of nodes in the job step
		Count *int32         `json:"count,omitempty"`
		List  *V0042Hostlist `json:"list,omitempty"`

		// Range Node(s) allocated to the job step
		Range *string `json:"range,omitempty"`
	} `json:"nodes,omitempty"`

	// Pid Deprecated; Process ID
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	Pid *string `json:"pid,omitempty"`

	// State Current state
	State      *[]V0042StepState `json:"state,omitempty"`
	Statistics *struct {
		CPU *struct {
			// ActualFrequency Average weighted CPU frequency of all tasks in kHz
			ActualFrequency *int64 `json:"actual_frequency,omitempty"`
		} `json:"CPU,omitempty"`
		Energy *struct {
			Consumed *V0042Uint64NoValStruct `json:"consumed,omitempty"`
		} `json:"energy,omitempty"`
	} `json:"statistics,omitempty"`
	Step *struct {
		// Id Step ID
		Id *string `json:"id,omitempty"`

		// Name Step name
		Name *string `json:"name,omitempty"`
	} `json:"step,omitempty"`
	Task *struct {
		// Distribution The layout of the step was when it was running
		Distribution *string `json:"distribution,omitempty"`
	} `json:"task,omitempty"`
	Tasks *struct {
		// Count Total number of tasks
		Count *int32 `json:"count,omitempty"`
	} `json:"tasks,omitempty"`
	Time *struct {
		// Elapsed Elapsed time in seconds
		Elapsed *int32                  `json:"elapsed,omitempty"`
		End     *V0042Uint64NoValStruct `json:"end,omitempty"`
		Start   *V0042Uint64NoValStruct `json:"start,omitempty"`

		// Suspended Total time in suspended state in seconds
		Suspended *int32 `json:"suspended,omitempty"`
		System    *struct {
			// Microseconds System CPU time used by the step in microseconds
			Microseconds *int32 `json:"microseconds,omitempty"`

			// Seconds System CPU time used by the step in seconds
			Seconds *int64 `json:"seconds,omitempty"`
		} `json:"system,omitempty"`
		Total *struct {
			// Microseconds Total CPU time used by the step in microseconds
			Microseconds *int32 `json:"microseconds,omitempty"`

			// Seconds Total CPU time used by the step in seconds
			Seconds *int64 `json:"seconds,omitempty"`
		} `json:"total,omitempty"`
		User *struct {
			// Microseconds User CPU time used by the step in microseconds
			Microseconds *int32 `json:"microseconds,omitempty"`

			// Seconds User CPU time used by the step in seconds
			Seconds *int64 `json:"seconds,omitempty"`
		} `json:"user,omitempty"`
	} `json:"time,omitempty"`
	Tres *struct {
		Allocated *V0042TresList `json:"allocated,omitempty"`
		Consumed  *struct {
			Average *V0042TresList         `json:"average,omitempty"`
			Max     *V0042StepTresUsageMax `json:"max,omitempty"`
			Min     *V0042StepTresUsageMin `json:"min,omitempty"`
			Total   *V0042TresList         `json:"total,omitempty"`
		} `json:"consumed,omitempty"`
		Requested *struct {
			Average *V0042TresList       `json:"average,omitempty"`
			Max     *V0042StepTresReqMax `json:"max,omitempty"`
			Min     *V0042StepTresReqMin `json:"min,omitempty"`
			Total   *V0042TresList       `json:"total,omitempty"`
		} `json:"requested,omitempty"`
	} `json:"tres,omitempty"`
}

// V0042StepState defines model for V0042Step.State.
type V0042StepState string

// V0042StepList defines model for v0.0.42_step_list.
type V0042StepList = []V0042Step

// V0042StepTresReqMax defines model for v0.0.42_step_tres_req_max.
type V0042StepTresReqMax = []V0042Tres

// V0042StepTresReqMin defines model for v0.0.42_step_tres_req_min.
type V0042StepTresReqMin = []V0042Tres

// V0042StepTresUsageMax defines model for v0.0.42_step_tres_usage_max.
type V0042StepTresUsageMax = []V0042Tres

// V0042StepTresUsageMin defines model for v0.0.42_step_tres_usage_min.
type V0042StepTresUsageMin = []V0042Tres

// V0042StringArray defines model for v0.0.42_string_array.
type V0042StringArray = []string

// V0042StringList defines model for v0.0.42_string_list.
type V0042StringList = []string

// V0042Tres defines model for v0.0.42_tres.
type V0042Tres struct {
	// Count TRES count (0 if listed generically)
	Count *int64 `json:"count,omitempty"`

	// Id ID used in the database
	Id *int32 `json:"id,omitempty"`

	// Name TRES name (if applicable)
	Name *string `json:"name,omitempty"`

	// Type TRES type (CPU, MEM, etc)
	Type string `json:"type"`
}

// V0042TresList defines model for v0.0.42_tres_list.
type V0042TresList = []V0042Tres

// V0042Uint16NoValStruct defines model for v0.0.42_uint16_no_val_struct.
type V0042Uint16NoValStruct struct {
	// Infinite True if number has been set to infinite; "set" and "number" will be ignored
	Infinite *bool `json:"infinite,omitempty"`

	// Number If "set" is True the number will be set with value; otherwise ignore number contents
	Number *int32 `json:"number,omitempty"`

	// Set True if number has been set; False if number is unset
	Set *bool `json:"set,omitempty"`
}

// V0042Uint32NoValStruct defines model for v0.0.42_uint32_no_val_struct.
type V0042Uint32NoValStruct struct {
	// Infinite True if number has been set to infinite; "set" and "number" will be ignored
	Infinite *bool `json:"infinite,omitempty"`

	// Number If "set" is True the number will be set with value; otherwise ignore number contents
	Number *int32 `json:"number,omitempty"`

	// Set True if number has been set; False if number is unset
	Set *bool `json:"set,omitempty"`
}

// V0042Uint64NoValStruct defines model for v0.0.42_uint64_no_val_struct.
type V0042Uint64NoValStruct struct {
	// Infinite True if number has been set to infinite; "set" and "number" will be ignored
	Infinite *bool `json:"infinite,omitempty"`

	// Number If "set" is True the number will be set with value; otherwise ignore number contents
	Number *int64 `json:"number,omitempty"`

	// Set True if number has been set; False if number is unset
	Set *bool `json:"set,omitempty"`
}

// V0042UpdateNodeMsg defines model for v0.0.42_update_node_msg.
type V0042UpdateNodeMsg struct {
	Address *V0042HostlistString `json:"address,omitempty"`

	// Comment Arbitrary comment
	Comment *string `json:"comment,omitempty"`

	// CpuBind Default method for binding tasks to allocated CPUs
	CpuBind *int32 `json:"cpu_bind,omitempty"`

	// Extra Arbitrary string used for node filtering if extra constraints are enabled
	Extra       *string         `json:"extra,omitempty"`
	Features    *V0042CsvString `json:"features,omitempty"`
	FeaturesAct *V0042CsvString `json:"features_act,omitempty"`

	// Gres Generic resources
	Gres     *string              `json:"gres,omitempty"`
	Hostname *V0042HostlistString `json:"hostname,omitempty"`
	Name     *V0042HostlistString `json:"name,omitempty"`

	// Reason Reason for node being DOWN or DRAINING
	Reason *string `json:"reason,omitempty"`

	// ReasonUid User ID to associate with the reason (needed if user root is sending message)
	ReasonUid   *string                 `json:"reason_uid,omitempty"`
	ResumeAfter *V0042Uint32NoValStruct `json:"resume_after,omitempty"`

	// State New state to assign to the node
	State  *[]V0042UpdateNodeMsgState `json:"state,omitempty"`
	Weight *V0042Uint32NoValStruct    `json:"weight,omitempty"`
}

// V0042UpdateNodeMsgState defines model for V0042UpdateNodeMsg.State.
type V0042UpdateNodeMsgState string

// V0042User defines model for v0.0.42_user.
type V0042User struct {
	// AdministratorLevel AdminLevel granted to the user
	AdministratorLevel *[]V0042UserAdministratorLevel `json:"administrator_level,omitempty"`
	Associations       *V0042AssocShortList           `json:"associations,omitempty"`
	Coordinators       *V0042CoordList                `json:"coordinators,omitempty"`
	Default            *struct {
		// Account Default account
		Account *string `json:"account,omitempty"`

		// Wckey Default WCKey
		Wckey *string `json:"wckey,omitempty"`
	} `json:"default,omitempty"`

	// Flags Flags associated with this user
	Flags *[]V0042UserFlags `json:"flags,omitempty"`

	// Name User name
	Name string `json:"name"`

	// OldName Previous user name
	OldName *string         `json:"old_name,omitempty"`
	Wckeys  *V0042WckeyList `json:"wckeys,omitempty"`
}

// V0042UserAdministratorLevel defines model for V0042User.AdministratorLevel.
type V0042UserAdministratorLevel string

// V0042UserFlags defines model for V0042User.Flags.
type V0042UserFlags string

// V0042UserList defines model for v0.0.42_user_list.
type V0042UserList = []V0042User

// V0042UserShort defines model for v0.0.42_user_short.
type V0042UserShort struct {
	// Adminlevel AdminLevel granted to the user
	Adminlevel *[]V0042UserShortAdminlevel `json:"adminlevel,omitempty"`

	// Defaultaccount Default account
	Defaultaccount *string `json:"defaultaccount,omitempty"`

	// Defaultwckey Default WCKey
	Defaultwckey *string `json:"defaultwckey,omitempty"`
}

// V0042UserShortAdminlevel defines model for V0042UserShort.Adminlevel.
type V0042UserShortAdminlevel string

// V0042UsersAddCond defines model for v0.0.42_users_add_cond.
type V0042UsersAddCond struct {
	Accounts    *V0042StringList  `json:"accounts,omitempty"`
	Association *V0042AssocRecSet `json:"association,omitempty"`
	Clusters    *V0042StringList  `json:"clusters,omitempty"`
	Partitions  *V0042StringList  `json:"partitions,omitempty"`
	Users       V0042StringList   `json:"users"`
	Wckeys      *V0042StringList  `json:"wckeys,omitempty"`
}

// V0042Wckey defines model for v0.0.42_wckey.
type V0042Wckey struct {
	Accounting *V0042AccountingList `json:"accounting,omitempty"`

	// Cluster Cluster name
	Cluster string `json:"cluster"`

	// Flags Flags associated with this WCKey
	Flags *[]V0042WckeyFlags `json:"flags,omitempty"`

	// Id Unique ID for this user-cluster-wckey combination
	Id *int32 `json:"id,omitempty"`

	// Name WCKey name
	Name string `json:"name"`

	// User User name
	User string `json:"user"`
}

// V0042WckeyFlags defines model for V0042Wckey.Flags.
type V0042WckeyFlags string

// V0042WckeyList defines model for v0.0.42_wckey_list.
type V0042WckeyList = []V0042Wckey

// V0042WckeyTagStruct defines model for v0.0.42_wckey_tag_struct.
type V0042WckeyTagStruct struct {
	// Flags Active flags
	Flags []V0042WckeyTagStructFlags `json:"flags"`

	// Wckey WCKey name
	Wckey string `json:"wckey"`
}

// V0042WckeyTagStructFlags defines model for V0042WckeyTagStruct.Flags.
type V0042WckeyTagStructFlags string

// SlurmV0042DeleteJobParams defines parameters for SlurmV0042DeleteJob.
type SlurmV0042DeleteJobParams struct {
	// Signal Signal to send to Job
	Signal *string `form:"signal,omitempty" json:"signal,omitempty"`

	// Flags Signalling flags
	Flags *SlurmV0042DeleteJobParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmV0042DeleteJobParamsFlags defines parameters for SlurmV0042DeleteJob.
type SlurmV0042DeleteJobParamsFlags string

// SlurmV0042GetJobParams defines parameters for SlurmV0042GetJob.
type SlurmV0042GetJobParams struct {
	// UpdateTime Query jobs updated more recently than this time (UNIX timestamp)
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`

	// Flags Query flags
	Flags *SlurmV0042GetJobParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmV0042GetJobParamsFlags defines parameters for SlurmV0042GetJob.
type SlurmV0042GetJobParamsFlags string

// SlurmV0042GetJobsParams defines parameters for SlurmV0042GetJobs.
type SlurmV0042GetJobsParams struct {
	// UpdateTime Query jobs updated more recently than this time (UNIX timestamp)
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`

	// Flags Query flags
	Flags *SlurmV0042GetJobsParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmV0042GetJobsParamsFlags defines parameters for SlurmV0042GetJobs.
type SlurmV0042GetJobsParamsFlags string

// SlurmV0042GetJobsStateParams defines parameters for SlurmV0042GetJobsState.
type SlurmV0042GetJobsStateParams struct {
	// JobId CSV list of Job IDs to search for
	JobId *string `form:"job_id,omitempty" json:"job_id,omitempty"`
}

// SlurmV0042GetNodeParams defines parameters for SlurmV0042GetNode.
type SlurmV0042GetNodeParams struct {
	// UpdateTime Query jobs updated more recently than this time (UNIX timestamp)
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`

	// Flags Query flags
	Flags *SlurmV0042GetNodeParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmV0042GetNodeParamsFlags defines parameters for SlurmV0042GetNode.
type SlurmV0042GetNodeParamsFlags string

// SlurmV0042GetNodesParams defines parameters for SlurmV0042GetNodes.
type SlurmV0042GetNodesParams struct {
	// UpdateTime Query jobs updated more recently than this time (UNIX timestamp)
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`

	// Flags Query flags
	Flags *SlurmV0042GetNodesParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmV0042GetNodesParamsFlags defines parameters for SlurmV0042GetNodes.
type SlurmV0042GetNodesParamsFlags string

// SlurmV0042GetPartitionParams defines parameters for SlurmV0042GetPartition.
type SlurmV0042GetPartitionParams struct {
	// UpdateTime Query partitions updated more recently than this time (UNIX timestamp)
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`

	// Flags Query flags
	Flags *SlurmV0042GetPartitionParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmV0042GetPartitionParamsFlags defines parameters for SlurmV0042GetPartition.
type SlurmV0042GetPartitionParamsFlags string

// SlurmV0042GetPartitionsParams defines parameters for SlurmV0042GetPartitions.
type SlurmV0042GetPartitionsParams struct {
	// UpdateTime Query partitions updated more recently than this time (UNIX timestamp)
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`

	// Flags Query flags
	Flags *SlurmV0042GetPartitionsParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmV0042GetPartitionsParamsFlags defines parameters for SlurmV0042GetPartitions.
type SlurmV0042GetPartitionsParamsFlags string

// SlurmV0042GetReservationParams defines parameters for SlurmV0042GetReservation.
type SlurmV0042GetReservationParams struct {
	// UpdateTime Query reservations updated more recently than this time (UNIX timestamp)
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`
}

// SlurmV0042GetReservationsParams defines parameters for SlurmV0042GetReservations.
type SlurmV0042GetReservationsParams struct {
	// UpdateTime Query reservations updated more recently than this time (UNIX timestamp)
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`
}

// SlurmV0042GetSharesParams defines parameters for SlurmV0042GetShares.
type SlurmV0042GetSharesParams struct {
	// Accounts Accounts to query
	Accounts *string `form:"accounts,omitempty" json:"accounts,omitempty"`

	// Users Users to query
	Users *string `form:"users,omitempty" json:"users,omitempty"`
}

// SlurmdbV0042GetAccountParams defines parameters for SlurmdbV0042GetAccount.
type SlurmdbV0042GetAccountParams struct {
	// WithAssocs Include associations
	WithAssocs *string `form:"with_assocs,omitempty" json:"with_assocs,omitempty"`

	// WithCoords Include coordinators
	WithCoords *string `form:"with_coords,omitempty" json:"with_coords,omitempty"`

	// WithDeleted Include deleted
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`
}

// SlurmdbV0042GetAccountsParams defines parameters for SlurmdbV0042GetAccounts.
type SlurmdbV0042GetAccountsParams struct {
	// Description CSV description list
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// DELETED include deleted associations
	DELETED *string `form:"DELETED,omitempty" json:"DELETED,omitempty"`

	// WithAssociations query includes associations
	WithAssociations *string `form:"WithAssociations,omitempty" json:"WithAssociations,omitempty"`

	// WithCoordinators query includes coordinators
	WithCoordinators *string `form:"WithCoordinators,omitempty" json:"WithCoordinators,omitempty"`

	// NoUsersAreCoords remove users as coordinators
	NoUsersAreCoords *string `form:"NoUsersAreCoords,omitempty" json:"NoUsersAreCoords,omitempty"`

	// UsersAreCoords users are coordinators
	UsersAreCoords *string `form:"UsersAreCoords,omitempty" json:"UsersAreCoords,omitempty"`
}

// SlurmdbV0042DeleteAssociationParams defines parameters for SlurmdbV0042DeleteAssociation.
type SlurmdbV0042DeleteAssociationParams struct {
	// Account CSV accounts list
	Account *string `form:"account,omitempty" json:"account,omitempty"`

	// Cluster CSV clusters list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// DefaultQos CSV QOS list
	DefaultQos                 *string `form:"default_qos,omitempty" json:"default_qos,omitempty"`
	IncludeDeletedAssociations *string `form:"Include deleted associations,omitempty" json:"Include deleted associations,omitempty"`
	IncludeUsage               *string `form:"Include usage,omitempty" json:"Include usage,omitempty"`
	FilterToOnlyDefaults       *string `form:"Filter to only defaults,omitempty" json:"Filter to only defaults,omitempty"`
	IncludeTheRawQOSOrDeltaQos *string `form:"Include the raw QOS or delta_qos,omitempty" json:"Include the raw QOS or delta_qos,omitempty"`
	IncludeSubAcctInformation  *string `form:"Include sub acct information,omitempty" json:"Include sub acct information,omitempty"`
	ExcludeParentIdname        *string `form:"Exclude parent id/name,omitempty" json:"Exclude parent id/name,omitempty"`
	ExcludeLimitsFromParents   *string `form:"Exclude limits from parents,omitempty" json:"Exclude limits from parents,omitempty"`

	// Format Ignored; process JSON manually to control output format
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Id CSV ID list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// ParentAccount CSV names of parent account
	ParentAccount *string `form:"parent_account,omitempty" json:"parent_account,omitempty"`

	// Partition CSV partition name list
	Partition *string `form:"partition,omitempty" json:"partition,omitempty"`

	// Qos CSV QOS list
	Qos *string `form:"qos,omitempty" json:"qos,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// User CSV user list
	User *string `form:"user,omitempty" json:"user,omitempty"`
}

// SlurmdbV0042GetAssociationParams defines parameters for SlurmdbV0042GetAssociation.
type SlurmdbV0042GetAssociationParams struct {
	// Account CSV accounts list
	Account *string `form:"account,omitempty" json:"account,omitempty"`

	// Cluster CSV clusters list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// DefaultQos CSV QOS list
	DefaultQos                 *string `form:"default_qos,omitempty" json:"default_qos,omitempty"`
	IncludeDeletedAssociations *string `form:"Include deleted associations,omitempty" json:"Include deleted associations,omitempty"`
	IncludeUsage               *string `form:"Include usage,omitempty" json:"Include usage,omitempty"`
	FilterToOnlyDefaults       *string `form:"Filter to only defaults,omitempty" json:"Filter to only defaults,omitempty"`
	IncludeTheRawQOSOrDeltaQos *string `form:"Include the raw QOS or delta_qos,omitempty" json:"Include the raw QOS or delta_qos,omitempty"`
	IncludeSubAcctInformation  *string `form:"Include sub acct information,omitempty" json:"Include sub acct information,omitempty"`
	ExcludeParentIdname        *string `form:"Exclude parent id/name,omitempty" json:"Exclude parent id/name,omitempty"`
	ExcludeLimitsFromParents   *string `form:"Exclude limits from parents,omitempty" json:"Exclude limits from parents,omitempty"`

	// Format Ignored; process JSON manually to control output format
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Id CSV ID list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// ParentAccount CSV names of parent account
	ParentAccount *string `form:"parent_account,omitempty" json:"parent_account,omitempty"`

	// Partition CSV partition name list
	Partition *string `form:"partition,omitempty" json:"partition,omitempty"`

	// Qos CSV QOS list
	Qos *string `form:"qos,omitempty" json:"qos,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// User CSV user list
	User *string `form:"user,omitempty" json:"user,omitempty"`
}

// SlurmdbV0042DeleteAssociationsParams defines parameters for SlurmdbV0042DeleteAssociations.
type SlurmdbV0042DeleteAssociationsParams struct {
	// Account CSV accounts list
	Account *string `form:"account,omitempty" json:"account,omitempty"`

	// Cluster CSV clusters list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// DefaultQos CSV QOS list
	DefaultQos                 *string `form:"default_qos,omitempty" json:"default_qos,omitempty"`
	IncludeDeletedAssociations *string `form:"Include deleted associations,omitempty" json:"Include deleted associations,omitempty"`
	IncludeUsage               *string `form:"Include usage,omitempty" json:"Include usage,omitempty"`
	FilterToOnlyDefaults       *string `form:"Filter to only defaults,omitempty" json:"Filter to only defaults,omitempty"`
	IncludeTheRawQOSOrDeltaQos *string `form:"Include the raw QOS or delta_qos,omitempty" json:"Include the raw QOS or delta_qos,omitempty"`
	IncludeSubAcctInformation  *string `form:"Include sub acct information,omitempty" json:"Include sub acct information,omitempty"`
	ExcludeParentIdname        *string `form:"Exclude parent id/name,omitempty" json:"Exclude parent id/name,omitempty"`
	ExcludeLimitsFromParents   *string `form:"Exclude limits from parents,omitempty" json:"Exclude limits from parents,omitempty"`

	// Format Ignored; process JSON manually to control output format
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Id CSV ID list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// ParentAccount CSV names of parent account
	ParentAccount *string `form:"parent_account,omitempty" json:"parent_account,omitempty"`

	// Partition CSV partition name list
	Partition *string `form:"partition,omitempty" json:"partition,omitempty"`

	// Qos CSV QOS list
	Qos *string `form:"qos,omitempty" json:"qos,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// User CSV user list
	User *string `form:"user,omitempty" json:"user,omitempty"`
}

// SlurmdbV0042GetAssociationsParams defines parameters for SlurmdbV0042GetAssociations.
type SlurmdbV0042GetAssociationsParams struct {
	// Account CSV accounts list
	Account *string `form:"account,omitempty" json:"account,omitempty"`

	// Cluster CSV clusters list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// DefaultQos CSV QOS list
	DefaultQos                 *string `form:"default_qos,omitempty" json:"default_qos,omitempty"`
	IncludeDeletedAssociations *string `form:"Include deleted associations,omitempty" json:"Include deleted associations,omitempty"`
	IncludeUsage               *string `form:"Include usage,omitempty" json:"Include usage,omitempty"`
	FilterToOnlyDefaults       *string `form:"Filter to only defaults,omitempty" json:"Filter to only defaults,omitempty"`
	IncludeTheRawQOSOrDeltaQos *string `form:"Include the raw QOS or delta_qos,omitempty" json:"Include the raw QOS or delta_qos,omitempty"`
	IncludeSubAcctInformation  *string `form:"Include sub acct information,omitempty" json:"Include sub acct information,omitempty"`
	ExcludeParentIdname        *string `form:"Exclude parent id/name,omitempty" json:"Exclude parent id/name,omitempty"`
	ExcludeLimitsFromParents   *string `form:"Exclude limits from parents,omitempty" json:"Exclude limits from parents,omitempty"`

	// Format Ignored; process JSON manually to control output format
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Id CSV ID list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// ParentAccount CSV names of parent account
	ParentAccount *string `form:"parent_account,omitempty" json:"parent_account,omitempty"`

	// Partition CSV partition name list
	Partition *string `form:"partition,omitempty" json:"partition,omitempty"`

	// Qos CSV QOS list
	Qos *string `form:"qos,omitempty" json:"qos,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// User CSV user list
	User *string `form:"user,omitempty" json:"user,omitempty"`
}

// SlurmdbV0042DeleteClusterParams defines parameters for SlurmdbV0042DeleteCluster.
type SlurmdbV0042DeleteClusterParams struct {
	// Classification Type of machine
	Classification *SlurmdbV0042DeleteClusterParamsClassification `form:"classification,omitempty" json:"classification,omitempty"`

	// Cluster CSV cluster list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// Federation CSV federation list
	Federation *string `form:"federation,omitempty" json:"federation,omitempty"`

	// Flags Query flags
	Flags *SlurmdbV0042DeleteClusterParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`

	// Format Ignored; process JSON manually to control output format
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// RpcVersion CSV RPC version list
	RpcVersion *string `form:"rpc_version,omitempty" json:"rpc_version,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// WithDeleted Include deleted clusters
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`

	// WithUsage Include usage
	WithUsage *string `form:"with_usage,omitempty" json:"with_usage,omitempty"`
}

// SlurmdbV0042DeleteClusterParamsClassification defines parameters for SlurmdbV0042DeleteCluster.
type SlurmdbV0042DeleteClusterParamsClassification string

// SlurmdbV0042DeleteClusterParamsFlags defines parameters for SlurmdbV0042DeleteCluster.
type SlurmdbV0042DeleteClusterParamsFlags string

// SlurmdbV0042GetClusterParams defines parameters for SlurmdbV0042GetCluster.
type SlurmdbV0042GetClusterParams struct {
	// Classification Type of machine
	Classification *SlurmdbV0042GetClusterParamsClassification `form:"classification,omitempty" json:"classification,omitempty"`

	// Cluster CSV cluster list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// Federation CSV federation list
	Federation *string `form:"federation,omitempty" json:"federation,omitempty"`

	// Flags Query flags
	Flags *SlurmdbV0042GetClusterParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`

	// Format Ignored; process JSON manually to control output format
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// RpcVersion CSV RPC version list
	RpcVersion *string `form:"rpc_version,omitempty" json:"rpc_version,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// WithDeleted Include deleted clusters
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`

	// WithUsage Include usage
	WithUsage *string `form:"with_usage,omitempty" json:"with_usage,omitempty"`
}

// SlurmdbV0042GetClusterParamsClassification defines parameters for SlurmdbV0042GetCluster.
type SlurmdbV0042GetClusterParamsClassification string

// SlurmdbV0042GetClusterParamsFlags defines parameters for SlurmdbV0042GetCluster.
type SlurmdbV0042GetClusterParamsFlags string

// SlurmdbV0042GetClustersParams defines parameters for SlurmdbV0042GetClusters.
type SlurmdbV0042GetClustersParams struct {
	// UpdateTime Query reservations updated more recently than this time (UNIX timestamp)
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`
}

// SlurmdbV0042PostClustersParams defines parameters for SlurmdbV0042PostClusters.
type SlurmdbV0042PostClustersParams struct {
	// UpdateTime Query reservations updated more recently than this time (UNIX timestamp)
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`
}

// SlurmdbV0042GetInstanceParams defines parameters for SlurmdbV0042GetInstance.
type SlurmdbV0042GetInstanceParams struct {
	// Cluster CSV clusters list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// Extra CSV extra list
	Extra *string `form:"extra,omitempty" json:"extra,omitempty"`

	// Format Ignored; process JSON manually to control output format
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// InstanceId CSV instance_id list
	InstanceId *string `form:"instance_id,omitempty" json:"instance_id,omitempty"`

	// InstanceType CSV instance_type list
	InstanceType *string `form:"instance_type,omitempty" json:"instance_type,omitempty"`

	// NodeList Ranged node string
	NodeList *string `form:"node_list,omitempty" json:"node_list,omitempty"`

	// TimeEnd Time end (UNIX timestamp)
	TimeEnd *string `form:"time_end,omitempty" json:"time_end,omitempty"`

	// TimeStart Time start (UNIX timestamp)
	TimeStart *string `form:"time_start,omitempty" json:"time_start,omitempty"`
}

// SlurmdbV0042GetInstancesParams defines parameters for SlurmdbV0042GetInstances.
type SlurmdbV0042GetInstancesParams struct {
	// Cluster CSV clusters list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// Extra CSV extra list
	Extra *string `form:"extra,omitempty" json:"extra,omitempty"`

	// Format Ignored; process JSON manually to control output format
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// InstanceId CSV instance_id list
	InstanceId *string `form:"instance_id,omitempty" json:"instance_id,omitempty"`

	// InstanceType CSV instance_type list
	InstanceType *string `form:"instance_type,omitempty" json:"instance_type,omitempty"`

	// NodeList Ranged node string
	NodeList *string `form:"node_list,omitempty" json:"node_list,omitempty"`

	// TimeEnd Time end (UNIX timestamp)
	TimeEnd *string `form:"time_end,omitempty" json:"time_end,omitempty"`

	// TimeStart Time start (UNIX timestamp)
	TimeStart *string `form:"time_start,omitempty" json:"time_start,omitempty"`
}

// SlurmdbV0042GetJobsParams defines parameters for SlurmdbV0042GetJobs.
type SlurmdbV0042GetJobsParams struct {
	// Account CSV account list
	Account *string `form:"account,omitempty" json:"account,omitempty"`

	// Association CSV association list
	Association *string `form:"association,omitempty" json:"association,omitempty"`

	// Cluster CSV cluster list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// Constraints CSV constraint list
	Constraints *string `form:"constraints,omitempty" json:"constraints,omitempty"`

	// SchedulerUnset Schedule bits not set
	SchedulerUnset *string `form:"scheduler_unset,omitempty" json:"scheduler_unset,omitempty"`

	// ScheduledOnSubmit Job was started on submit
	ScheduledOnSubmit *string `form:"scheduled_on_submit,omitempty" json:"scheduled_on_submit,omitempty"`

	// ScheduledByMain Job was started from main scheduler
	ScheduledByMain *string `form:"scheduled_by_main,omitempty" json:"scheduled_by_main,omitempty"`

	// ScheduledByBackfill Job was started from backfill
	ScheduledByBackfill *string `form:"scheduled_by_backfill,omitempty" json:"scheduled_by_backfill,omitempty"`

	// JobStarted Job start RPC was received
	JobStarted *string `form:"job_started,omitempty" json:"job_started,omitempty"`

	// ExitCode Job exit code (numeric)
	ExitCode *string `form:"exit_code,omitempty" json:"exit_code,omitempty"`

	// ShowDuplicates Include duplicate job entries
	ShowDuplicates *string `form:"show_duplicates,omitempty" json:"show_duplicates,omitempty"`

	// SkipSteps Exclude job step details
	SkipSteps *string `form:"skip_steps,omitempty" json:"skip_steps,omitempty"`

	// DisableTruncateUsageTime Do not truncate the time to usage_start and usage_end
	DisableTruncateUsageTime *string `form:"disable_truncate_usage_time,omitempty" json:"disable_truncate_usage_time,omitempty"`

	// WholeHetjob Include details on all hetjob components
	WholeHetjob *string `form:"whole_hetjob,omitempty" json:"whole_hetjob,omitempty"`

	// DisableWholeHetjob Only show details on specified hetjob components
	DisableWholeHetjob *string `form:"disable_whole_hetjob,omitempty" json:"disable_whole_hetjob,omitempty"`

	// DisableWaitForResult Tell dbd not to wait for the result
	DisableWaitForResult *string `form:"disable_wait_for_result,omitempty" json:"disable_wait_for_result,omitempty"`

	// UsageTimeAsSubmitTime Use usage_time as the submit_time of the job
	UsageTimeAsSubmitTime *string `form:"usage_time_as_submit_time,omitempty" json:"usage_time_as_submit_time,omitempty"`

	// ShowBatchScript Include job script
	ShowBatchScript *string `form:"show_batch_script,omitempty" json:"show_batch_script,omitempty"`

	// ShowJobEnvironment Include job environment
	ShowJobEnvironment *string `form:"show_job_environment,omitempty" json:"show_job_environment,omitempty"`

	// Format Ignored; process JSON manually to control output format
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Groups CSV group list
	Groups *string `form:"groups,omitempty" json:"groups,omitempty"`

	// JobName CSV job name list
	JobName *string `form:"job_name,omitempty" json:"job_name,omitempty"`

	// Partition CSV partition name list
	Partition *string `form:"partition,omitempty" json:"partition,omitempty"`

	// Qos CSV QOS name list
	Qos *string `form:"qos,omitempty" json:"qos,omitempty"`

	// Reason CSV reason list
	Reason *string `form:"reason,omitempty" json:"reason,omitempty"`

	// Reservation CSV reservation name list
	Reservation *string `form:"reservation,omitempty" json:"reservation,omitempty"`

	// ReservationId CSV reservation ID list
	ReservationId *string `form:"reservation_id,omitempty" json:"reservation_id,omitempty"`

	// State CSV state list
	State *string `form:"state,omitempty" json:"state,omitempty"`

	// Step CSV step id list
	Step *string `form:"step,omitempty" json:"step,omitempty"`

	// EndTime Usage end (UNIX timestamp)
	EndTime *string `form:"end_time,omitempty" json:"end_time,omitempty"`

	// StartTime Usage start (UNIX timestamp)
	StartTime *string `form:"start_time,omitempty" json:"start_time,omitempty"`

	// Node Ranged node string where jobs ran
	Node *string `form:"node,omitempty" json:"node,omitempty"`

	// Users CSV user name list
	Users *string `form:"users,omitempty" json:"users,omitempty"`

	// Wckey CSV WCKey list
	Wckey *string `form:"wckey,omitempty" json:"wckey,omitempty"`
}

// SlurmdbV0042GetQosParams defines parameters for SlurmdbV0042GetQos.
type SlurmdbV0042GetQosParams struct {
	// Description CSV description list
	Description       *string `form:"description,omitempty" json:"description,omitempty"`
	IncludeDeletedQOS *string `form:"Include deleted QOS,omitempty" json:"Include deleted QOS,omitempty"`

	// Id CSV QOS id list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Format Ignored; process JSON manually to control output format
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Name CSV QOS name list
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// PreemptMode PreemptMode used when jobs in this QOS are preempted
	PreemptMode *SlurmdbV0042GetQosParamsPreemptMode `form:"preempt_mode,omitempty" json:"preempt_mode,omitempty"`
}

// SlurmdbV0042GetQosParamsPreemptMode defines parameters for SlurmdbV0042GetQos.
type SlurmdbV0042GetQosParamsPreemptMode string

// SlurmdbV0042PostQosParams defines parameters for SlurmdbV0042PostQos.
type SlurmdbV0042PostQosParams struct {
	// Description CSV description list
	Description       *string `form:"description,omitempty" json:"description,omitempty"`
	IncludeDeletedQOS *string `form:"Include deleted QOS,omitempty" json:"Include deleted QOS,omitempty"`

	// Id CSV QOS id list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Format Ignored; process JSON manually to control output format
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Name CSV QOS name list
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// PreemptMode PreemptMode used when jobs in this QOS are preempted
	PreemptMode *SlurmdbV0042PostQosParamsPreemptMode `form:"preempt_mode,omitempty" json:"preempt_mode,omitempty"`
}

// SlurmdbV0042PostQosParamsPreemptMode defines parameters for SlurmdbV0042PostQos.
type SlurmdbV0042PostQosParamsPreemptMode string

// SlurmdbV0042GetSingleQosParams defines parameters for SlurmdbV0042GetSingleQos.
type SlurmdbV0042GetSingleQosParams struct {
	// WithDeleted Query includes deleted QOS
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`
}

// SlurmdbV0042GetUserParams defines parameters for SlurmdbV0042GetUser.
type SlurmdbV0042GetUserParams struct {
	// WithDeleted Include deleted users
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`

	// WithAssocs Include associations
	WithAssocs *string `form:"with_assocs,omitempty" json:"with_assocs,omitempty"`

	// WithCoords Include coordinators
	WithCoords *string `form:"with_coords,omitempty" json:"with_coords,omitempty"`

	// WithWckeys Include WCKeys
	WithWckeys *string `form:"with_wckeys,omitempty" json:"with_wckeys,omitempty"`
}

// SlurmdbV0042GetUsersParams defines parameters for SlurmdbV0042GetUsers.
type SlurmdbV0042GetUsersParams struct {
	// AdminLevel Administrator level
	AdminLevel *SlurmdbV0042GetUsersParamsAdminLevel `form:"admin_level,omitempty" json:"admin_level,omitempty"`

	// DefaultAccount CSV default account list
	DefaultAccount *string `form:"default_account,omitempty" json:"default_account,omitempty"`

	// DefaultWckey CSV default WCKey list
	DefaultWckey *string `form:"default_wckey,omitempty" json:"default_wckey,omitempty"`

	// WithAssocs With associations
	WithAssocs *string `form:"with_assocs,omitempty" json:"with_assocs,omitempty"`

	// WithCoords With coordinators
	WithCoords *string `form:"with_coords,omitempty" json:"with_coords,omitempty"`

	// WithDeleted With deleted
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`

	// WithWckeys With WCKeys
	WithWckeys *string `form:"with_wckeys,omitempty" json:"with_wckeys,omitempty"`

	// WithoutDefaults Exclude defaults
	WithoutDefaults *string `form:"without_defaults,omitempty" json:"without_defaults,omitempty"`
}

// SlurmdbV0042GetUsersParamsAdminLevel defines parameters for SlurmdbV0042GetUsers.
type SlurmdbV0042GetUsersParamsAdminLevel string

// SlurmdbV0042PostUsersAssociationParams defines parameters for SlurmdbV0042PostUsersAssociation.
type SlurmdbV0042PostUsersAssociationParams struct {
	// UpdateTime Query partitions updated more recently than this time (UNIX timestamp)
	UpdateTime *string `form:"update_time,omitempty" json:"update_time,omitempty"`

	// Flags Query flags
	Flags *SlurmdbV0042PostUsersAssociationParamsFlags `form:"flags,omitempty" json:"flags,omitempty"`
}

// SlurmdbV0042PostUsersAssociationParamsFlags defines parameters for SlurmdbV0042PostUsersAssociation.
type SlurmdbV0042PostUsersAssociationParamsFlags string

// SlurmdbV0042GetWckeysParams defines parameters for SlurmdbV0042GetWckeys.
type SlurmdbV0042GetWckeysParams struct {
	// Cluster CSV cluster name list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// Format Ignored; process JSON manually to control output format
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Id CSV ID list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Name CSV name list
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// OnlyDefaults Only query defaults
	OnlyDefaults *string `form:"only_defaults,omitempty" json:"only_defaults,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// User CSV user list
	User *string `form:"user,omitempty" json:"user,omitempty"`

	// WithUsage Include usage
	WithUsage *string `form:"with_usage,omitempty" json:"with_usage,omitempty"`

	// WithDeleted Include deleted WCKeys
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`
}

// SlurmdbV0042PostWckeysParams defines parameters for SlurmdbV0042PostWckeys.
type SlurmdbV0042PostWckeysParams struct {
	// Cluster CSV cluster name list
	Cluster *string `form:"cluster,omitempty" json:"cluster,omitempty"`

	// Format Ignored; process JSON manually to control output format
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Id CSV ID list
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Name CSV name list
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// OnlyDefaults Only query defaults
	OnlyDefaults *string `form:"only_defaults,omitempty" json:"only_defaults,omitempty"`

	// UsageEnd Usage end (UNIX timestamp)
	UsageEnd *string `form:"usage_end,omitempty" json:"usage_end,omitempty"`

	// UsageStart Usage start (UNIX timestamp)
	UsageStart *string `form:"usage_start,omitempty" json:"usage_start,omitempty"`

	// User CSV user list
	User *string `form:"user,omitempty" json:"user,omitempty"`

	// WithUsage Include usage
	WithUsage *string `form:"with_usage,omitempty" json:"with_usage,omitempty"`

	// WithDeleted Include deleted WCKeys
	WithDeleted *string `form:"with_deleted,omitempty" json:"with_deleted,omitempty"`
}

// SlurmV0042PostJobAllocateJSONRequestBody defines body for SlurmV0042PostJobAllocate for application/json ContentType.
type SlurmV0042PostJobAllocateJSONRequestBody = V0042JobAllocReq

// SlurmV0042PostJobSubmitJSONRequestBody defines body for SlurmV0042PostJobSubmit for application/json ContentType.
type SlurmV0042PostJobSubmitJSONRequestBody = V0042JobSubmitReq

// SlurmV0042PostJobJSONRequestBody defines body for SlurmV0042PostJob for application/json ContentType.
type SlurmV0042PostJobJSONRequestBody = V0042JobDescMsg

// SlurmV0042DeleteJobsJSONRequestBody defines body for SlurmV0042DeleteJobs for application/json ContentType.
type SlurmV0042DeleteJobsJSONRequestBody = V0042KillJobsMsg

// SlurmV0042PostNodeJSONRequestBody defines body for SlurmV0042PostNode for application/json ContentType.
type SlurmV0042PostNodeJSONRequestBody = V0042UpdateNodeMsg

// SlurmV0042PostNodesJSONRequestBody defines body for SlurmV0042PostNodes for application/json ContentType.
type SlurmV0042PostNodesJSONRequestBody = V0042UpdateNodeMsg

// SlurmdbV0042PostAccountsJSONRequestBody defines body for SlurmdbV0042PostAccounts for application/json ContentType.
type SlurmdbV0042PostAccountsJSONRequestBody = V0042OpenapiAccountsResp

// SlurmdbV0042PostAccountsAssociationJSONRequestBody defines body for SlurmdbV0042PostAccountsAssociation for application/json ContentType.
type SlurmdbV0042PostAccountsAssociationJSONRequestBody = V0042OpenapiAccountsAddCondResp

// SlurmdbV0042PostAssociationsJSONRequestBody defines body for SlurmdbV0042PostAssociations for application/json ContentType.
type SlurmdbV0042PostAssociationsJSONRequestBody = V0042OpenapiAssocsResp

// SlurmdbV0042PostClustersJSONRequestBody defines body for SlurmdbV0042PostClusters for application/json ContentType.
type SlurmdbV0042PostClustersJSONRequestBody = V0042OpenapiClustersResp

// SlurmdbV0042PostConfigJSONRequestBody defines body for SlurmdbV0042PostConfig for application/json ContentType.
type SlurmdbV0042PostConfigJSONRequestBody = V0042OpenapiSlurmdbdConfigResp

// SlurmdbV0042PostQosJSONRequestBody defines body for SlurmdbV0042PostQos for application/json ContentType.
type SlurmdbV0042PostQosJSONRequestBody = V0042OpenapiSlurmdbdQosResp

// SlurmdbV0042PostTresJSONRequestBody defines body for SlurmdbV0042PostTres for application/json ContentType.
type SlurmdbV0042PostTresJSONRequestBody = V0042OpenapiTresResp

// SlurmdbV0042PostUsersJSONRequestBody defines body for SlurmdbV0042PostUsers for application/json ContentType.
type SlurmdbV0042PostUsersJSONRequestBody = V0042OpenapiUsersResp

// SlurmdbV0042PostUsersAssociationJSONRequestBody defines body for SlurmdbV0042PostUsersAssociation for application/json ContentType.
type SlurmdbV0042PostUsersAssociationJSONRequestBody = V0042OpenapiUsersAddCondResp

// SlurmdbV0042PostWckeysJSONRequestBody defines body for SlurmdbV0042PostWckeys for application/json ContentType.
type SlurmdbV0042PostWckeysJSONRequestBody = V0042OpenapiWckeyResp

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// SlurmV0042GetDiag request
	SlurmV0042GetDiag(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0042PostJobAllocateWithBody request with any body
	SlurmV0042PostJobAllocateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmV0042PostJobAllocate(ctx context.Context, body SlurmV0042PostJobAllocateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0042PostJobSubmitWithBody request with any body
	SlurmV0042PostJobSubmitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmV0042PostJobSubmit(ctx context.Context, body SlurmV0042PostJobSubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0042DeleteJob request
	SlurmV0042DeleteJob(ctx context.Context, jobId string, params *SlurmV0042DeleteJobParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0042GetJob request
	SlurmV0042GetJob(ctx context.Context, jobId string, params *SlurmV0042GetJobParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0042PostJobWithBody request with any body
	SlurmV0042PostJobWithBody(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmV0042PostJob(ctx context.Context, jobId string, body SlurmV0042PostJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0042DeleteJobsWithBody request with any body
	SlurmV0042DeleteJobsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmV0042DeleteJobs(ctx context.Context, body SlurmV0042DeleteJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0042GetJobs request
	SlurmV0042GetJobs(ctx context.Context, params *SlurmV0042GetJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0042GetJobsState request
	SlurmV0042GetJobsState(ctx context.Context, params *SlurmV0042GetJobsStateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0042GetLicenses request
	SlurmV0042GetLicenses(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0042DeleteNode request
	SlurmV0042DeleteNode(ctx context.Context, nodeName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0042GetNode request
	SlurmV0042GetNode(ctx context.Context, nodeName string, params *SlurmV0042GetNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0042PostNodeWithBody request with any body
	SlurmV0042PostNodeWithBody(ctx context.Context, nodeName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmV0042PostNode(ctx context.Context, nodeName string, body SlurmV0042PostNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0042GetNodes request
	SlurmV0042GetNodes(ctx context.Context, params *SlurmV0042GetNodesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0042PostNodesWithBody request with any body
	SlurmV0042PostNodesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmV0042PostNodes(ctx context.Context, body SlurmV0042PostNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0042GetPartition request
	SlurmV0042GetPartition(ctx context.Context, partitionName string, params *SlurmV0042GetPartitionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0042GetPartitions request
	SlurmV0042GetPartitions(ctx context.Context, params *SlurmV0042GetPartitionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0042GetPing request
	SlurmV0042GetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0042GetReconfigure request
	SlurmV0042GetReconfigure(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0042GetReservation request
	SlurmV0042GetReservation(ctx context.Context, reservationName string, params *SlurmV0042GetReservationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0042GetReservations request
	SlurmV0042GetReservations(ctx context.Context, params *SlurmV0042GetReservationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmV0042GetShares request
	SlurmV0042GetShares(ctx context.Context, params *SlurmV0042GetSharesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042DeleteAccount request
	SlurmdbV0042DeleteAccount(ctx context.Context, accountName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042GetAccount request
	SlurmdbV0042GetAccount(ctx context.Context, accountName string, params *SlurmdbV0042GetAccountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042GetAccounts request
	SlurmdbV0042GetAccounts(ctx context.Context, params *SlurmdbV0042GetAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042PostAccountsWithBody request with any body
	SlurmdbV0042PostAccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0042PostAccounts(ctx context.Context, body SlurmdbV0042PostAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042PostAccountsAssociationWithBody request with any body
	SlurmdbV0042PostAccountsAssociationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0042PostAccountsAssociation(ctx context.Context, body SlurmdbV0042PostAccountsAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042DeleteAssociation request
	SlurmdbV0042DeleteAssociation(ctx context.Context, params *SlurmdbV0042DeleteAssociationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042GetAssociation request
	SlurmdbV0042GetAssociation(ctx context.Context, params *SlurmdbV0042GetAssociationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042DeleteAssociations request
	SlurmdbV0042DeleteAssociations(ctx context.Context, params *SlurmdbV0042DeleteAssociationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042GetAssociations request
	SlurmdbV0042GetAssociations(ctx context.Context, params *SlurmdbV0042GetAssociationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042PostAssociationsWithBody request with any body
	SlurmdbV0042PostAssociationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0042PostAssociations(ctx context.Context, body SlurmdbV0042PostAssociationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042DeleteCluster request
	SlurmdbV0042DeleteCluster(ctx context.Context, clusterName string, params *SlurmdbV0042DeleteClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042GetCluster request
	SlurmdbV0042GetCluster(ctx context.Context, clusterName string, params *SlurmdbV0042GetClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042GetClusters request
	SlurmdbV0042GetClusters(ctx context.Context, params *SlurmdbV0042GetClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042PostClustersWithBody request with any body
	SlurmdbV0042PostClustersWithBody(ctx context.Context, params *SlurmdbV0042PostClustersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0042PostClusters(ctx context.Context, params *SlurmdbV0042PostClustersParams, body SlurmdbV0042PostClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042GetConfig request
	SlurmdbV0042GetConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042PostConfigWithBody request with any body
	SlurmdbV0042PostConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0042PostConfig(ctx context.Context, body SlurmdbV0042PostConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042GetDiag request
	SlurmdbV0042GetDiag(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042GetInstance request
	SlurmdbV0042GetInstance(ctx context.Context, params *SlurmdbV0042GetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042GetInstances request
	SlurmdbV0042GetInstances(ctx context.Context, params *SlurmdbV0042GetInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042GetJob request
	SlurmdbV0042GetJob(ctx context.Context, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042GetJobs request
	SlurmdbV0042GetJobs(ctx context.Context, params *SlurmdbV0042GetJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042GetPing request
	SlurmdbV0042GetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042GetQos request
	SlurmdbV0042GetQos(ctx context.Context, params *SlurmdbV0042GetQosParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042PostQosWithBody request with any body
	SlurmdbV0042PostQosWithBody(ctx context.Context, params *SlurmdbV0042PostQosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0042PostQos(ctx context.Context, params *SlurmdbV0042PostQosParams, body SlurmdbV0042PostQosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042DeleteSingleQos request
	SlurmdbV0042DeleteSingleQos(ctx context.Context, qos string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042GetSingleQos request
	SlurmdbV0042GetSingleQos(ctx context.Context, qos string, params *SlurmdbV0042GetSingleQosParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042GetTres request
	SlurmdbV0042GetTres(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042PostTresWithBody request with any body
	SlurmdbV0042PostTresWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0042PostTres(ctx context.Context, body SlurmdbV0042PostTresJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042DeleteUser request
	SlurmdbV0042DeleteUser(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042GetUser request
	SlurmdbV0042GetUser(ctx context.Context, name string, params *SlurmdbV0042GetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042GetUsers request
	SlurmdbV0042GetUsers(ctx context.Context, params *SlurmdbV0042GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042PostUsersWithBody request with any body
	SlurmdbV0042PostUsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0042PostUsers(ctx context.Context, body SlurmdbV0042PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042PostUsersAssociationWithBody request with any body
	SlurmdbV0042PostUsersAssociationWithBody(ctx context.Context, params *SlurmdbV0042PostUsersAssociationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0042PostUsersAssociation(ctx context.Context, params *SlurmdbV0042PostUsersAssociationParams, body SlurmdbV0042PostUsersAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042DeleteWckey request
	SlurmdbV0042DeleteWckey(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042GetWckey request
	SlurmdbV0042GetWckey(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042GetWckeys request
	SlurmdbV0042GetWckeys(ctx context.Context, params *SlurmdbV0042GetWckeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlurmdbV0042PostWckeysWithBody request with any body
	SlurmdbV0042PostWckeysWithBody(ctx context.Context, params *SlurmdbV0042PostWckeysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlurmdbV0042PostWckeys(ctx context.Context, params *SlurmdbV0042PostWckeysParams, body SlurmdbV0042PostWckeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) SlurmV0042GetDiag(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0042GetDiagRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0042PostJobAllocateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0042PostJobAllocateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0042PostJobAllocate(ctx context.Context, body SlurmV0042PostJobAllocateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0042PostJobAllocateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0042PostJobSubmitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0042PostJobSubmitRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0042PostJobSubmit(ctx context.Context, body SlurmV0042PostJobSubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0042PostJobSubmitRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0042DeleteJob(ctx context.Context, jobId string, params *SlurmV0042DeleteJobParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0042DeleteJobRequest(c.Server, jobId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0042GetJob(ctx context.Context, jobId string, params *SlurmV0042GetJobParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0042GetJobRequest(c.Server, jobId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0042PostJobWithBody(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0042PostJobRequestWithBody(c.Server, jobId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0042PostJob(ctx context.Context, jobId string, body SlurmV0042PostJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0042PostJobRequest(c.Server, jobId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0042DeleteJobsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0042DeleteJobsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0042DeleteJobs(ctx context.Context, body SlurmV0042DeleteJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0042DeleteJobsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0042GetJobs(ctx context.Context, params *SlurmV0042GetJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0042GetJobsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0042GetJobsState(ctx context.Context, params *SlurmV0042GetJobsStateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0042GetJobsStateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0042GetLicenses(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0042GetLicensesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0042DeleteNode(ctx context.Context, nodeName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0042DeleteNodeRequest(c.Server, nodeName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0042GetNode(ctx context.Context, nodeName string, params *SlurmV0042GetNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0042GetNodeRequest(c.Server, nodeName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0042PostNodeWithBody(ctx context.Context, nodeName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0042PostNodeRequestWithBody(c.Server, nodeName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0042PostNode(ctx context.Context, nodeName string, body SlurmV0042PostNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0042PostNodeRequest(c.Server, nodeName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0042GetNodes(ctx context.Context, params *SlurmV0042GetNodesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0042GetNodesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0042PostNodesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0042PostNodesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0042PostNodes(ctx context.Context, body SlurmV0042PostNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0042PostNodesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0042GetPartition(ctx context.Context, partitionName string, params *SlurmV0042GetPartitionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0042GetPartitionRequest(c.Server, partitionName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0042GetPartitions(ctx context.Context, params *SlurmV0042GetPartitionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0042GetPartitionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0042GetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0042GetPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0042GetReconfigure(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0042GetReconfigureRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0042GetReservation(ctx context.Context, reservationName string, params *SlurmV0042GetReservationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0042GetReservationRequest(c.Server, reservationName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0042GetReservations(ctx context.Context, params *SlurmV0042GetReservationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0042GetReservationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmV0042GetShares(ctx context.Context, params *SlurmV0042GetSharesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmV0042GetSharesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042DeleteAccount(ctx context.Context, accountName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042DeleteAccountRequest(c.Server, accountName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042GetAccount(ctx context.Context, accountName string, params *SlurmdbV0042GetAccountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042GetAccountRequest(c.Server, accountName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042GetAccounts(ctx context.Context, params *SlurmdbV0042GetAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042GetAccountsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042PostAccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042PostAccountsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042PostAccounts(ctx context.Context, body SlurmdbV0042PostAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042PostAccountsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042PostAccountsAssociationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042PostAccountsAssociationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042PostAccountsAssociation(ctx context.Context, body SlurmdbV0042PostAccountsAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042PostAccountsAssociationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042DeleteAssociation(ctx context.Context, params *SlurmdbV0042DeleteAssociationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042DeleteAssociationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042GetAssociation(ctx context.Context, params *SlurmdbV0042GetAssociationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042GetAssociationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042DeleteAssociations(ctx context.Context, params *SlurmdbV0042DeleteAssociationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042DeleteAssociationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042GetAssociations(ctx context.Context, params *SlurmdbV0042GetAssociationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042GetAssociationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042PostAssociationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042PostAssociationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042PostAssociations(ctx context.Context, body SlurmdbV0042PostAssociationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042PostAssociationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042DeleteCluster(ctx context.Context, clusterName string, params *SlurmdbV0042DeleteClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042DeleteClusterRequest(c.Server, clusterName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042GetCluster(ctx context.Context, clusterName string, params *SlurmdbV0042GetClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042GetClusterRequest(c.Server, clusterName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042GetClusters(ctx context.Context, params *SlurmdbV0042GetClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042GetClustersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042PostClustersWithBody(ctx context.Context, params *SlurmdbV0042PostClustersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042PostClustersRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042PostClusters(ctx context.Context, params *SlurmdbV0042PostClustersParams, body SlurmdbV0042PostClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042PostClustersRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042GetConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042GetConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042PostConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042PostConfigRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042PostConfig(ctx context.Context, body SlurmdbV0042PostConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042PostConfigRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042GetDiag(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042GetDiagRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042GetInstance(ctx context.Context, params *SlurmdbV0042GetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042GetInstanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042GetInstances(ctx context.Context, params *SlurmdbV0042GetInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042GetInstancesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042GetJob(ctx context.Context, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042GetJobRequest(c.Server, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042GetJobs(ctx context.Context, params *SlurmdbV0042GetJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042GetJobsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042GetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042GetPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042GetQos(ctx context.Context, params *SlurmdbV0042GetQosParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042GetQosRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042PostQosWithBody(ctx context.Context, params *SlurmdbV0042PostQosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042PostQosRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042PostQos(ctx context.Context, params *SlurmdbV0042PostQosParams, body SlurmdbV0042PostQosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042PostQosRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042DeleteSingleQos(ctx context.Context, qos string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042DeleteSingleQosRequest(c.Server, qos)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042GetSingleQos(ctx context.Context, qos string, params *SlurmdbV0042GetSingleQosParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042GetSingleQosRequest(c.Server, qos, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042GetTres(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042GetTresRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042PostTresWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042PostTresRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042PostTres(ctx context.Context, body SlurmdbV0042PostTresJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042PostTresRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042DeleteUser(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042DeleteUserRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042GetUser(ctx context.Context, name string, params *SlurmdbV0042GetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042GetUserRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042GetUsers(ctx context.Context, params *SlurmdbV0042GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042GetUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042PostUsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042PostUsersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042PostUsers(ctx context.Context, body SlurmdbV0042PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042PostUsersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042PostUsersAssociationWithBody(ctx context.Context, params *SlurmdbV0042PostUsersAssociationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042PostUsersAssociationRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042PostUsersAssociation(ctx context.Context, params *SlurmdbV0042PostUsersAssociationParams, body SlurmdbV0042PostUsersAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042PostUsersAssociationRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042DeleteWckey(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042DeleteWckeyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042GetWckey(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042GetWckeyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042GetWckeys(ctx context.Context, params *SlurmdbV0042GetWckeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042GetWckeysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042PostWckeysWithBody(ctx context.Context, params *SlurmdbV0042PostWckeysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042PostWckeysRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlurmdbV0042PostWckeys(ctx context.Context, params *SlurmdbV0042PostWckeysParams, body SlurmdbV0042PostWckeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlurmdbV0042PostWckeysRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewSlurmV0042GetDiagRequest generates requests for SlurmV0042GetDiag
func NewSlurmV0042GetDiagRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.42/diag/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0042PostJobAllocateRequest calls the generic SlurmV0042PostJobAllocate builder with application/json body
func NewSlurmV0042PostJobAllocateRequest(server string, body SlurmV0042PostJobAllocateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmV0042PostJobAllocateRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmV0042PostJobAllocateRequestWithBody generates requests for SlurmV0042PostJobAllocate with any type of body
func NewSlurmV0042PostJobAllocateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.42/job/allocate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmV0042PostJobSubmitRequest calls the generic SlurmV0042PostJobSubmit builder with application/json body
func NewSlurmV0042PostJobSubmitRequest(server string, body SlurmV0042PostJobSubmitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmV0042PostJobSubmitRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmV0042PostJobSubmitRequestWithBody generates requests for SlurmV0042PostJobSubmit with any type of body
func NewSlurmV0042PostJobSubmitRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.42/job/submit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmV0042DeleteJobRequest generates requests for SlurmV0042DeleteJob
func NewSlurmV0042DeleteJobRequest(server string, jobId string, params *SlurmV0042DeleteJobParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.42/job/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Signal != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "signal", runtime.ParamLocationQuery, *params.Signal); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0042GetJobRequest generates requests for SlurmV0042GetJob
func NewSlurmV0042GetJobRequest(server string, jobId string, params *SlurmV0042GetJobParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.42/job/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0042PostJobRequest calls the generic SlurmV0042PostJob builder with application/json body
func NewSlurmV0042PostJobRequest(server string, jobId string, body SlurmV0042PostJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmV0042PostJobRequestWithBody(server, jobId, "application/json", bodyReader)
}

// NewSlurmV0042PostJobRequestWithBody generates requests for SlurmV0042PostJob with any type of body
func NewSlurmV0042PostJobRequestWithBody(server string, jobId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.42/job/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmV0042DeleteJobsRequest calls the generic SlurmV0042DeleteJobs builder with application/json body
func NewSlurmV0042DeleteJobsRequest(server string, body SlurmV0042DeleteJobsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmV0042DeleteJobsRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmV0042DeleteJobsRequestWithBody generates requests for SlurmV0042DeleteJobs with any type of body
func NewSlurmV0042DeleteJobsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.42/jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmV0042GetJobsRequest generates requests for SlurmV0042GetJobs
func NewSlurmV0042GetJobsRequest(server string, params *SlurmV0042GetJobsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.42/jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0042GetJobsStateRequest generates requests for SlurmV0042GetJobsState
func NewSlurmV0042GetJobsStateRequest(server string, params *SlurmV0042GetJobsStateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.42/jobs/state/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.JobId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "job_id", runtime.ParamLocationQuery, *params.JobId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0042GetLicensesRequest generates requests for SlurmV0042GetLicenses
func NewSlurmV0042GetLicensesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.42/licenses/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0042DeleteNodeRequest generates requests for SlurmV0042DeleteNode
func NewSlurmV0042DeleteNodeRequest(server string, nodeName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_name", runtime.ParamLocationPath, nodeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.42/node/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0042GetNodeRequest generates requests for SlurmV0042GetNode
func NewSlurmV0042GetNodeRequest(server string, nodeName string, params *SlurmV0042GetNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_name", runtime.ParamLocationPath, nodeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.42/node/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0042PostNodeRequest calls the generic SlurmV0042PostNode builder with application/json body
func NewSlurmV0042PostNodeRequest(server string, nodeName string, body SlurmV0042PostNodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmV0042PostNodeRequestWithBody(server, nodeName, "application/json", bodyReader)
}

// NewSlurmV0042PostNodeRequestWithBody generates requests for SlurmV0042PostNode with any type of body
func NewSlurmV0042PostNodeRequestWithBody(server string, nodeName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "node_name", runtime.ParamLocationPath, nodeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.42/node/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmV0042GetNodesRequest generates requests for SlurmV0042GetNodes
func NewSlurmV0042GetNodesRequest(server string, params *SlurmV0042GetNodesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.42/nodes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0042PostNodesRequest calls the generic SlurmV0042PostNodes builder with application/json body
func NewSlurmV0042PostNodesRequest(server string, body SlurmV0042PostNodesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmV0042PostNodesRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmV0042PostNodesRequestWithBody generates requests for SlurmV0042PostNodes with any type of body
func NewSlurmV0042PostNodesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.42/nodes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmV0042GetPartitionRequest generates requests for SlurmV0042GetPartition
func NewSlurmV0042GetPartitionRequest(server string, partitionName string, params *SlurmV0042GetPartitionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "partition_name", runtime.ParamLocationPath, partitionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.42/partition/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0042GetPartitionsRequest generates requests for SlurmV0042GetPartitions
func NewSlurmV0042GetPartitionsRequest(server string, params *SlurmV0042GetPartitionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.42/partitions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0042GetPingRequest generates requests for SlurmV0042GetPing
func NewSlurmV0042GetPingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.42/ping/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0042GetReconfigureRequest generates requests for SlurmV0042GetReconfigure
func NewSlurmV0042GetReconfigureRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.42/reconfigure/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0042GetReservationRequest generates requests for SlurmV0042GetReservation
func NewSlurmV0042GetReservationRequest(server string, reservationName string, params *SlurmV0042GetReservationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "reservation_name", runtime.ParamLocationPath, reservationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.42/reservation/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0042GetReservationsRequest generates requests for SlurmV0042GetReservations
func NewSlurmV0042GetReservationsRequest(server string, params *SlurmV0042GetReservationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.42/reservations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmV0042GetSharesRequest generates requests for SlurmV0042GetShares
func NewSlurmV0042GetSharesRequest(server string, params *SlurmV0042GetSharesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurm/v0.0.42/shares")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Accounts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "accounts", runtime.ParamLocationQuery, *params.Accounts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Users != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "users", runtime.ParamLocationQuery, *params.Users); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0042DeleteAccountRequest generates requests for SlurmdbV0042DeleteAccount
func NewSlurmdbV0042DeleteAccountRequest(server string, accountName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_name", runtime.ParamLocationPath, accountName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/account/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0042GetAccountRequest generates requests for SlurmdbV0042GetAccount
func NewSlurmdbV0042GetAccountRequest(server string, accountName string, params *SlurmdbV0042GetAccountParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_name", runtime.ParamLocationPath, accountName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/account/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WithAssocs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_assocs", runtime.ParamLocationQuery, *params.WithAssocs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithCoords != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_coords", runtime.ParamLocationQuery, *params.WithCoords); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0042GetAccountsRequest generates requests for SlurmdbV0042GetAccounts
func NewSlurmdbV0042GetAccountsRequest(server string, params *SlurmdbV0042GetAccountsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/accounts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DELETED != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "DELETED", runtime.ParamLocationQuery, *params.DELETED); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithAssociations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "WithAssociations", runtime.ParamLocationQuery, *params.WithAssociations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithCoordinators != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "WithCoordinators", runtime.ParamLocationQuery, *params.WithCoordinators); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NoUsersAreCoords != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "NoUsersAreCoords", runtime.ParamLocationQuery, *params.NoUsersAreCoords); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsersAreCoords != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "UsersAreCoords", runtime.ParamLocationQuery, *params.UsersAreCoords); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0042PostAccountsRequest calls the generic SlurmdbV0042PostAccounts builder with application/json body
func NewSlurmdbV0042PostAccountsRequest(server string, body SlurmdbV0042PostAccountsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0042PostAccountsRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmdbV0042PostAccountsRequestWithBody generates requests for SlurmdbV0042PostAccounts with any type of body
func NewSlurmdbV0042PostAccountsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/accounts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmdbV0042PostAccountsAssociationRequest calls the generic SlurmdbV0042PostAccountsAssociation builder with application/json body
func NewSlurmdbV0042PostAccountsAssociationRequest(server string, body SlurmdbV0042PostAccountsAssociationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0042PostAccountsAssociationRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmdbV0042PostAccountsAssociationRequestWithBody generates requests for SlurmdbV0042PostAccountsAssociation with any type of body
func NewSlurmdbV0042PostAccountsAssociationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/accounts_association/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmdbV0042DeleteAssociationRequest generates requests for SlurmdbV0042DeleteAssociation
func NewSlurmdbV0042DeleteAssociationRequest(server string, params *SlurmdbV0042DeleteAssociationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/association/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Account != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "account", runtime.ParamLocationQuery, *params.Account); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DefaultQos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "default_qos", runtime.ParamLocationQuery, *params.DefaultQos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeDeletedAssociations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include deleted associations", runtime.ParamLocationQuery, *params.IncludeDeletedAssociations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeUsage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include usage", runtime.ParamLocationQuery, *params.IncludeUsage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterToOnlyDefaults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Filter to only defaults", runtime.ParamLocationQuery, *params.FilterToOnlyDefaults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeTheRawQOSOrDeltaQos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include the raw QOS or delta_qos", runtime.ParamLocationQuery, *params.IncludeTheRawQOSOrDeltaQos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeSubAcctInformation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include sub acct information", runtime.ParamLocationQuery, *params.IncludeSubAcctInformation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeParentIdname != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Exclude parent id/name", runtime.ParamLocationQuery, *params.ExcludeParentIdname); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeLimitsFromParents != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Exclude limits from parents", runtime.ParamLocationQuery, *params.ExcludeLimitsFromParents); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentAccount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "parent_account", runtime.ParamLocationQuery, *params.ParentAccount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Partition != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "partition", runtime.ParamLocationQuery, *params.Partition); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Qos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "qos", runtime.ParamLocationQuery, *params.Qos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_end", runtime.ParamLocationQuery, *params.UsageEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_start", runtime.ParamLocationQuery, *params.UsageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0042GetAssociationRequest generates requests for SlurmdbV0042GetAssociation
func NewSlurmdbV0042GetAssociationRequest(server string, params *SlurmdbV0042GetAssociationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/association/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Account != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "account", runtime.ParamLocationQuery, *params.Account); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DefaultQos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "default_qos", runtime.ParamLocationQuery, *params.DefaultQos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeDeletedAssociations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include deleted associations", runtime.ParamLocationQuery, *params.IncludeDeletedAssociations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeUsage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include usage", runtime.ParamLocationQuery, *params.IncludeUsage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterToOnlyDefaults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Filter to only defaults", runtime.ParamLocationQuery, *params.FilterToOnlyDefaults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeTheRawQOSOrDeltaQos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include the raw QOS or delta_qos", runtime.ParamLocationQuery, *params.IncludeTheRawQOSOrDeltaQos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeSubAcctInformation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include sub acct information", runtime.ParamLocationQuery, *params.IncludeSubAcctInformation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeParentIdname != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Exclude parent id/name", runtime.ParamLocationQuery, *params.ExcludeParentIdname); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeLimitsFromParents != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Exclude limits from parents", runtime.ParamLocationQuery, *params.ExcludeLimitsFromParents); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentAccount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "parent_account", runtime.ParamLocationQuery, *params.ParentAccount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Partition != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "partition", runtime.ParamLocationQuery, *params.Partition); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Qos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "qos", runtime.ParamLocationQuery, *params.Qos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_end", runtime.ParamLocationQuery, *params.UsageEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_start", runtime.ParamLocationQuery, *params.UsageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0042DeleteAssociationsRequest generates requests for SlurmdbV0042DeleteAssociations
func NewSlurmdbV0042DeleteAssociationsRequest(server string, params *SlurmdbV0042DeleteAssociationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/associations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Account != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "account", runtime.ParamLocationQuery, *params.Account); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DefaultQos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "default_qos", runtime.ParamLocationQuery, *params.DefaultQos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeDeletedAssociations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include deleted associations", runtime.ParamLocationQuery, *params.IncludeDeletedAssociations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeUsage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include usage", runtime.ParamLocationQuery, *params.IncludeUsage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterToOnlyDefaults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Filter to only defaults", runtime.ParamLocationQuery, *params.FilterToOnlyDefaults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeTheRawQOSOrDeltaQos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include the raw QOS or delta_qos", runtime.ParamLocationQuery, *params.IncludeTheRawQOSOrDeltaQos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeSubAcctInformation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include sub acct information", runtime.ParamLocationQuery, *params.IncludeSubAcctInformation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeParentIdname != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Exclude parent id/name", runtime.ParamLocationQuery, *params.ExcludeParentIdname); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeLimitsFromParents != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Exclude limits from parents", runtime.ParamLocationQuery, *params.ExcludeLimitsFromParents); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentAccount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "parent_account", runtime.ParamLocationQuery, *params.ParentAccount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Partition != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "partition", runtime.ParamLocationQuery, *params.Partition); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Qos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "qos", runtime.ParamLocationQuery, *params.Qos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_end", runtime.ParamLocationQuery, *params.UsageEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_start", runtime.ParamLocationQuery, *params.UsageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0042GetAssociationsRequest generates requests for SlurmdbV0042GetAssociations
func NewSlurmdbV0042GetAssociationsRequest(server string, params *SlurmdbV0042GetAssociationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/associations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Account != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "account", runtime.ParamLocationQuery, *params.Account); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DefaultQos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "default_qos", runtime.ParamLocationQuery, *params.DefaultQos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeDeletedAssociations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include deleted associations", runtime.ParamLocationQuery, *params.IncludeDeletedAssociations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeUsage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include usage", runtime.ParamLocationQuery, *params.IncludeUsage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterToOnlyDefaults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Filter to only defaults", runtime.ParamLocationQuery, *params.FilterToOnlyDefaults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeTheRawQOSOrDeltaQos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include the raw QOS or delta_qos", runtime.ParamLocationQuery, *params.IncludeTheRawQOSOrDeltaQos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeSubAcctInformation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include sub acct information", runtime.ParamLocationQuery, *params.IncludeSubAcctInformation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeParentIdname != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Exclude parent id/name", runtime.ParamLocationQuery, *params.ExcludeParentIdname); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeLimitsFromParents != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Exclude limits from parents", runtime.ParamLocationQuery, *params.ExcludeLimitsFromParents); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentAccount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "parent_account", runtime.ParamLocationQuery, *params.ParentAccount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Partition != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "partition", runtime.ParamLocationQuery, *params.Partition); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Qos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "qos", runtime.ParamLocationQuery, *params.Qos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_end", runtime.ParamLocationQuery, *params.UsageEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_start", runtime.ParamLocationQuery, *params.UsageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0042PostAssociationsRequest calls the generic SlurmdbV0042PostAssociations builder with application/json body
func NewSlurmdbV0042PostAssociationsRequest(server string, body SlurmdbV0042PostAssociationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0042PostAssociationsRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmdbV0042PostAssociationsRequestWithBody generates requests for SlurmdbV0042PostAssociations with any type of body
func NewSlurmdbV0042PostAssociationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/associations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmdbV0042DeleteClusterRequest generates requests for SlurmdbV0042DeleteCluster
func NewSlurmdbV0042DeleteClusterRequest(server string, clusterName string, params *SlurmdbV0042DeleteClusterParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_name", runtime.ParamLocationPath, clusterName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/cluster/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Classification != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "classification", runtime.ParamLocationQuery, *params.Classification); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Federation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "federation", runtime.ParamLocationQuery, *params.Federation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RpcVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rpc_version", runtime.ParamLocationQuery, *params.RpcVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_end", runtime.ParamLocationQuery, *params.UsageEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_start", runtime.ParamLocationQuery, *params.UsageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithUsage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_usage", runtime.ParamLocationQuery, *params.WithUsage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0042GetClusterRequest generates requests for SlurmdbV0042GetCluster
func NewSlurmdbV0042GetClusterRequest(server string, clusterName string, params *SlurmdbV0042GetClusterParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_name", runtime.ParamLocationPath, clusterName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/cluster/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Classification != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "classification", runtime.ParamLocationQuery, *params.Classification); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Federation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "federation", runtime.ParamLocationQuery, *params.Federation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RpcVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "rpc_version", runtime.ParamLocationQuery, *params.RpcVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_end", runtime.ParamLocationQuery, *params.UsageEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_start", runtime.ParamLocationQuery, *params.UsageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithUsage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_usage", runtime.ParamLocationQuery, *params.WithUsage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0042GetClustersRequest generates requests for SlurmdbV0042GetClusters
func NewSlurmdbV0042GetClustersRequest(server string, params *SlurmdbV0042GetClustersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/clusters/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0042PostClustersRequest calls the generic SlurmdbV0042PostClusters builder with application/json body
func NewSlurmdbV0042PostClustersRequest(server string, params *SlurmdbV0042PostClustersParams, body SlurmdbV0042PostClustersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0042PostClustersRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSlurmdbV0042PostClustersRequestWithBody generates requests for SlurmdbV0042PostClusters with any type of body
func NewSlurmdbV0042PostClustersRequestWithBody(server string, params *SlurmdbV0042PostClustersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/clusters/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmdbV0042GetConfigRequest generates requests for SlurmdbV0042GetConfig
func NewSlurmdbV0042GetConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0042PostConfigRequest calls the generic SlurmdbV0042PostConfig builder with application/json body
func NewSlurmdbV0042PostConfigRequest(server string, body SlurmdbV0042PostConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0042PostConfigRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmdbV0042PostConfigRequestWithBody generates requests for SlurmdbV0042PostConfig with any type of body
func NewSlurmdbV0042PostConfigRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmdbV0042GetDiagRequest generates requests for SlurmdbV0042GetDiag
func NewSlurmdbV0042GetDiagRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/diag/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0042GetInstanceRequest generates requests for SlurmdbV0042GetInstance
func NewSlurmdbV0042GetInstanceRequest(server string, params *SlurmdbV0042GetInstanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/instance/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Extra != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "extra", runtime.ParamLocationQuery, *params.Extra); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InstanceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "instance_id", runtime.ParamLocationQuery, *params.InstanceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InstanceType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "instance_type", runtime.ParamLocationQuery, *params.InstanceType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NodeList != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "node_list", runtime.ParamLocationQuery, *params.NodeList); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimeEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "time_end", runtime.ParamLocationQuery, *params.TimeEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimeStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "time_start", runtime.ParamLocationQuery, *params.TimeStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0042GetInstancesRequest generates requests for SlurmdbV0042GetInstances
func NewSlurmdbV0042GetInstancesRequest(server string, params *SlurmdbV0042GetInstancesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/instances/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Extra != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "extra", runtime.ParamLocationQuery, *params.Extra); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InstanceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "instance_id", runtime.ParamLocationQuery, *params.InstanceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InstanceType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "instance_type", runtime.ParamLocationQuery, *params.InstanceType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NodeList != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "node_list", runtime.ParamLocationQuery, *params.NodeList); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimeEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "time_end", runtime.ParamLocationQuery, *params.TimeEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimeStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "time_start", runtime.ParamLocationQuery, *params.TimeStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0042GetJobRequest generates requests for SlurmdbV0042GetJob
func NewSlurmdbV0042GetJobRequest(server string, jobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/job/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0042GetJobsRequest generates requests for SlurmdbV0042GetJobs
func NewSlurmdbV0042GetJobsRequest(server string, params *SlurmdbV0042GetJobsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Account != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "account", runtime.ParamLocationQuery, *params.Account); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Association != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "association", runtime.ParamLocationQuery, *params.Association); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Constraints != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "constraints", runtime.ParamLocationQuery, *params.Constraints); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SchedulerUnset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "scheduler_unset", runtime.ParamLocationQuery, *params.SchedulerUnset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScheduledOnSubmit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "scheduled_on_submit", runtime.ParamLocationQuery, *params.ScheduledOnSubmit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScheduledByMain != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "scheduled_by_main", runtime.ParamLocationQuery, *params.ScheduledByMain); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScheduledByBackfill != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "scheduled_by_backfill", runtime.ParamLocationQuery, *params.ScheduledByBackfill); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JobStarted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "job_started", runtime.ParamLocationQuery, *params.JobStarted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExitCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "exit_code", runtime.ParamLocationQuery, *params.ExitCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowDuplicates != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "show_duplicates", runtime.ParamLocationQuery, *params.ShowDuplicates); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SkipSteps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "skip_steps", runtime.ParamLocationQuery, *params.SkipSteps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DisableTruncateUsageTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "disable_truncate_usage_time", runtime.ParamLocationQuery, *params.DisableTruncateUsageTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WholeHetjob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "whole_hetjob", runtime.ParamLocationQuery, *params.WholeHetjob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DisableWholeHetjob != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "disable_whole_hetjob", runtime.ParamLocationQuery, *params.DisableWholeHetjob); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DisableWaitForResult != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "disable_wait_for_result", runtime.ParamLocationQuery, *params.DisableWaitForResult); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageTimeAsSubmitTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_time_as_submit_time", runtime.ParamLocationQuery, *params.UsageTimeAsSubmitTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowBatchScript != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "show_batch_script", runtime.ParamLocationQuery, *params.ShowBatchScript); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowJobEnvironment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "show_job_environment", runtime.ParamLocationQuery, *params.ShowJobEnvironment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Groups != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "groups", runtime.ParamLocationQuery, *params.Groups); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JobName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "job_name", runtime.ParamLocationQuery, *params.JobName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Partition != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "partition", runtime.ParamLocationQuery, *params.Partition); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Qos != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "qos", runtime.ParamLocationQuery, *params.Qos); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reason != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "reason", runtime.ParamLocationQuery, *params.Reason); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reservation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "reservation", runtime.ParamLocationQuery, *params.Reservation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReservationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "reservation_id", runtime.ParamLocationQuery, *params.ReservationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Step != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "step", runtime.ParamLocationQuery, *params.Step); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "end_time", runtime.ParamLocationQuery, *params.EndTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "start_time", runtime.ParamLocationQuery, *params.StartTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Node != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "node", runtime.ParamLocationQuery, *params.Node); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Users != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "users", runtime.ParamLocationQuery, *params.Users); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Wckey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "wckey", runtime.ParamLocationQuery, *params.Wckey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0042GetPingRequest generates requests for SlurmdbV0042GetPing
func NewSlurmdbV0042GetPingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/ping/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0042GetQosRequest generates requests for SlurmdbV0042GetQos
func NewSlurmdbV0042GetQosRequest(server string, params *SlurmdbV0042GetQosParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/qos/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeDeletedQOS != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include deleted QOS", runtime.ParamLocationQuery, *params.IncludeDeletedQOS); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PreemptMode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "preempt_mode", runtime.ParamLocationQuery, *params.PreemptMode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0042PostQosRequest calls the generic SlurmdbV0042PostQos builder with application/json body
func NewSlurmdbV0042PostQosRequest(server string, params *SlurmdbV0042PostQosParams, body SlurmdbV0042PostQosJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0042PostQosRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSlurmdbV0042PostQosRequestWithBody generates requests for SlurmdbV0042PostQos with any type of body
func NewSlurmdbV0042PostQosRequestWithBody(server string, params *SlurmdbV0042PostQosParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/qos/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeDeletedQOS != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "Include deleted QOS", runtime.ParamLocationQuery, *params.IncludeDeletedQOS); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PreemptMode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "preempt_mode", runtime.ParamLocationQuery, *params.PreemptMode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmdbV0042DeleteSingleQosRequest generates requests for SlurmdbV0042DeleteSingleQos
func NewSlurmdbV0042DeleteSingleQosRequest(server string, qos string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "qos", runtime.ParamLocationPath, qos)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/qos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0042GetSingleQosRequest generates requests for SlurmdbV0042GetSingleQos
func NewSlurmdbV0042GetSingleQosRequest(server string, qos string, params *SlurmdbV0042GetSingleQosParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "qos", runtime.ParamLocationPath, qos)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/qos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0042GetTresRequest generates requests for SlurmdbV0042GetTres
func NewSlurmdbV0042GetTresRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/tres/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0042PostTresRequest calls the generic SlurmdbV0042PostTres builder with application/json body
func NewSlurmdbV0042PostTresRequest(server string, body SlurmdbV0042PostTresJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0042PostTresRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmdbV0042PostTresRequestWithBody generates requests for SlurmdbV0042PostTres with any type of body
func NewSlurmdbV0042PostTresRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/tres/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmdbV0042DeleteUserRequest generates requests for SlurmdbV0042DeleteUser
func NewSlurmdbV0042DeleteUserRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0042GetUserRequest generates requests for SlurmdbV0042GetUser
func NewSlurmdbV0042GetUserRequest(server string, name string, params *SlurmdbV0042GetUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithAssocs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_assocs", runtime.ParamLocationQuery, *params.WithAssocs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithCoords != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_coords", runtime.ParamLocationQuery, *params.WithCoords); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithWckeys != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_wckeys", runtime.ParamLocationQuery, *params.WithWckeys); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0042GetUsersRequest generates requests for SlurmdbV0042GetUsers
func NewSlurmdbV0042GetUsersRequest(server string, params *SlurmdbV0042GetUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/users/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AdminLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "admin_level", runtime.ParamLocationQuery, *params.AdminLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DefaultAccount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "default_account", runtime.ParamLocationQuery, *params.DefaultAccount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DefaultWckey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "default_wckey", runtime.ParamLocationQuery, *params.DefaultWckey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithAssocs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_assocs", runtime.ParamLocationQuery, *params.WithAssocs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithCoords != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_coords", runtime.ParamLocationQuery, *params.WithCoords); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithWckeys != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_wckeys", runtime.ParamLocationQuery, *params.WithWckeys); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithoutDefaults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "without_defaults", runtime.ParamLocationQuery, *params.WithoutDefaults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0042PostUsersRequest calls the generic SlurmdbV0042PostUsers builder with application/json body
func NewSlurmdbV0042PostUsersRequest(server string, body SlurmdbV0042PostUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0042PostUsersRequestWithBody(server, "application/json", bodyReader)
}

// NewSlurmdbV0042PostUsersRequestWithBody generates requests for SlurmdbV0042PostUsers with any type of body
func NewSlurmdbV0042PostUsersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/users/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmdbV0042PostUsersAssociationRequest calls the generic SlurmdbV0042PostUsersAssociation builder with application/json body
func NewSlurmdbV0042PostUsersAssociationRequest(server string, params *SlurmdbV0042PostUsersAssociationParams, body SlurmdbV0042PostUsersAssociationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0042PostUsersAssociationRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSlurmdbV0042PostUsersAssociationRequestWithBody generates requests for SlurmdbV0042PostUsersAssociation with any type of body
func NewSlurmdbV0042PostUsersAssociationRequestWithBody(server string, params *SlurmdbV0042PostUsersAssociationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/users_association/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UpdateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "update_time", runtime.ParamLocationQuery, *params.UpdateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Flags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "flags", runtime.ParamLocationQuery, *params.Flags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlurmdbV0042DeleteWckeyRequest generates requests for SlurmdbV0042DeleteWckey
func NewSlurmdbV0042DeleteWckeyRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/wckey/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0042GetWckeyRequest generates requests for SlurmdbV0042GetWckey
func NewSlurmdbV0042GetWckeyRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/wckey/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0042GetWckeysRequest generates requests for SlurmdbV0042GetWckeys
func NewSlurmdbV0042GetWckeysRequest(server string, params *SlurmdbV0042GetWckeysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/wckeys/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OnlyDefaults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "only_defaults", runtime.ParamLocationQuery, *params.OnlyDefaults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_end", runtime.ParamLocationQuery, *params.UsageEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_start", runtime.ParamLocationQuery, *params.UsageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithUsage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_usage", runtime.ParamLocationQuery, *params.WithUsage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlurmdbV0042PostWckeysRequest calls the generic SlurmdbV0042PostWckeys builder with application/json body
func NewSlurmdbV0042PostWckeysRequest(server string, params *SlurmdbV0042PostWckeysParams, body SlurmdbV0042PostWckeysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlurmdbV0042PostWckeysRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSlurmdbV0042PostWckeysRequestWithBody generates requests for SlurmdbV0042PostWckeys with any type of body
func NewSlurmdbV0042PostWckeysRequestWithBody(server string, params *SlurmdbV0042PostWckeysParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/slurmdb/v0.0.42/wckeys/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cluster != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cluster", runtime.ParamLocationQuery, *params.Cluster); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OnlyDefaults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "only_defaults", runtime.ParamLocationQuery, *params.OnlyDefaults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_end", runtime.ParamLocationQuery, *params.UsageEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UsageStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usage_start", runtime.ParamLocationQuery, *params.UsageStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithUsage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_usage", runtime.ParamLocationQuery, *params.WithUsage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "with_deleted", runtime.ParamLocationQuery, *params.WithDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// SlurmV0042GetDiagWithResponse request
	SlurmV0042GetDiagWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmV0042GetDiagResponse, error)

	// SlurmV0042PostJobAllocateWithBodyWithResponse request with any body
	SlurmV0042PostJobAllocateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0042PostJobAllocateResponse, error)

	SlurmV0042PostJobAllocateWithResponse(ctx context.Context, body SlurmV0042PostJobAllocateJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0042PostJobAllocateResponse, error)

	// SlurmV0042PostJobSubmitWithBodyWithResponse request with any body
	SlurmV0042PostJobSubmitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0042PostJobSubmitResponse, error)

	SlurmV0042PostJobSubmitWithResponse(ctx context.Context, body SlurmV0042PostJobSubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0042PostJobSubmitResponse, error)

	// SlurmV0042DeleteJobWithResponse request
	SlurmV0042DeleteJobWithResponse(ctx context.Context, jobId string, params *SlurmV0042DeleteJobParams, reqEditors ...RequestEditorFn) (*SlurmV0042DeleteJobResponse, error)

	// SlurmV0042GetJobWithResponse request
	SlurmV0042GetJobWithResponse(ctx context.Context, jobId string, params *SlurmV0042GetJobParams, reqEditors ...RequestEditorFn) (*SlurmV0042GetJobResponse, error)

	// SlurmV0042PostJobWithBodyWithResponse request with any body
	SlurmV0042PostJobWithBodyWithResponse(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0042PostJobResponse, error)

	SlurmV0042PostJobWithResponse(ctx context.Context, jobId string, body SlurmV0042PostJobJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0042PostJobResponse, error)

	// SlurmV0042DeleteJobsWithBodyWithResponse request with any body
	SlurmV0042DeleteJobsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0042DeleteJobsResponse, error)

	SlurmV0042DeleteJobsWithResponse(ctx context.Context, body SlurmV0042DeleteJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0042DeleteJobsResponse, error)

	// SlurmV0042GetJobsWithResponse request
	SlurmV0042GetJobsWithResponse(ctx context.Context, params *SlurmV0042GetJobsParams, reqEditors ...RequestEditorFn) (*SlurmV0042GetJobsResponse, error)

	// SlurmV0042GetJobsStateWithResponse request
	SlurmV0042GetJobsStateWithResponse(ctx context.Context, params *SlurmV0042GetJobsStateParams, reqEditors ...RequestEditorFn) (*SlurmV0042GetJobsStateResponse, error)

	// SlurmV0042GetLicensesWithResponse request
	SlurmV0042GetLicensesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmV0042GetLicensesResponse, error)

	// SlurmV0042DeleteNodeWithResponse request
	SlurmV0042DeleteNodeWithResponse(ctx context.Context, nodeName string, reqEditors ...RequestEditorFn) (*SlurmV0042DeleteNodeResponse, error)

	// SlurmV0042GetNodeWithResponse request
	SlurmV0042GetNodeWithResponse(ctx context.Context, nodeName string, params *SlurmV0042GetNodeParams, reqEditors ...RequestEditorFn) (*SlurmV0042GetNodeResponse, error)

	// SlurmV0042PostNodeWithBodyWithResponse request with any body
	SlurmV0042PostNodeWithBodyWithResponse(ctx context.Context, nodeName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0042PostNodeResponse, error)

	SlurmV0042PostNodeWithResponse(ctx context.Context, nodeName string, body SlurmV0042PostNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0042PostNodeResponse, error)

	// SlurmV0042GetNodesWithResponse request
	SlurmV0042GetNodesWithResponse(ctx context.Context, params *SlurmV0042GetNodesParams, reqEditors ...RequestEditorFn) (*SlurmV0042GetNodesResponse, error)

	// SlurmV0042PostNodesWithBodyWithResponse request with any body
	SlurmV0042PostNodesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0042PostNodesResponse, error)

	SlurmV0042PostNodesWithResponse(ctx context.Context, body SlurmV0042PostNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0042PostNodesResponse, error)

	// SlurmV0042GetPartitionWithResponse request
	SlurmV0042GetPartitionWithResponse(ctx context.Context, partitionName string, params *SlurmV0042GetPartitionParams, reqEditors ...RequestEditorFn) (*SlurmV0042GetPartitionResponse, error)

	// SlurmV0042GetPartitionsWithResponse request
	SlurmV0042GetPartitionsWithResponse(ctx context.Context, params *SlurmV0042GetPartitionsParams, reqEditors ...RequestEditorFn) (*SlurmV0042GetPartitionsResponse, error)

	// SlurmV0042GetPingWithResponse request
	SlurmV0042GetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmV0042GetPingResponse, error)

	// SlurmV0042GetReconfigureWithResponse request
	SlurmV0042GetReconfigureWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmV0042GetReconfigureResponse, error)

	// SlurmV0042GetReservationWithResponse request
	SlurmV0042GetReservationWithResponse(ctx context.Context, reservationName string, params *SlurmV0042GetReservationParams, reqEditors ...RequestEditorFn) (*SlurmV0042GetReservationResponse, error)

	// SlurmV0042GetReservationsWithResponse request
	SlurmV0042GetReservationsWithResponse(ctx context.Context, params *SlurmV0042GetReservationsParams, reqEditors ...RequestEditorFn) (*SlurmV0042GetReservationsResponse, error)

	// SlurmV0042GetSharesWithResponse request
	SlurmV0042GetSharesWithResponse(ctx context.Context, params *SlurmV0042GetSharesParams, reqEditors ...RequestEditorFn) (*SlurmV0042GetSharesResponse, error)

	// SlurmdbV0042DeleteAccountWithResponse request
	SlurmdbV0042DeleteAccountWithResponse(ctx context.Context, accountName string, reqEditors ...RequestEditorFn) (*SlurmdbV0042DeleteAccountResponse, error)

	// SlurmdbV0042GetAccountWithResponse request
	SlurmdbV0042GetAccountWithResponse(ctx context.Context, accountName string, params *SlurmdbV0042GetAccountParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetAccountResponse, error)

	// SlurmdbV0042GetAccountsWithResponse request
	SlurmdbV0042GetAccountsWithResponse(ctx context.Context, params *SlurmdbV0042GetAccountsParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetAccountsResponse, error)

	// SlurmdbV0042PostAccountsWithBodyWithResponse request with any body
	SlurmdbV0042PostAccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostAccountsResponse, error)

	SlurmdbV0042PostAccountsWithResponse(ctx context.Context, body SlurmdbV0042PostAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostAccountsResponse, error)

	// SlurmdbV0042PostAccountsAssociationWithBodyWithResponse request with any body
	SlurmdbV0042PostAccountsAssociationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostAccountsAssociationResponse, error)

	SlurmdbV0042PostAccountsAssociationWithResponse(ctx context.Context, body SlurmdbV0042PostAccountsAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostAccountsAssociationResponse, error)

	// SlurmdbV0042DeleteAssociationWithResponse request
	SlurmdbV0042DeleteAssociationWithResponse(ctx context.Context, params *SlurmdbV0042DeleteAssociationParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042DeleteAssociationResponse, error)

	// SlurmdbV0042GetAssociationWithResponse request
	SlurmdbV0042GetAssociationWithResponse(ctx context.Context, params *SlurmdbV0042GetAssociationParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetAssociationResponse, error)

	// SlurmdbV0042DeleteAssociationsWithResponse request
	SlurmdbV0042DeleteAssociationsWithResponse(ctx context.Context, params *SlurmdbV0042DeleteAssociationsParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042DeleteAssociationsResponse, error)

	// SlurmdbV0042GetAssociationsWithResponse request
	SlurmdbV0042GetAssociationsWithResponse(ctx context.Context, params *SlurmdbV0042GetAssociationsParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetAssociationsResponse, error)

	// SlurmdbV0042PostAssociationsWithBodyWithResponse request with any body
	SlurmdbV0042PostAssociationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostAssociationsResponse, error)

	SlurmdbV0042PostAssociationsWithResponse(ctx context.Context, body SlurmdbV0042PostAssociationsJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostAssociationsResponse, error)

	// SlurmdbV0042DeleteClusterWithResponse request
	SlurmdbV0042DeleteClusterWithResponse(ctx context.Context, clusterName string, params *SlurmdbV0042DeleteClusterParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042DeleteClusterResponse, error)

	// SlurmdbV0042GetClusterWithResponse request
	SlurmdbV0042GetClusterWithResponse(ctx context.Context, clusterName string, params *SlurmdbV0042GetClusterParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetClusterResponse, error)

	// SlurmdbV0042GetClustersWithResponse request
	SlurmdbV0042GetClustersWithResponse(ctx context.Context, params *SlurmdbV0042GetClustersParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetClustersResponse, error)

	// SlurmdbV0042PostClustersWithBodyWithResponse request with any body
	SlurmdbV0042PostClustersWithBodyWithResponse(ctx context.Context, params *SlurmdbV0042PostClustersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostClustersResponse, error)

	SlurmdbV0042PostClustersWithResponse(ctx context.Context, params *SlurmdbV0042PostClustersParams, body SlurmdbV0042PostClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostClustersResponse, error)

	// SlurmdbV0042GetConfigWithResponse request
	SlurmdbV0042GetConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetConfigResponse, error)

	// SlurmdbV0042PostConfigWithBodyWithResponse request with any body
	SlurmdbV0042PostConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostConfigResponse, error)

	SlurmdbV0042PostConfigWithResponse(ctx context.Context, body SlurmdbV0042PostConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostConfigResponse, error)

	// SlurmdbV0042GetDiagWithResponse request
	SlurmdbV0042GetDiagWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetDiagResponse, error)

	// SlurmdbV0042GetInstanceWithResponse request
	SlurmdbV0042GetInstanceWithResponse(ctx context.Context, params *SlurmdbV0042GetInstanceParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetInstanceResponse, error)

	// SlurmdbV0042GetInstancesWithResponse request
	SlurmdbV0042GetInstancesWithResponse(ctx context.Context, params *SlurmdbV0042GetInstancesParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetInstancesResponse, error)

	// SlurmdbV0042GetJobWithResponse request
	SlurmdbV0042GetJobWithResponse(ctx context.Context, jobId string, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetJobResponse, error)

	// SlurmdbV0042GetJobsWithResponse request
	SlurmdbV0042GetJobsWithResponse(ctx context.Context, params *SlurmdbV0042GetJobsParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetJobsResponse, error)

	// SlurmdbV0042GetPingWithResponse request
	SlurmdbV0042GetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetPingResponse, error)

	// SlurmdbV0042GetQosWithResponse request
	SlurmdbV0042GetQosWithResponse(ctx context.Context, params *SlurmdbV0042GetQosParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetQosResponse, error)

	// SlurmdbV0042PostQosWithBodyWithResponse request with any body
	SlurmdbV0042PostQosWithBodyWithResponse(ctx context.Context, params *SlurmdbV0042PostQosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostQosResponse, error)

	SlurmdbV0042PostQosWithResponse(ctx context.Context, params *SlurmdbV0042PostQosParams, body SlurmdbV0042PostQosJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostQosResponse, error)

	// SlurmdbV0042DeleteSingleQosWithResponse request
	SlurmdbV0042DeleteSingleQosWithResponse(ctx context.Context, qos string, reqEditors ...RequestEditorFn) (*SlurmdbV0042DeleteSingleQosResponse, error)

	// SlurmdbV0042GetSingleQosWithResponse request
	SlurmdbV0042GetSingleQosWithResponse(ctx context.Context, qos string, params *SlurmdbV0042GetSingleQosParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetSingleQosResponse, error)

	// SlurmdbV0042GetTresWithResponse request
	SlurmdbV0042GetTresWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetTresResponse, error)

	// SlurmdbV0042PostTresWithBodyWithResponse request with any body
	SlurmdbV0042PostTresWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostTresResponse, error)

	SlurmdbV0042PostTresWithResponse(ctx context.Context, body SlurmdbV0042PostTresJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostTresResponse, error)

	// SlurmdbV0042DeleteUserWithResponse request
	SlurmdbV0042DeleteUserWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*SlurmdbV0042DeleteUserResponse, error)

	// SlurmdbV0042GetUserWithResponse request
	SlurmdbV0042GetUserWithResponse(ctx context.Context, name string, params *SlurmdbV0042GetUserParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetUserResponse, error)

	// SlurmdbV0042GetUsersWithResponse request
	SlurmdbV0042GetUsersWithResponse(ctx context.Context, params *SlurmdbV0042GetUsersParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetUsersResponse, error)

	// SlurmdbV0042PostUsersWithBodyWithResponse request with any body
	SlurmdbV0042PostUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostUsersResponse, error)

	SlurmdbV0042PostUsersWithResponse(ctx context.Context, body SlurmdbV0042PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostUsersResponse, error)

	// SlurmdbV0042PostUsersAssociationWithBodyWithResponse request with any body
	SlurmdbV0042PostUsersAssociationWithBodyWithResponse(ctx context.Context, params *SlurmdbV0042PostUsersAssociationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostUsersAssociationResponse, error)

	SlurmdbV0042PostUsersAssociationWithResponse(ctx context.Context, params *SlurmdbV0042PostUsersAssociationParams, body SlurmdbV0042PostUsersAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostUsersAssociationResponse, error)

	// SlurmdbV0042DeleteWckeyWithResponse request
	SlurmdbV0042DeleteWckeyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SlurmdbV0042DeleteWckeyResponse, error)

	// SlurmdbV0042GetWckeyWithResponse request
	SlurmdbV0042GetWckeyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetWckeyResponse, error)

	// SlurmdbV0042GetWckeysWithResponse request
	SlurmdbV0042GetWckeysWithResponse(ctx context.Context, params *SlurmdbV0042GetWckeysParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetWckeysResponse, error)

	// SlurmdbV0042PostWckeysWithBodyWithResponse request with any body
	SlurmdbV0042PostWckeysWithBodyWithResponse(ctx context.Context, params *SlurmdbV0042PostWckeysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostWckeysResponse, error)

	SlurmdbV0042PostWckeysWithResponse(ctx context.Context, params *SlurmdbV0042PostWckeysParams, body SlurmdbV0042PostWckeysJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostWckeysResponse, error)
}

type SlurmV0042GetDiagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiDiagResp
	JSONDefault  *V0042OpenapiDiagResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0042GetDiagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0042GetDiagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0042PostJobAllocateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiJobAllocResp
	JSONDefault  *V0042OpenapiJobAllocResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0042PostJobAllocateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0042PostJobAllocateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0042PostJobSubmitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiJobSubmitResponse
	JSONDefault  *V0042OpenapiJobSubmitResponse
}

// Status returns HTTPResponse.Status
func (r SlurmV0042PostJobSubmitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0042PostJobSubmitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0042DeleteJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiKillJobResp
	JSONDefault  *V0042OpenapiKillJobResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0042DeleteJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0042DeleteJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0042GetJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiJobInfoResp
	JSONDefault  *V0042OpenapiJobInfoResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0042GetJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0042GetJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0042PostJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiJobPostResponse
	JSONDefault  *V0042OpenapiJobPostResponse
}

// Status returns HTTPResponse.Status
func (r SlurmV0042PostJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0042PostJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0042DeleteJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiKillJobsResp
	JSONDefault  *V0042OpenapiKillJobsResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0042DeleteJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0042DeleteJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0042GetJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiJobInfoResp
	JSONDefault  *V0042OpenapiJobInfoResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0042GetJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0042GetJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0042GetJobsStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiJobInfoResp
	JSONDefault  *V0042OpenapiJobInfoResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0042GetJobsStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0042GetJobsStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0042GetLicensesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiLicensesResp
	JSONDefault  *V0042OpenapiLicensesResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0042GetLicensesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0042GetLicensesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0042DeleteNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiResp
	JSONDefault  *V0042OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0042DeleteNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0042DeleteNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0042GetNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiNodesResp
	JSONDefault  *V0042OpenapiNodesResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0042GetNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0042GetNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0042PostNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiResp
	JSONDefault  *V0042OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0042PostNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0042PostNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0042GetNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiNodesResp
	JSONDefault  *V0042OpenapiNodesResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0042GetNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0042GetNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0042PostNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiResp
	JSONDefault  *V0042OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0042PostNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0042PostNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0042GetPartitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiPartitionResp
	JSONDefault  *V0042OpenapiPartitionResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0042GetPartitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0042GetPartitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0042GetPartitionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiPartitionResp
	JSONDefault  *V0042OpenapiPartitionResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0042GetPartitionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0042GetPartitionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0042GetPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiPingArrayResp
	JSONDefault  *V0042OpenapiPingArrayResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0042GetPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0042GetPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0042GetReconfigureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiResp
	JSONDefault  *V0042OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0042GetReconfigureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0042GetReconfigureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0042GetReservationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiReservationResp
	JSONDefault  *V0042OpenapiReservationResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0042GetReservationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0042GetReservationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0042GetReservationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiReservationResp
	JSONDefault  *V0042OpenapiReservationResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0042GetReservationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0042GetReservationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmV0042GetSharesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiSharesResp
	JSONDefault  *V0042OpenapiSharesResp
}

// Status returns HTTPResponse.Status
func (r SlurmV0042GetSharesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmV0042GetSharesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042DeleteAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiAccountsRemovedResp
	JSONDefault  *V0042OpenapiAccountsRemovedResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042DeleteAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042DeleteAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042GetAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiAccountsResp
	JSONDefault  *V0042OpenapiAccountsResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042GetAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042GetAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042GetAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiAccountsResp
	JSONDefault  *V0042OpenapiAccountsResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042GetAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042GetAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042PostAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiResp
	JSONDefault  *V0042OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042PostAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042PostAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042PostAccountsAssociationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiAccountsAddCondRespStr
	JSONDefault  *V0042OpenapiAccountsAddCondRespStr
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042PostAccountsAssociationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042PostAccountsAssociationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042DeleteAssociationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiAssocsRemovedResp
	JSONDefault  *V0042OpenapiAssocsRemovedResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042DeleteAssociationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042DeleteAssociationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042GetAssociationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiAssocsResp
	JSONDefault  *V0042OpenapiAssocsResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042GetAssociationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042GetAssociationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042DeleteAssociationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiAssocsRemovedResp
	JSONDefault  *V0042OpenapiAssocsRemovedResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042DeleteAssociationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042DeleteAssociationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042GetAssociationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiAssocsResp
	JSONDefault  *V0042OpenapiAssocsResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042GetAssociationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042GetAssociationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042PostAssociationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiResp
	JSONDefault  *V0042OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042PostAssociationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042PostAssociationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042DeleteClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiClustersRemovedResp
	JSONDefault  *V0042OpenapiClustersRemovedResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042DeleteClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042DeleteClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042GetClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiClustersResp
	JSONDefault  *V0042OpenapiClustersResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042GetClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042GetClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042GetClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiClustersResp
	JSONDefault  *V0042OpenapiClustersResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042GetClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042GetClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042PostClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiResp
	JSONDefault  *V0042OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042PostClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042PostClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042GetConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiSlurmdbdConfigResp
	JSONDefault  *V0042OpenapiSlurmdbdConfigResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042GetConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042GetConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042PostConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiResp
	JSONDefault  *V0042OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042PostConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042PostConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042GetDiagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiSlurmdbdStatsResp
	JSONDefault  *V0042OpenapiSlurmdbdStatsResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042GetDiagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042GetDiagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042GetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiInstancesResp
	JSONDefault  *V0042OpenapiInstancesResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042GetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042GetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042GetInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiInstancesResp
	JSONDefault  *V0042OpenapiInstancesResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042GetInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042GetInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042GetJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiSlurmdbdJobsResp
	JSONDefault  *V0042OpenapiSlurmdbdJobsResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042GetJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042GetJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042GetJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiSlurmdbdJobsResp
	JSONDefault  *V0042OpenapiSlurmdbdJobsResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042GetJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042GetJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042GetPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiSlurmdbdPingResp
	JSONDefault  *V0042OpenapiSlurmdbdPingResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042GetPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042GetPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042GetQosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiSlurmdbdQosResp
	JSONDefault  *V0042OpenapiSlurmdbdQosResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042GetQosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042GetQosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042PostQosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiResp
	JSONDefault  *V0042OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042PostQosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042PostQosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042DeleteSingleQosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiSlurmdbdQosRemovedResp
	JSONDefault  *V0042OpenapiSlurmdbdQosRemovedResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042DeleteSingleQosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042DeleteSingleQosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042GetSingleQosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiSlurmdbdQosResp
	JSONDefault  *V0042OpenapiSlurmdbdQosResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042GetSingleQosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042GetSingleQosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042GetTresResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiTresResp
	JSONDefault  *V0042OpenapiTresResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042GetTresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042GetTresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042PostTresResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiResp
	JSONDefault  *V0042OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042PostTresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042PostTresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042DeleteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiResp
	JSONDefault  *V0042OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042DeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042DeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiUsersResp
	JSONDefault  *V0042OpenapiUsersResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiUsersResp
	JSONDefault  *V0042OpenapiUsersResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042PostUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiResp
	JSONDefault  *V0042OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042PostUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042PostUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042PostUsersAssociationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiUsersAddCondRespStr
	JSONDefault  *V0042OpenapiUsersAddCondRespStr
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042PostUsersAssociationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042PostUsersAssociationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042DeleteWckeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiWckeyRemovedResp
	JSONDefault  *V0042OpenapiWckeyRemovedResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042DeleteWckeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042DeleteWckeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042GetWckeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiWckeyResp
	JSONDefault  *V0042OpenapiWckeyResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042GetWckeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042GetWckeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042GetWckeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiWckeyResp
	JSONDefault  *V0042OpenapiWckeyResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042GetWckeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042GetWckeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlurmdbV0042PostWckeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V0042OpenapiResp
	JSONDefault  *V0042OpenapiResp
}

// Status returns HTTPResponse.Status
func (r SlurmdbV0042PostWckeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlurmdbV0042PostWckeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// SlurmV0042GetDiagWithResponse request returning *SlurmV0042GetDiagResponse
func (c *ClientWithResponses) SlurmV0042GetDiagWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmV0042GetDiagResponse, error) {
	rsp, err := c.SlurmV0042GetDiag(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0042GetDiagResponse(rsp)
}

// SlurmV0042PostJobAllocateWithBodyWithResponse request with arbitrary body returning *SlurmV0042PostJobAllocateResponse
func (c *ClientWithResponses) SlurmV0042PostJobAllocateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0042PostJobAllocateResponse, error) {
	rsp, err := c.SlurmV0042PostJobAllocateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0042PostJobAllocateResponse(rsp)
}

func (c *ClientWithResponses) SlurmV0042PostJobAllocateWithResponse(ctx context.Context, body SlurmV0042PostJobAllocateJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0042PostJobAllocateResponse, error) {
	rsp, err := c.SlurmV0042PostJobAllocate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0042PostJobAllocateResponse(rsp)
}

// SlurmV0042PostJobSubmitWithBodyWithResponse request with arbitrary body returning *SlurmV0042PostJobSubmitResponse
func (c *ClientWithResponses) SlurmV0042PostJobSubmitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0042PostJobSubmitResponse, error) {
	rsp, err := c.SlurmV0042PostJobSubmitWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0042PostJobSubmitResponse(rsp)
}

func (c *ClientWithResponses) SlurmV0042PostJobSubmitWithResponse(ctx context.Context, body SlurmV0042PostJobSubmitJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0042PostJobSubmitResponse, error) {
	rsp, err := c.SlurmV0042PostJobSubmit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0042PostJobSubmitResponse(rsp)
}

// SlurmV0042DeleteJobWithResponse request returning *SlurmV0042DeleteJobResponse
func (c *ClientWithResponses) SlurmV0042DeleteJobWithResponse(ctx context.Context, jobId string, params *SlurmV0042DeleteJobParams, reqEditors ...RequestEditorFn) (*SlurmV0042DeleteJobResponse, error) {
	rsp, err := c.SlurmV0042DeleteJob(ctx, jobId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0042DeleteJobResponse(rsp)
}

// SlurmV0042GetJobWithResponse request returning *SlurmV0042GetJobResponse
func (c *ClientWithResponses) SlurmV0042GetJobWithResponse(ctx context.Context, jobId string, params *SlurmV0042GetJobParams, reqEditors ...RequestEditorFn) (*SlurmV0042GetJobResponse, error) {
	rsp, err := c.SlurmV0042GetJob(ctx, jobId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0042GetJobResponse(rsp)
}

// SlurmV0042PostJobWithBodyWithResponse request with arbitrary body returning *SlurmV0042PostJobResponse
func (c *ClientWithResponses) SlurmV0042PostJobWithBodyWithResponse(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0042PostJobResponse, error) {
	rsp, err := c.SlurmV0042PostJobWithBody(ctx, jobId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0042PostJobResponse(rsp)
}

func (c *ClientWithResponses) SlurmV0042PostJobWithResponse(ctx context.Context, jobId string, body SlurmV0042PostJobJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0042PostJobResponse, error) {
	rsp, err := c.SlurmV0042PostJob(ctx, jobId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0042PostJobResponse(rsp)
}

// SlurmV0042DeleteJobsWithBodyWithResponse request with arbitrary body returning *SlurmV0042DeleteJobsResponse
func (c *ClientWithResponses) SlurmV0042DeleteJobsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0042DeleteJobsResponse, error) {
	rsp, err := c.SlurmV0042DeleteJobsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0042DeleteJobsResponse(rsp)
}

func (c *ClientWithResponses) SlurmV0042DeleteJobsWithResponse(ctx context.Context, body SlurmV0042DeleteJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0042DeleteJobsResponse, error) {
	rsp, err := c.SlurmV0042DeleteJobs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0042DeleteJobsResponse(rsp)
}

// SlurmV0042GetJobsWithResponse request returning *SlurmV0042GetJobsResponse
func (c *ClientWithResponses) SlurmV0042GetJobsWithResponse(ctx context.Context, params *SlurmV0042GetJobsParams, reqEditors ...RequestEditorFn) (*SlurmV0042GetJobsResponse, error) {
	rsp, err := c.SlurmV0042GetJobs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0042GetJobsResponse(rsp)
}

// SlurmV0042GetJobsStateWithResponse request returning *SlurmV0042GetJobsStateResponse
func (c *ClientWithResponses) SlurmV0042GetJobsStateWithResponse(ctx context.Context, params *SlurmV0042GetJobsStateParams, reqEditors ...RequestEditorFn) (*SlurmV0042GetJobsStateResponse, error) {
	rsp, err := c.SlurmV0042GetJobsState(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0042GetJobsStateResponse(rsp)
}

// SlurmV0042GetLicensesWithResponse request returning *SlurmV0042GetLicensesResponse
func (c *ClientWithResponses) SlurmV0042GetLicensesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmV0042GetLicensesResponse, error) {
	rsp, err := c.SlurmV0042GetLicenses(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0042GetLicensesResponse(rsp)
}

// SlurmV0042DeleteNodeWithResponse request returning *SlurmV0042DeleteNodeResponse
func (c *ClientWithResponses) SlurmV0042DeleteNodeWithResponse(ctx context.Context, nodeName string, reqEditors ...RequestEditorFn) (*SlurmV0042DeleteNodeResponse, error) {
	rsp, err := c.SlurmV0042DeleteNode(ctx, nodeName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0042DeleteNodeResponse(rsp)
}

// SlurmV0042GetNodeWithResponse request returning *SlurmV0042GetNodeResponse
func (c *ClientWithResponses) SlurmV0042GetNodeWithResponse(ctx context.Context, nodeName string, params *SlurmV0042GetNodeParams, reqEditors ...RequestEditorFn) (*SlurmV0042GetNodeResponse, error) {
	rsp, err := c.SlurmV0042GetNode(ctx, nodeName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0042GetNodeResponse(rsp)
}

// SlurmV0042PostNodeWithBodyWithResponse request with arbitrary body returning *SlurmV0042PostNodeResponse
func (c *ClientWithResponses) SlurmV0042PostNodeWithBodyWithResponse(ctx context.Context, nodeName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0042PostNodeResponse, error) {
	rsp, err := c.SlurmV0042PostNodeWithBody(ctx, nodeName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0042PostNodeResponse(rsp)
}

func (c *ClientWithResponses) SlurmV0042PostNodeWithResponse(ctx context.Context, nodeName string, body SlurmV0042PostNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0042PostNodeResponse, error) {
	rsp, err := c.SlurmV0042PostNode(ctx, nodeName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0042PostNodeResponse(rsp)
}

// SlurmV0042GetNodesWithResponse request returning *SlurmV0042GetNodesResponse
func (c *ClientWithResponses) SlurmV0042GetNodesWithResponse(ctx context.Context, params *SlurmV0042GetNodesParams, reqEditors ...RequestEditorFn) (*SlurmV0042GetNodesResponse, error) {
	rsp, err := c.SlurmV0042GetNodes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0042GetNodesResponse(rsp)
}

// SlurmV0042PostNodesWithBodyWithResponse request with arbitrary body returning *SlurmV0042PostNodesResponse
func (c *ClientWithResponses) SlurmV0042PostNodesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmV0042PostNodesResponse, error) {
	rsp, err := c.SlurmV0042PostNodesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0042PostNodesResponse(rsp)
}

func (c *ClientWithResponses) SlurmV0042PostNodesWithResponse(ctx context.Context, body SlurmV0042PostNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmV0042PostNodesResponse, error) {
	rsp, err := c.SlurmV0042PostNodes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0042PostNodesResponse(rsp)
}

// SlurmV0042GetPartitionWithResponse request returning *SlurmV0042GetPartitionResponse
func (c *ClientWithResponses) SlurmV0042GetPartitionWithResponse(ctx context.Context, partitionName string, params *SlurmV0042GetPartitionParams, reqEditors ...RequestEditorFn) (*SlurmV0042GetPartitionResponse, error) {
	rsp, err := c.SlurmV0042GetPartition(ctx, partitionName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0042GetPartitionResponse(rsp)
}

// SlurmV0042GetPartitionsWithResponse request returning *SlurmV0042GetPartitionsResponse
func (c *ClientWithResponses) SlurmV0042GetPartitionsWithResponse(ctx context.Context, params *SlurmV0042GetPartitionsParams, reqEditors ...RequestEditorFn) (*SlurmV0042GetPartitionsResponse, error) {
	rsp, err := c.SlurmV0042GetPartitions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0042GetPartitionsResponse(rsp)
}

// SlurmV0042GetPingWithResponse request returning *SlurmV0042GetPingResponse
func (c *ClientWithResponses) SlurmV0042GetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmV0042GetPingResponse, error) {
	rsp, err := c.SlurmV0042GetPing(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0042GetPingResponse(rsp)
}

// SlurmV0042GetReconfigureWithResponse request returning *SlurmV0042GetReconfigureResponse
func (c *ClientWithResponses) SlurmV0042GetReconfigureWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmV0042GetReconfigureResponse, error) {
	rsp, err := c.SlurmV0042GetReconfigure(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0042GetReconfigureResponse(rsp)
}

// SlurmV0042GetReservationWithResponse request returning *SlurmV0042GetReservationResponse
func (c *ClientWithResponses) SlurmV0042GetReservationWithResponse(ctx context.Context, reservationName string, params *SlurmV0042GetReservationParams, reqEditors ...RequestEditorFn) (*SlurmV0042GetReservationResponse, error) {
	rsp, err := c.SlurmV0042GetReservation(ctx, reservationName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0042GetReservationResponse(rsp)
}

// SlurmV0042GetReservationsWithResponse request returning *SlurmV0042GetReservationsResponse
func (c *ClientWithResponses) SlurmV0042GetReservationsWithResponse(ctx context.Context, params *SlurmV0042GetReservationsParams, reqEditors ...RequestEditorFn) (*SlurmV0042GetReservationsResponse, error) {
	rsp, err := c.SlurmV0042GetReservations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0042GetReservationsResponse(rsp)
}

// SlurmV0042GetSharesWithResponse request returning *SlurmV0042GetSharesResponse
func (c *ClientWithResponses) SlurmV0042GetSharesWithResponse(ctx context.Context, params *SlurmV0042GetSharesParams, reqEditors ...RequestEditorFn) (*SlurmV0042GetSharesResponse, error) {
	rsp, err := c.SlurmV0042GetShares(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmV0042GetSharesResponse(rsp)
}

// SlurmdbV0042DeleteAccountWithResponse request returning *SlurmdbV0042DeleteAccountResponse
func (c *ClientWithResponses) SlurmdbV0042DeleteAccountWithResponse(ctx context.Context, accountName string, reqEditors ...RequestEditorFn) (*SlurmdbV0042DeleteAccountResponse, error) {
	rsp, err := c.SlurmdbV0042DeleteAccount(ctx, accountName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042DeleteAccountResponse(rsp)
}

// SlurmdbV0042GetAccountWithResponse request returning *SlurmdbV0042GetAccountResponse
func (c *ClientWithResponses) SlurmdbV0042GetAccountWithResponse(ctx context.Context, accountName string, params *SlurmdbV0042GetAccountParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetAccountResponse, error) {
	rsp, err := c.SlurmdbV0042GetAccount(ctx, accountName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042GetAccountResponse(rsp)
}

// SlurmdbV0042GetAccountsWithResponse request returning *SlurmdbV0042GetAccountsResponse
func (c *ClientWithResponses) SlurmdbV0042GetAccountsWithResponse(ctx context.Context, params *SlurmdbV0042GetAccountsParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetAccountsResponse, error) {
	rsp, err := c.SlurmdbV0042GetAccounts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042GetAccountsResponse(rsp)
}

// SlurmdbV0042PostAccountsWithBodyWithResponse request with arbitrary body returning *SlurmdbV0042PostAccountsResponse
func (c *ClientWithResponses) SlurmdbV0042PostAccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostAccountsResponse, error) {
	rsp, err := c.SlurmdbV0042PostAccountsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042PostAccountsResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0042PostAccountsWithResponse(ctx context.Context, body SlurmdbV0042PostAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostAccountsResponse, error) {
	rsp, err := c.SlurmdbV0042PostAccounts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042PostAccountsResponse(rsp)
}

// SlurmdbV0042PostAccountsAssociationWithBodyWithResponse request with arbitrary body returning *SlurmdbV0042PostAccountsAssociationResponse
func (c *ClientWithResponses) SlurmdbV0042PostAccountsAssociationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostAccountsAssociationResponse, error) {
	rsp, err := c.SlurmdbV0042PostAccountsAssociationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042PostAccountsAssociationResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0042PostAccountsAssociationWithResponse(ctx context.Context, body SlurmdbV0042PostAccountsAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostAccountsAssociationResponse, error) {
	rsp, err := c.SlurmdbV0042PostAccountsAssociation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042PostAccountsAssociationResponse(rsp)
}

// SlurmdbV0042DeleteAssociationWithResponse request returning *SlurmdbV0042DeleteAssociationResponse
func (c *ClientWithResponses) SlurmdbV0042DeleteAssociationWithResponse(ctx context.Context, params *SlurmdbV0042DeleteAssociationParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042DeleteAssociationResponse, error) {
	rsp, err := c.SlurmdbV0042DeleteAssociation(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042DeleteAssociationResponse(rsp)
}

// SlurmdbV0042GetAssociationWithResponse request returning *SlurmdbV0042GetAssociationResponse
func (c *ClientWithResponses) SlurmdbV0042GetAssociationWithResponse(ctx context.Context, params *SlurmdbV0042GetAssociationParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetAssociationResponse, error) {
	rsp, err := c.SlurmdbV0042GetAssociation(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042GetAssociationResponse(rsp)
}

// SlurmdbV0042DeleteAssociationsWithResponse request returning *SlurmdbV0042DeleteAssociationsResponse
func (c *ClientWithResponses) SlurmdbV0042DeleteAssociationsWithResponse(ctx context.Context, params *SlurmdbV0042DeleteAssociationsParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042DeleteAssociationsResponse, error) {
	rsp, err := c.SlurmdbV0042DeleteAssociations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042DeleteAssociationsResponse(rsp)
}

// SlurmdbV0042GetAssociationsWithResponse request returning *SlurmdbV0042GetAssociationsResponse
func (c *ClientWithResponses) SlurmdbV0042GetAssociationsWithResponse(ctx context.Context, params *SlurmdbV0042GetAssociationsParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetAssociationsResponse, error) {
	rsp, err := c.SlurmdbV0042GetAssociations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042GetAssociationsResponse(rsp)
}

// SlurmdbV0042PostAssociationsWithBodyWithResponse request with arbitrary body returning *SlurmdbV0042PostAssociationsResponse
func (c *ClientWithResponses) SlurmdbV0042PostAssociationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostAssociationsResponse, error) {
	rsp, err := c.SlurmdbV0042PostAssociationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042PostAssociationsResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0042PostAssociationsWithResponse(ctx context.Context, body SlurmdbV0042PostAssociationsJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostAssociationsResponse, error) {
	rsp, err := c.SlurmdbV0042PostAssociations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042PostAssociationsResponse(rsp)
}

// SlurmdbV0042DeleteClusterWithResponse request returning *SlurmdbV0042DeleteClusterResponse
func (c *ClientWithResponses) SlurmdbV0042DeleteClusterWithResponse(ctx context.Context, clusterName string, params *SlurmdbV0042DeleteClusterParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042DeleteClusterResponse, error) {
	rsp, err := c.SlurmdbV0042DeleteCluster(ctx, clusterName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042DeleteClusterResponse(rsp)
}

// SlurmdbV0042GetClusterWithResponse request returning *SlurmdbV0042GetClusterResponse
func (c *ClientWithResponses) SlurmdbV0042GetClusterWithResponse(ctx context.Context, clusterName string, params *SlurmdbV0042GetClusterParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetClusterResponse, error) {
	rsp, err := c.SlurmdbV0042GetCluster(ctx, clusterName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042GetClusterResponse(rsp)
}

// SlurmdbV0042GetClustersWithResponse request returning *SlurmdbV0042GetClustersResponse
func (c *ClientWithResponses) SlurmdbV0042GetClustersWithResponse(ctx context.Context, params *SlurmdbV0042GetClustersParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetClustersResponse, error) {
	rsp, err := c.SlurmdbV0042GetClusters(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042GetClustersResponse(rsp)
}

// SlurmdbV0042PostClustersWithBodyWithResponse request with arbitrary body returning *SlurmdbV0042PostClustersResponse
func (c *ClientWithResponses) SlurmdbV0042PostClustersWithBodyWithResponse(ctx context.Context, params *SlurmdbV0042PostClustersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostClustersResponse, error) {
	rsp, err := c.SlurmdbV0042PostClustersWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042PostClustersResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0042PostClustersWithResponse(ctx context.Context, params *SlurmdbV0042PostClustersParams, body SlurmdbV0042PostClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostClustersResponse, error) {
	rsp, err := c.SlurmdbV0042PostClusters(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042PostClustersResponse(rsp)
}

// SlurmdbV0042GetConfigWithResponse request returning *SlurmdbV0042GetConfigResponse
func (c *ClientWithResponses) SlurmdbV0042GetConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetConfigResponse, error) {
	rsp, err := c.SlurmdbV0042GetConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042GetConfigResponse(rsp)
}

// SlurmdbV0042PostConfigWithBodyWithResponse request with arbitrary body returning *SlurmdbV0042PostConfigResponse
func (c *ClientWithResponses) SlurmdbV0042PostConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostConfigResponse, error) {
	rsp, err := c.SlurmdbV0042PostConfigWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042PostConfigResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0042PostConfigWithResponse(ctx context.Context, body SlurmdbV0042PostConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostConfigResponse, error) {
	rsp, err := c.SlurmdbV0042PostConfig(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042PostConfigResponse(rsp)
}

// SlurmdbV0042GetDiagWithResponse request returning *SlurmdbV0042GetDiagResponse
func (c *ClientWithResponses) SlurmdbV0042GetDiagWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetDiagResponse, error) {
	rsp, err := c.SlurmdbV0042GetDiag(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042GetDiagResponse(rsp)
}

// SlurmdbV0042GetInstanceWithResponse request returning *SlurmdbV0042GetInstanceResponse
func (c *ClientWithResponses) SlurmdbV0042GetInstanceWithResponse(ctx context.Context, params *SlurmdbV0042GetInstanceParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetInstanceResponse, error) {
	rsp, err := c.SlurmdbV0042GetInstance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042GetInstanceResponse(rsp)
}

// SlurmdbV0042GetInstancesWithResponse request returning *SlurmdbV0042GetInstancesResponse
func (c *ClientWithResponses) SlurmdbV0042GetInstancesWithResponse(ctx context.Context, params *SlurmdbV0042GetInstancesParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetInstancesResponse, error) {
	rsp, err := c.SlurmdbV0042GetInstances(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042GetInstancesResponse(rsp)
}

// SlurmdbV0042GetJobWithResponse request returning *SlurmdbV0042GetJobResponse
func (c *ClientWithResponses) SlurmdbV0042GetJobWithResponse(ctx context.Context, jobId string, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetJobResponse, error) {
	rsp, err := c.SlurmdbV0042GetJob(ctx, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042GetJobResponse(rsp)
}

// SlurmdbV0042GetJobsWithResponse request returning *SlurmdbV0042GetJobsResponse
func (c *ClientWithResponses) SlurmdbV0042GetJobsWithResponse(ctx context.Context, params *SlurmdbV0042GetJobsParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetJobsResponse, error) {
	rsp, err := c.SlurmdbV0042GetJobs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042GetJobsResponse(rsp)
}

// SlurmdbV0042GetPingWithResponse request returning *SlurmdbV0042GetPingResponse
func (c *ClientWithResponses) SlurmdbV0042GetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetPingResponse, error) {
	rsp, err := c.SlurmdbV0042GetPing(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042GetPingResponse(rsp)
}

// SlurmdbV0042GetQosWithResponse request returning *SlurmdbV0042GetQosResponse
func (c *ClientWithResponses) SlurmdbV0042GetQosWithResponse(ctx context.Context, params *SlurmdbV0042GetQosParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetQosResponse, error) {
	rsp, err := c.SlurmdbV0042GetQos(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042GetQosResponse(rsp)
}

// SlurmdbV0042PostQosWithBodyWithResponse request with arbitrary body returning *SlurmdbV0042PostQosResponse
func (c *ClientWithResponses) SlurmdbV0042PostQosWithBodyWithResponse(ctx context.Context, params *SlurmdbV0042PostQosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostQosResponse, error) {
	rsp, err := c.SlurmdbV0042PostQosWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042PostQosResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0042PostQosWithResponse(ctx context.Context, params *SlurmdbV0042PostQosParams, body SlurmdbV0042PostQosJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostQosResponse, error) {
	rsp, err := c.SlurmdbV0042PostQos(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042PostQosResponse(rsp)
}

// SlurmdbV0042DeleteSingleQosWithResponse request returning *SlurmdbV0042DeleteSingleQosResponse
func (c *ClientWithResponses) SlurmdbV0042DeleteSingleQosWithResponse(ctx context.Context, qos string, reqEditors ...RequestEditorFn) (*SlurmdbV0042DeleteSingleQosResponse, error) {
	rsp, err := c.SlurmdbV0042DeleteSingleQos(ctx, qos, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042DeleteSingleQosResponse(rsp)
}

// SlurmdbV0042GetSingleQosWithResponse request returning *SlurmdbV0042GetSingleQosResponse
func (c *ClientWithResponses) SlurmdbV0042GetSingleQosWithResponse(ctx context.Context, qos string, params *SlurmdbV0042GetSingleQosParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetSingleQosResponse, error) {
	rsp, err := c.SlurmdbV0042GetSingleQos(ctx, qos, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042GetSingleQosResponse(rsp)
}

// SlurmdbV0042GetTresWithResponse request returning *SlurmdbV0042GetTresResponse
func (c *ClientWithResponses) SlurmdbV0042GetTresWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetTresResponse, error) {
	rsp, err := c.SlurmdbV0042GetTres(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042GetTresResponse(rsp)
}

// SlurmdbV0042PostTresWithBodyWithResponse request with arbitrary body returning *SlurmdbV0042PostTresResponse
func (c *ClientWithResponses) SlurmdbV0042PostTresWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostTresResponse, error) {
	rsp, err := c.SlurmdbV0042PostTresWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042PostTresResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0042PostTresWithResponse(ctx context.Context, body SlurmdbV0042PostTresJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostTresResponse, error) {
	rsp, err := c.SlurmdbV0042PostTres(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042PostTresResponse(rsp)
}

// SlurmdbV0042DeleteUserWithResponse request returning *SlurmdbV0042DeleteUserResponse
func (c *ClientWithResponses) SlurmdbV0042DeleteUserWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*SlurmdbV0042DeleteUserResponse, error) {
	rsp, err := c.SlurmdbV0042DeleteUser(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042DeleteUserResponse(rsp)
}

// SlurmdbV0042GetUserWithResponse request returning *SlurmdbV0042GetUserResponse
func (c *ClientWithResponses) SlurmdbV0042GetUserWithResponse(ctx context.Context, name string, params *SlurmdbV0042GetUserParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetUserResponse, error) {
	rsp, err := c.SlurmdbV0042GetUser(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042GetUserResponse(rsp)
}

// SlurmdbV0042GetUsersWithResponse request returning *SlurmdbV0042GetUsersResponse
func (c *ClientWithResponses) SlurmdbV0042GetUsersWithResponse(ctx context.Context, params *SlurmdbV0042GetUsersParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetUsersResponse, error) {
	rsp, err := c.SlurmdbV0042GetUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042GetUsersResponse(rsp)
}

// SlurmdbV0042PostUsersWithBodyWithResponse request with arbitrary body returning *SlurmdbV0042PostUsersResponse
func (c *ClientWithResponses) SlurmdbV0042PostUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostUsersResponse, error) {
	rsp, err := c.SlurmdbV0042PostUsersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042PostUsersResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0042PostUsersWithResponse(ctx context.Context, body SlurmdbV0042PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostUsersResponse, error) {
	rsp, err := c.SlurmdbV0042PostUsers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042PostUsersResponse(rsp)
}

// SlurmdbV0042PostUsersAssociationWithBodyWithResponse request with arbitrary body returning *SlurmdbV0042PostUsersAssociationResponse
func (c *ClientWithResponses) SlurmdbV0042PostUsersAssociationWithBodyWithResponse(ctx context.Context, params *SlurmdbV0042PostUsersAssociationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostUsersAssociationResponse, error) {
	rsp, err := c.SlurmdbV0042PostUsersAssociationWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042PostUsersAssociationResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0042PostUsersAssociationWithResponse(ctx context.Context, params *SlurmdbV0042PostUsersAssociationParams, body SlurmdbV0042PostUsersAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostUsersAssociationResponse, error) {
	rsp, err := c.SlurmdbV0042PostUsersAssociation(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042PostUsersAssociationResponse(rsp)
}

// SlurmdbV0042DeleteWckeyWithResponse request returning *SlurmdbV0042DeleteWckeyResponse
func (c *ClientWithResponses) SlurmdbV0042DeleteWckeyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SlurmdbV0042DeleteWckeyResponse, error) {
	rsp, err := c.SlurmdbV0042DeleteWckey(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042DeleteWckeyResponse(rsp)
}

// SlurmdbV0042GetWckeyWithResponse request returning *SlurmdbV0042GetWckeyResponse
func (c *ClientWithResponses) SlurmdbV0042GetWckeyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetWckeyResponse, error) {
	rsp, err := c.SlurmdbV0042GetWckey(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042GetWckeyResponse(rsp)
}

// SlurmdbV0042GetWckeysWithResponse request returning *SlurmdbV0042GetWckeysResponse
func (c *ClientWithResponses) SlurmdbV0042GetWckeysWithResponse(ctx context.Context, params *SlurmdbV0042GetWckeysParams, reqEditors ...RequestEditorFn) (*SlurmdbV0042GetWckeysResponse, error) {
	rsp, err := c.SlurmdbV0042GetWckeys(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042GetWckeysResponse(rsp)
}

// SlurmdbV0042PostWckeysWithBodyWithResponse request with arbitrary body returning *SlurmdbV0042PostWckeysResponse
func (c *ClientWithResponses) SlurmdbV0042PostWckeysWithBodyWithResponse(ctx context.Context, params *SlurmdbV0042PostWckeysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostWckeysResponse, error) {
	rsp, err := c.SlurmdbV0042PostWckeysWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042PostWckeysResponse(rsp)
}

func (c *ClientWithResponses) SlurmdbV0042PostWckeysWithResponse(ctx context.Context, params *SlurmdbV0042PostWckeysParams, body SlurmdbV0042PostWckeysJSONRequestBody, reqEditors ...RequestEditorFn) (*SlurmdbV0042PostWckeysResponse, error) {
	rsp, err := c.SlurmdbV0042PostWckeys(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlurmdbV0042PostWckeysResponse(rsp)
}

// ParseSlurmV0042GetDiagResponse parses an HTTP response from a SlurmV0042GetDiagWithResponse call
func ParseSlurmV0042GetDiagResponse(rsp *http.Response) (*SlurmV0042GetDiagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0042GetDiagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiDiagResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiDiagResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0042PostJobAllocateResponse parses an HTTP response from a SlurmV0042PostJobAllocateWithResponse call
func ParseSlurmV0042PostJobAllocateResponse(rsp *http.Response) (*SlurmV0042PostJobAllocateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0042PostJobAllocateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiJobAllocResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiJobAllocResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0042PostJobSubmitResponse parses an HTTP response from a SlurmV0042PostJobSubmitWithResponse call
func ParseSlurmV0042PostJobSubmitResponse(rsp *http.Response) (*SlurmV0042PostJobSubmitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0042PostJobSubmitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiJobSubmitResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiJobSubmitResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0042DeleteJobResponse parses an HTTP response from a SlurmV0042DeleteJobWithResponse call
func ParseSlurmV0042DeleteJobResponse(rsp *http.Response) (*SlurmV0042DeleteJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0042DeleteJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiKillJobResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiKillJobResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0042GetJobResponse parses an HTTP response from a SlurmV0042GetJobWithResponse call
func ParseSlurmV0042GetJobResponse(rsp *http.Response) (*SlurmV0042GetJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0042GetJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiJobInfoResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiJobInfoResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0042PostJobResponse parses an HTTP response from a SlurmV0042PostJobWithResponse call
func ParseSlurmV0042PostJobResponse(rsp *http.Response) (*SlurmV0042PostJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0042PostJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiJobPostResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiJobPostResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0042DeleteJobsResponse parses an HTTP response from a SlurmV0042DeleteJobsWithResponse call
func ParseSlurmV0042DeleteJobsResponse(rsp *http.Response) (*SlurmV0042DeleteJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0042DeleteJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiKillJobsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiKillJobsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0042GetJobsResponse parses an HTTP response from a SlurmV0042GetJobsWithResponse call
func ParseSlurmV0042GetJobsResponse(rsp *http.Response) (*SlurmV0042GetJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0042GetJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiJobInfoResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiJobInfoResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0042GetJobsStateResponse parses an HTTP response from a SlurmV0042GetJobsStateWithResponse call
func ParseSlurmV0042GetJobsStateResponse(rsp *http.Response) (*SlurmV0042GetJobsStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0042GetJobsStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiJobInfoResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiJobInfoResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0042GetLicensesResponse parses an HTTP response from a SlurmV0042GetLicensesWithResponse call
func ParseSlurmV0042GetLicensesResponse(rsp *http.Response) (*SlurmV0042GetLicensesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0042GetLicensesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiLicensesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiLicensesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0042DeleteNodeResponse parses an HTTP response from a SlurmV0042DeleteNodeWithResponse call
func ParseSlurmV0042DeleteNodeResponse(rsp *http.Response) (*SlurmV0042DeleteNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0042DeleteNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0042GetNodeResponse parses an HTTP response from a SlurmV0042GetNodeWithResponse call
func ParseSlurmV0042GetNodeResponse(rsp *http.Response) (*SlurmV0042GetNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0042GetNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiNodesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiNodesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0042PostNodeResponse parses an HTTP response from a SlurmV0042PostNodeWithResponse call
func ParseSlurmV0042PostNodeResponse(rsp *http.Response) (*SlurmV0042PostNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0042PostNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0042GetNodesResponse parses an HTTP response from a SlurmV0042GetNodesWithResponse call
func ParseSlurmV0042GetNodesResponse(rsp *http.Response) (*SlurmV0042GetNodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0042GetNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiNodesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiNodesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0042PostNodesResponse parses an HTTP response from a SlurmV0042PostNodesWithResponse call
func ParseSlurmV0042PostNodesResponse(rsp *http.Response) (*SlurmV0042PostNodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0042PostNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0042GetPartitionResponse parses an HTTP response from a SlurmV0042GetPartitionWithResponse call
func ParseSlurmV0042GetPartitionResponse(rsp *http.Response) (*SlurmV0042GetPartitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0042GetPartitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiPartitionResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiPartitionResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0042GetPartitionsResponse parses an HTTP response from a SlurmV0042GetPartitionsWithResponse call
func ParseSlurmV0042GetPartitionsResponse(rsp *http.Response) (*SlurmV0042GetPartitionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0042GetPartitionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiPartitionResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiPartitionResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0042GetPingResponse parses an HTTP response from a SlurmV0042GetPingWithResponse call
func ParseSlurmV0042GetPingResponse(rsp *http.Response) (*SlurmV0042GetPingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0042GetPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiPingArrayResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiPingArrayResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0042GetReconfigureResponse parses an HTTP response from a SlurmV0042GetReconfigureWithResponse call
func ParseSlurmV0042GetReconfigureResponse(rsp *http.Response) (*SlurmV0042GetReconfigureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0042GetReconfigureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0042GetReservationResponse parses an HTTP response from a SlurmV0042GetReservationWithResponse call
func ParseSlurmV0042GetReservationResponse(rsp *http.Response) (*SlurmV0042GetReservationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0042GetReservationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiReservationResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiReservationResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0042GetReservationsResponse parses an HTTP response from a SlurmV0042GetReservationsWithResponse call
func ParseSlurmV0042GetReservationsResponse(rsp *http.Response) (*SlurmV0042GetReservationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0042GetReservationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiReservationResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiReservationResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmV0042GetSharesResponse parses an HTTP response from a SlurmV0042GetSharesWithResponse call
func ParseSlurmV0042GetSharesResponse(rsp *http.Response) (*SlurmV0042GetSharesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmV0042GetSharesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiSharesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiSharesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042DeleteAccountResponse parses an HTTP response from a SlurmdbV0042DeleteAccountWithResponse call
func ParseSlurmdbV0042DeleteAccountResponse(rsp *http.Response) (*SlurmdbV0042DeleteAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042DeleteAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiAccountsRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiAccountsRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042GetAccountResponse parses an HTTP response from a SlurmdbV0042GetAccountWithResponse call
func ParseSlurmdbV0042GetAccountResponse(rsp *http.Response) (*SlurmdbV0042GetAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042GetAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiAccountsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiAccountsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042GetAccountsResponse parses an HTTP response from a SlurmdbV0042GetAccountsWithResponse call
func ParseSlurmdbV0042GetAccountsResponse(rsp *http.Response) (*SlurmdbV0042GetAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042GetAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiAccountsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiAccountsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042PostAccountsResponse parses an HTTP response from a SlurmdbV0042PostAccountsWithResponse call
func ParseSlurmdbV0042PostAccountsResponse(rsp *http.Response) (*SlurmdbV0042PostAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042PostAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042PostAccountsAssociationResponse parses an HTTP response from a SlurmdbV0042PostAccountsAssociationWithResponse call
func ParseSlurmdbV0042PostAccountsAssociationResponse(rsp *http.Response) (*SlurmdbV0042PostAccountsAssociationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042PostAccountsAssociationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiAccountsAddCondRespStr
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiAccountsAddCondRespStr
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042DeleteAssociationResponse parses an HTTP response from a SlurmdbV0042DeleteAssociationWithResponse call
func ParseSlurmdbV0042DeleteAssociationResponse(rsp *http.Response) (*SlurmdbV0042DeleteAssociationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042DeleteAssociationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiAssocsRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiAssocsRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042GetAssociationResponse parses an HTTP response from a SlurmdbV0042GetAssociationWithResponse call
func ParseSlurmdbV0042GetAssociationResponse(rsp *http.Response) (*SlurmdbV0042GetAssociationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042GetAssociationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiAssocsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiAssocsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042DeleteAssociationsResponse parses an HTTP response from a SlurmdbV0042DeleteAssociationsWithResponse call
func ParseSlurmdbV0042DeleteAssociationsResponse(rsp *http.Response) (*SlurmdbV0042DeleteAssociationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042DeleteAssociationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiAssocsRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiAssocsRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042GetAssociationsResponse parses an HTTP response from a SlurmdbV0042GetAssociationsWithResponse call
func ParseSlurmdbV0042GetAssociationsResponse(rsp *http.Response) (*SlurmdbV0042GetAssociationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042GetAssociationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiAssocsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiAssocsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042PostAssociationsResponse parses an HTTP response from a SlurmdbV0042PostAssociationsWithResponse call
func ParseSlurmdbV0042PostAssociationsResponse(rsp *http.Response) (*SlurmdbV0042PostAssociationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042PostAssociationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042DeleteClusterResponse parses an HTTP response from a SlurmdbV0042DeleteClusterWithResponse call
func ParseSlurmdbV0042DeleteClusterResponse(rsp *http.Response) (*SlurmdbV0042DeleteClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042DeleteClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiClustersRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiClustersRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042GetClusterResponse parses an HTTP response from a SlurmdbV0042GetClusterWithResponse call
func ParseSlurmdbV0042GetClusterResponse(rsp *http.Response) (*SlurmdbV0042GetClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042GetClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiClustersResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiClustersResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042GetClustersResponse parses an HTTP response from a SlurmdbV0042GetClustersWithResponse call
func ParseSlurmdbV0042GetClustersResponse(rsp *http.Response) (*SlurmdbV0042GetClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042GetClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiClustersResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiClustersResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042PostClustersResponse parses an HTTP response from a SlurmdbV0042PostClustersWithResponse call
func ParseSlurmdbV0042PostClustersResponse(rsp *http.Response) (*SlurmdbV0042PostClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042PostClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042GetConfigResponse parses an HTTP response from a SlurmdbV0042GetConfigWithResponse call
func ParseSlurmdbV0042GetConfigResponse(rsp *http.Response) (*SlurmdbV0042GetConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042GetConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiSlurmdbdConfigResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiSlurmdbdConfigResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042PostConfigResponse parses an HTTP response from a SlurmdbV0042PostConfigWithResponse call
func ParseSlurmdbV0042PostConfigResponse(rsp *http.Response) (*SlurmdbV0042PostConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042PostConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042GetDiagResponse parses an HTTP response from a SlurmdbV0042GetDiagWithResponse call
func ParseSlurmdbV0042GetDiagResponse(rsp *http.Response) (*SlurmdbV0042GetDiagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042GetDiagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiSlurmdbdStatsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiSlurmdbdStatsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042GetInstanceResponse parses an HTTP response from a SlurmdbV0042GetInstanceWithResponse call
func ParseSlurmdbV0042GetInstanceResponse(rsp *http.Response) (*SlurmdbV0042GetInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042GetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiInstancesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiInstancesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042GetInstancesResponse parses an HTTP response from a SlurmdbV0042GetInstancesWithResponse call
func ParseSlurmdbV0042GetInstancesResponse(rsp *http.Response) (*SlurmdbV0042GetInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042GetInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiInstancesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiInstancesResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042GetJobResponse parses an HTTP response from a SlurmdbV0042GetJobWithResponse call
func ParseSlurmdbV0042GetJobResponse(rsp *http.Response) (*SlurmdbV0042GetJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042GetJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiSlurmdbdJobsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiSlurmdbdJobsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042GetJobsResponse parses an HTTP response from a SlurmdbV0042GetJobsWithResponse call
func ParseSlurmdbV0042GetJobsResponse(rsp *http.Response) (*SlurmdbV0042GetJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042GetJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiSlurmdbdJobsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiSlurmdbdJobsResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042GetPingResponse parses an HTTP response from a SlurmdbV0042GetPingWithResponse call
func ParseSlurmdbV0042GetPingResponse(rsp *http.Response) (*SlurmdbV0042GetPingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042GetPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiSlurmdbdPingResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiSlurmdbdPingResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042GetQosResponse parses an HTTP response from a SlurmdbV0042GetQosWithResponse call
func ParseSlurmdbV0042GetQosResponse(rsp *http.Response) (*SlurmdbV0042GetQosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042GetQosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiSlurmdbdQosResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiSlurmdbdQosResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042PostQosResponse parses an HTTP response from a SlurmdbV0042PostQosWithResponse call
func ParseSlurmdbV0042PostQosResponse(rsp *http.Response) (*SlurmdbV0042PostQosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042PostQosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042DeleteSingleQosResponse parses an HTTP response from a SlurmdbV0042DeleteSingleQosWithResponse call
func ParseSlurmdbV0042DeleteSingleQosResponse(rsp *http.Response) (*SlurmdbV0042DeleteSingleQosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042DeleteSingleQosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiSlurmdbdQosRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiSlurmdbdQosRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042GetSingleQosResponse parses an HTTP response from a SlurmdbV0042GetSingleQosWithResponse call
func ParseSlurmdbV0042GetSingleQosResponse(rsp *http.Response) (*SlurmdbV0042GetSingleQosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042GetSingleQosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiSlurmdbdQosResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiSlurmdbdQosResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042GetTresResponse parses an HTTP response from a SlurmdbV0042GetTresWithResponse call
func ParseSlurmdbV0042GetTresResponse(rsp *http.Response) (*SlurmdbV0042GetTresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042GetTresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiTresResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiTresResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042PostTresResponse parses an HTTP response from a SlurmdbV0042PostTresWithResponse call
func ParseSlurmdbV0042PostTresResponse(rsp *http.Response) (*SlurmdbV0042PostTresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042PostTresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042DeleteUserResponse parses an HTTP response from a SlurmdbV0042DeleteUserWithResponse call
func ParseSlurmdbV0042DeleteUserResponse(rsp *http.Response) (*SlurmdbV0042DeleteUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042DeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042GetUserResponse parses an HTTP response from a SlurmdbV0042GetUserWithResponse call
func ParseSlurmdbV0042GetUserResponse(rsp *http.Response) (*SlurmdbV0042GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiUsersResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiUsersResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042GetUsersResponse parses an HTTP response from a SlurmdbV0042GetUsersWithResponse call
func ParseSlurmdbV0042GetUsersResponse(rsp *http.Response) (*SlurmdbV0042GetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiUsersResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiUsersResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042PostUsersResponse parses an HTTP response from a SlurmdbV0042PostUsersWithResponse call
func ParseSlurmdbV0042PostUsersResponse(rsp *http.Response) (*SlurmdbV0042PostUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042PostUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042PostUsersAssociationResponse parses an HTTP response from a SlurmdbV0042PostUsersAssociationWithResponse call
func ParseSlurmdbV0042PostUsersAssociationResponse(rsp *http.Response) (*SlurmdbV0042PostUsersAssociationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042PostUsersAssociationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiUsersAddCondRespStr
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiUsersAddCondRespStr
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042DeleteWckeyResponse parses an HTTP response from a SlurmdbV0042DeleteWckeyWithResponse call
func ParseSlurmdbV0042DeleteWckeyResponse(rsp *http.Response) (*SlurmdbV0042DeleteWckeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042DeleteWckeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiWckeyRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiWckeyRemovedResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042GetWckeyResponse parses an HTTP response from a SlurmdbV0042GetWckeyWithResponse call
func ParseSlurmdbV0042GetWckeyResponse(rsp *http.Response) (*SlurmdbV0042GetWckeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042GetWckeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiWckeyResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiWckeyResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042GetWckeysResponse parses an HTTP response from a SlurmdbV0042GetWckeysWithResponse call
func ParseSlurmdbV0042GetWckeysResponse(rsp *http.Response) (*SlurmdbV0042GetWckeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042GetWckeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiWckeyResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiWckeyResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSlurmdbV0042PostWckeysResponse parses an HTTP response from a SlurmdbV0042PostWckeysWithResponse call
func ParseSlurmdbV0042PostWckeysResponse(rsp *http.Response) (*SlurmdbV0042PostWckeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlurmdbV0042PostWckeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V0042OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest V0042OpenapiResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
