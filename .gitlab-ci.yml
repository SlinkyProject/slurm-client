---

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_REF_PROTECTED == "true"

stages:
  - test
  - release

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ''
  DOCKER_DRIVER: overlay2
  VERSION: 0.4.1

.docker:
  image: docker:27.5.0
  services:
    - name: docker:27.5.0-rc.1-dind
      command:
        - --tls=false
  before_script:
    - docker info
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - apk update && apk upgrade
    - apk add --no-cache bash git make
    - wget -O go.tgz https://go.dev/dl/go1.24.3.linux-amd64.tar.gz
    - tar -C /usr/local -xzf go.tgz
    - export PATH=$PATH:$HOME/go/bin/
    - export PATH=$PATH:/usr/local/go/bin
    - go env -w GOPRIVATE=github.com/SlinkyProject/*

test:
  stage: test
  extends: .docker
  script:
    - apk update && apk upgrade
    - apk add --no-cache shellcheck shfmt pre-commit
    - pre-commit run --verbose --all-files --show-diff-on-failure
  coverage: /total:\s+\(statements\)\s+\d+.\d+%/
  artifacts:
    expire_in: 7 days
    paths:
      - cover.html

audit:
  stage: test
  extends: .docker
  script:
    - make govulncheck
  allow_failure: true

include:
  - template: Jobs/Secret-Detection.gitlab-ci.yml
secret_detection:
  stage: test
  allow_failure: false
  artifacts:
    when: on_failure
    expire_in: 7 days
    paths:
      - gl-secret-detection-report.json

.git:
  image: alpine:latest
  before_script:
    - apk update && apk upgrade
    - apk add --no-cache git
    - git version
    - |
      if [ -z $CI_AUTH_TOKEN ]; then
        echo "Runner lacks auth token. Either environment variables are not defined, or runner is on an unprotected branch/tag.";
        exit 1;
      fi
    - git remote set-url origin ${CI_PROJECT_URL/gitlab.com/oauth2:${CI_AUTH_TOKEN}@gitlab.com}.git
    - git remote -v
    - |
      if [ -z "$(echo "$VERSION" | grep -Eo "^[0-9]+\.[0-9]+\.[0-9]+$")" ]; then
        echo "VERSION is not semver: `$VERSION`"
        exit 1
      fi

release-tag:
  stage: release
  extends: .git
  script:
    - set -euo pipefail
    - commit_date="$(git show -s --pretty="format:%ad" --date="format:%Y%m%d%H%M%S" HEAD)"
    - commit_hash="$(git rev-parse --short=12 HEAD)"
    - tag_version="v${VERSION}-${commit_date}-${commit_hash}"
    - echo "tag_version=${tag_version}"
    - git tag ${tag_version}
    - git push origin ${tag_version}
  rules:
    - if: $CI_COMMIT_REF_PROTECTED == "true"
      when: manual

release-branch:
  stage: release
  extends: .git
  script:
    - set -euo pipefail
    - major_minor="$(echo ${VERSION} | grep -Eo "^[0-9]+\.[0-9]+")"
    - branch_name="release-${major_minor}"
    - echo "branch_name=${branch_name}"
    - git branch ${branch_name}
    - git push --set-upstream origin ${branch_name}
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
